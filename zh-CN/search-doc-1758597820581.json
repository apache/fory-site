{"searchDocs":[{"title":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","type":0,"sectionRef":"#","url":"/zh-CN/blog/apache-fory-graduated","content":"","keywords":"","version":null},{"title":"What is Apache Fory?‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#what-is-apache-fory","content":" Apache Fory is a blazingly-fast multi-language serialization framework that revolutionizes data exchange between systems and languages. By leveraging JIT compilation and zero-copy techniques, Fory delivers up to 170x faster performance compared to other serialization frameworkds while being extremely easy to use.  ","version":null,"tagName":"h2"},{"title":"Key Features:‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#key-features","content":" üåê Cross-language serialization: Java, Python, C++, Go, JavaScript, Rust, Scala, Kotlin‚ö°Ô∏è Zero-copy optimization: Minimizes memory overhead for large datasetsüîÑ Schema evolution: Forward/backward compatibility for evolving data structuresüîí Security-first: Class registration prevents deserialization vulnerabilitiesüì¶ Multiple protocols: Object graph, Row format, and Java-compatible modes  ","version":null,"tagName":"h3"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#quick-start","content":" Java serialization example:  Fory fory = Fory.builder().build(); fory.register(DataModel.class); DataModel obj = new DataModel(/*...*/); byte[] bytes = fory.serialize(obj); DataModel restored = (DataModel) fory.deserialize(bytes);   Python serialization example  from dataclasses import dataclass import pyfory class Foo: name: str: age: int pyfory.register(Foo) bytes = pyfory.serialize(Foo(&quot;Shawn&quot;, 30)) # Ultra-fast encoding restored = pyfory.deserialize(bytes) # Instant decoding   ","version":null,"tagName":"h3"},{"title":"The Incubation Journey‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#the-incubation-journey","content":" Since entering the Apache Incubator in December 2023, Fory has achieved significant milestones.  ","version":null,"tagName":"h2"},{"title":"Community Growth‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#community-growth","content":" üë• 90+ contributorsüîß 6 new committers added, with 1 promoted to PPMCü§ù Diverse adoption across fintech, e-commerce, and cloud  ","version":null,"tagName":"h3"},{"title":"Technical Progress‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#technical-progress","content":" üöÄ 14 ASF-compliant releases (0.5.0 to 0.11.2)üîÑ 4 release managers ensuring sustainable operations‚Ñ¢ Trademark resolution: Successful rename from Fury ‚Üí Fory‚úÖ Maturity validation: Full compliance with ASF graduation requirements  ","version":null,"tagName":"h3"},{"title":"Apache Way Adoption‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#apache-way-adoption","content":" üì¨ 100% public discussions on dev@ mailing listsüó≥Ô∏è Consensus-driven decisions through formal votingüåê Complete infrastructure migration to Fory namespace  ","version":null,"tagName":"h3"},{"title":"Why Graduation Matters‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#why-graduation-matters","content":" Graduation signifies that Fory has demonstrated:  Sustainable governance with diverse PMC leadershipEnterprise-ready stability through rigorous releasesCommunity independence with no vendor dominanceASF policy compliance including security and licensing  ","version":null,"tagName":"h2"},{"title":"What's Next‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#whats-next","content":" As a Top-Level Project, Fory's roadmap includes:  Enhanced Capabilities Improved schema evolution for cross-language compatibilityProducation ready support for Rust/C++ serializationOptimize Pyfory Performance continuously and provide drop-in replacement support for pickle Ecosystem Integration GRPC IntegrationProtobuf Migration Tool Community Growth Comprehensive user documentationStructured mentorship program for new contributorsProduction case studies with early adopters  ","version":null,"tagName":"h2"},{"title":"Get Involved‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#get-involved","content":" Experience Fory's performance:  Java:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-core&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt;   Python:  pip install pyfory   Join our community:  üåê Website: https://fory.apache.orgüí¨ Slack: fory-project.slack.comüìß Mailing list: dev@fory.apache.orgüêô GitHub: https://github.com/apache/fory  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ Graduates to Top-Level Apache Project","url":"/zh-CN/blog/apache-fory-graduated#acknowledgements","content":" The PMC Members of the Fory project are listed as follows, with big thanks to their significant contributions:  Shawn Yang (Chair)tisonXuanwoTwicePJ FanningPan LiXin WangWeipeng Wangliyueolivelli  Big thanks to all contributors who submitted code, reported issues, and improved documentation. This achievement belongs to the entire Apache Fory community! ","version":null,"tagName":"h2"},{"title":"Fory v0.11.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_11_0_release","content":"","keywords":"","version":null},{"title":"Highlights‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#highlights","content":" Add Dart Serialization supportChunk-based map serialization for Java/Python with performance optimizations and XLang supportCross-language homogeneous collection serialization between Java/PythonRefactor XLang type system and serialization for fory goPerformance improvements in Python (dict/tuple/list serialization, C-API optimization)Row format evolution with support for Optional, Records, nested beans, and interface synthesisUnify Java and XLang object serialization with cross-language compatibility for enums, time, arrays, and moreRenamed Apache Fury to Apache Fory  ","version":null,"tagName":"h2"},{"title":"Breaking Changes‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#breaking-changes","content":" Renamed Apache Fury to Apache Fory, this transition impacts all project components including code repositories, maven groupId, jar names, package names, documentation, and communication channels and the source release name (and location), see Rename Announcement for more details.  ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#features","content":" feat(java): ReplaceResolveSerializer deep copy by @zhaommmmomo in https://github.com/apache/fory/pull/1925perf(python): Enhance the Python benchmark script by @penguin-wwy in https://github.com/apache/fory/pull/1926perf(python): Improve tuple and list serializer performance by @penguin-wwy in https://github.com/apache/fory/pull/1933feat(python): Implement collection serialization protocol by @penguin-wwy in https://github.com/apache/fory/pull/1942perf(python): Pre-allocate size for the dictionary by @penguin-wwy in https://github.com/apache/fory/pull/1949feat(java): use varint for jdk compatible serializers by @chaokunyang in https://github.com/apache/fory/pull/1960feat(java): configurable buffer size limit by @theigl in https://github.com/apache/fory/pull/1963perf(python): Directly access the key-value pairs of a dict by @penguin-wwy in https://github.com/apache/fory/pull/1970feat(python): Hardcoding metastring into passable parameters by @pandalee99 in https://github.com/apache/fory/pull/1987feat(java/python): new xlang type system spec implementation by @chaokunyang in https://github.com/apache/fory/pull/1690feat(c++): Support the UTF-8 to UTF-16 with SIMD by @pandalee99 in https://github.com/apache/fory/pull/1990feat(python): support latin1/utf16 string encoding in python by @chaokunyang in https://github.com/apache/fory/pull/1997feat(c++): add simd accelerated c++ ascii/latin1 check funcion by @chaokunyang in https://github.com/apache/fory/pull/1999perf(python): get object dict for faster field read/write by @chaokunyang in https://github.com/apache/fory/pull/2003perf(python): optimize bytes buffer creation by @chaokunyang in https://github.com/apache/fory/pull/2008feat(java): make 4 bytes utf16 size header optional for utf8 encoding by @chaokunyang in https://github.com/apache/fory/pull/2010feat(ci): support building python on windows by @An-DJ in https://github.com/apache/fory/pull/1885feat(java): Chunk by chunk predictive map serialization protocol by @Hen1ng in https://github.com/apache/fory/pull/1722feat(java): support streaming encode/decode to/from buffer for row format by @chaokunyang in https://github.com/apache/fory/pull/2024feat(c++): Add benchmark for performance evaluation by @pandalee99 in https://github.com/apache/fory/pull/2023feat(java): new implementation and protocol refine for chunk based map serialization by @chaokunyang in https://github.com/apache/fory/pull/2025feat(c++): BenchMark will be a Module by @pandalee99 in https://github.com/apache/fory/pull/2028feat(java): jit support for chunk based map serialization by @chaokunyang in https://github.com/apache/fory/pull/2027feat(java): Add basicMultiConfigFury dataprovider and add basic map unit test use the dataProvider by @Hen1ng in https://github.com/apache/fory/pull/2032feat(python): unify type system between python and xlang serialization in pyfury by @chaokunyang in https://github.com/apache/fory/pull/2034feat(java): deserialize one pojo into another type by @orisgarno in https://github.com/apache/fory/pull/2012feat(python): chunk based map serialization for python by @chaokunyang in https://github.com/apache/fory/pull/2038feat(python): add macos pyfury ci by @chaokunyang in https://github.com/apache/fory/pull/2041feat(python): automatic release pyfury on macos and windows by @chaokunyang in https://github.com/apache/fory/pull/2045feat(javascript): optimize string serializer by @theweipeng in https://github.com/apache/fory/pull/2043feat(java): zstd meta compressor by @orisgarno in https://github.com/apache/fory/pull/2042feat(python): support 3.13 by @penguin-wwy in https://github.com/apache/fory/pull/2046feat(java): support register type by name in java by @chaokunyang in https://github.com/apache/fory/pull/2053feat(spec): remove polymorphic from type id by @chaokunyang in https://github.com/apache/fory/pull/2054feat(java): Add fastpath for collection/map serialize and deserialize by @Hen1ng in https://github.com/apache/fory/pull/2050perf(python): upgrade pyarrow version to 15.0.0 by @pandalee99 in https://github.com/apache/fory/pull/2056feat(python): chunk based map serialization in pure python by @pandalee99 in https://github.com/apache/fory/pull/2037build(bazel): Extracts compile_commands.json by @penguin-wwy in https://github.com/apache/fory/pull/2059feat(javascript): simplify the definition of object type description by @theweipeng in https://github.com/apache/fory/pull/2058perf(java): Optimize Computational Efficiency of MetaStringEncoder::encodeGeneric by @LouisLou2 in https://github.com/apache/fory/pull/2072feat(javascript): Impl xlang by @theweipeng in https://github.com/apache/fory/pull/2075perf(python): Optimize sequence buffer writing via the c-api by @penguin-wwy in https://github.com/apache/fory/pull/2078feat(javascript): Speed up string serializer by @theweipeng in https://github.com/apache/fory/pull/2083feat(java): extra entry in disallowed.txt by @pjfanning in https://github.com/apache/fory/pull/2098perf(java): Refactor ThreadPoolFury to improve performance by @moooonk in https://github.com/apache/fory/pull/2092perf(java): Improve performance by using System.arraycopy to copy between byte arrays by @Cybermaxke in https://github.com/apache/fory/pull/2101feat(java): use sha256 to check disallowed.txt tamper by @chaokunyang in https://github.com/apache/fory/pull/2102perf(java): Refactor field sorting in StructSerializer to cache transformed field names and avoid redundant computation by @LouisLou2 in https://github.com/apache/fory/pull/2091feat(java): support passed tracking ref meta when building serializers by @chaokunyang in https://github.com/apache/fory/pull/2113feat(java): support nested bean in array/collection/map for row format by @chaokunyang in https://github.com/apache/fory/pull/2116feat(java): support inconsistent registration by name/id by @chaokunyang in https://github.com/apache/fory/pull/2120feat: xlang map chunk serialization between java/python by @chaokunyang in https://github.com/apache/fory/pull/2127feat: xlang homogeneous collection serialization between java/python by @chaokunyang in https://github.com/apache/fory/pull/2130feat(chore): bump version support kotlin by @chaokunyang in https://github.com/apache/fory/pull/2134feat(dart): Add Fury Dart Support by @LouisLou2 in https://github.com/apache/fory/pull/2112refactor(java): refactor object serializer for unifying xlang/java serialization in java by @chaokunyang in https://github.com/apache/fory/pull/2139refactor(java): move methods from object serializer to abstract object serializer by @chaokunyang in https://github.com/apache/fory/pull/2140feat(java): unify java and xlang object serialization by @chaokunyang in https://github.com/apache/fory/pull/2146feat(java): support enum/time/array final types in xlang serialization by @chaokunyang in https://github.com/apache/fory/pull/2164feat(java): FuryField annotation hints for struct serialization by @Hen1ng in https://github.com/apache/fory/pull/2036feat(kotlin): add kotlin ci by @pandalee99 in https://github.com/apache/fory/pull/2176perf(kotlin): Add multiple versions of kotlin CI by @pandalee99 in https://github.com/apache/fory/pull/2184feat(dart): add test_config.yaml and apply TestConfig for environment-specific settings by @LouisLou2 in https://github.com/apache/fory/pull/2183feat: add Dart to Language enums across all implementations by @LouisLou2 in https://github.com/apache/fory/pull/2187feat(go): fury go implements new xlang by @pandalee99 in https://github.com/apache/fory/pull/2198feat(java): add protobuf serializer for message and byte string by @chaokunyang in https://github.com/apache/fory/pull/2213feat(spec): update type meta encoding by @chaokunyang in https://github.com/apache/fory/pull/2216feat(java): type meta encoding for xlang in java by @chaokunyang in https://github.com/apache/fory/pull/2197feat(java): support trackingRef in furyField by @Hen1ng in https://github.com/apache/fory/pull/2168feat(java): add DescriptorBuilder for easy build and copying Descriptor by @Hen1ng in https://github.com/apache/fory/pull/2229feat(java): Support furyField nullable in codeGen pattern by @Hen1ng in https://github.com/apache/fory/pull/2191feat(java): row encoder supports custom types and collections by @stevenschlansker in https://github.com/apache/fory/pull/2243test(benchmark): add msgpack serialization/deserialization to benchmark by @Kn0688 in https://github.com/apache/fory/pull/2242feat(go): fury-go implements adaptation and optimization for new xlang by @pandalee99 in https://github.com/apache/fory/pull/2230perf(c++): Evaluate the implementation effect &amp;&amp;simdutf performs partial vectorization by @pandalee99 in https://github.com/apache/fory/pull/2033feat(java): fury row encoder now supports implementing interfaces with simple value type by @stevenschlansker in https://github.com/apache/fory/pull/2250feat(java): row format supports Optional by @stevenschlansker in https://github.com/apache/fory/pull/2254feat(java): row format supports Record types by @stevenschlansker in https://github.com/apache/fory/pull/2256perf(go): Optimize the type registration system &amp;&amp; Reduce useless code by @pandalee99 in https://github.com/apache/fory/pull/2262feat(java): support meta shared serialization for xlang in java by @chaokunyang in https://github.com/apache/fory/pull/2276feat(python): replace &quot;_class&quot; prefix with &quot;_type&quot; in metashare by @urlyy in https://github.com/apache/fory/pull/2290feat(java): Adding explanatory message to deserializeNonexistentClass misconfiguration in Config by @drse in https://github.com/apache/fory/pull/2300feat(java): row encoder supports synthesizing interfaces nested inside of records by @stevenschlansker in https://github.com/apache/fory/pull/2304feat(java): Support customized serializer for abstract or interface. by @CherishCai in https://github.com/apache/fory/pull/2311feat(java): row encoder supports custom rewriting values without changing their type by @stevenschlansker in https://github.com/apache/fory/pull/2305feat(java): support multi-dimensional array field serialization in xlang meta shared mode by @OmCheeLin in https://github.com/apache/fory/pull/2314feat(python): bump cython to 3.1.1 by @penguin-wwy in https://github.com/apache/fory/pull/2318  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#bug-fix","content":" fix(doc): set compressString default value to false by @chaokunyang in https://github.com/apache/fory/pull/1913fix(java): Move schema caching to unsafe trait to avoid issues when using non-inferred schema. by @wywen in https://github.com/apache/fory/pull/1944fix(java): ClassLoaderFuryPooled#setFactoryCallback cannot effect old Fury by @MrChang0 in https://github.com/apache/fory/pull/1946fix(java): fix find constructor error in generated serializer class caused by duplicated class classloading for Fury by @chaokunyang in https://github.com/apache/fory/pull/1948fix(c++): fix bazel install by @chaokunyang in https://github.com/apache/fory/pull/1979fix(java): Fix flakiness in ExpressionVisitorTest#testTraverseExpression by @AmitPr in https://github.com/apache/fory/pull/1968fix(java): only print warn message if scopedMetaShareEnabled is true ‚Ä¶ by @zhfeng in https://github.com/apache/fory/pull/1985fix(java): Fix the issue caused by not using readCompressedBytesString during deserialization when string compression is enabled. by @Aliothmoon in https://github.com/apache/fory/pull/1991fix(java): Compatible mode on de/serialize api failed to deserialize by @orisgarno in https://github.com/apache/fory/pull/1996fix(java): chunk map serialize an error by @Hen1ng in https://github.com/apache/fory/pull/2030fix(java): fix duplicate entry write at max chunk size bound by @chaokunyang in https://github.com/apache/fory/pull/2040fix(java): Remove duplicate maven dependency by @Hen1ng in https://github.com/apache/fory/pull/2044fix(python): Fix missing parameters and old API names by @pandalee99 in https://github.com/apache/fory/pull/2049fix(java): fix read null chunk out of bound by @chaokunyang in https://github.com/apache/fory/pull/2065fix(java): Fix error with MemoryBuffer::readBytesAsInt64 when not in LITTLE_ENDIAN mode by @LouisLou2 in https://github.com/apache/fory/pull/2069fix(java): fix read primitives error on fill buffer bound by @chaokunyang in https://github.com/apache/fory/pull/2064fix(java): java.util.Date and its subclasses are mutable by @moooonk in https://github.com/apache/fory/pull/2076fix(java): fix ImmutableCollections$SubList duplicate registration by @w-yfan in https://github.com/apache/fory/pull/2074fix(java): Modify some mistake by @Hen1ng in https://github.com/apache/fory/pull/2086fix(python): inconsistent struct hash calculation between Java and Python by @LouisLou2 in https://github.com/apache/fory/pull/2108fix(java): fix serialization npe of collection with all null elems by @chaokunyang in https://github.com/apache/fory/pull/2111fix(java): fix not null value flag by @chaokunyang in https://github.com/apache/fory/pull/2114fix(java): use registered id to sort fields by @chaokunyang in https://github.com/apache/fory/pull/2115fix(java): fix disallowed.txt check in windows by @chaokunyang in https://github.com/apache/fory/pull/2128fix(java): fix nested chunk map serialization error when generics exists by @chaokunyang in https://github.com/apache/fory/pull/2136fix(java): fix DisallowedList calculate hash in Windows by @moooonk in https://github.com/apache/fory/pull/2142fix(java): fix fury logger log exception by @chaokunyang in https://github.com/apache/fory/pull/2153fix(java): fix xlang container field deserialization type error by @chaokunyang in https://github.com/apache/fory/pull/2161fix(java): fix nested map chunk serialization codegen by @chaokunyang in https://github.com/apache/fory/pull/2172fix(kotlin): fix kotlin compile error by @chaokunyang in https://github.com/apache/fory/pull/2173fix(dart): fix inappropriate naming and align test titles by @LouisLou2 in https://github.com/apache/fory/pull/2180fix(dart): replace string-based type selection with enum in FixedNum factory method by @LouisLou2 in https://github.com/apache/fory/pull/2185fix(java): ensure readVarUint36Small reads full bits regardless of remaining buffer size by @LouisLou2 in https://github.com/apache/fory/pull/2179test(java): add test for fix of readVarUint36Small behavior by @LouisLou2 in https://github.com/apache/fory/pull/2186fix(python): fix pyfury build using pyproject.toml by @chaokunyang in https://github.com/apache/fory/pull/2206fix(java): ensure FuryObjectInputStream.read never returns 0 when length&gt;0 #2204 by @X-czh in https://github.com/apache/fory/pull/2205fix(python): TimestampSerializer fails on Windows for naive datetimes near epoch by @LouisLou2 in https://github.com/apache/fory/pull/2209fix(java): Fix empty string processing in MetaStringBytes by @LouisLou2 in https://github.com/apache/fory/pull/2212fix(java): fix field super class missing in compatible mode by @chaokunyang in https://github.com/apache/fory/pull/2214fix(java): mark fury-test-core as test dep in fury extensions by @chaokunyang in https://github.com/apache/fory/pull/2231fix(java): MemoryBuffer getRemainingBytes can return unexpected results on a slice by @stevenschlansker in https://github.com/apache/fory/pull/2237fix(java): use serialization binding by @Hen1ng in https://github.com/apache/fory/pull/2241fix(C++): Fix reversed parameters and incorrect calls in string_util benchmark by @lzaeh in https://github.com/apache/fory/pull/2246fix(java): fix row type enum properties by @stevenschlansker in https://github.com/apache/fory/pull/2258fix(java): fix generics when write/read null map kv chunk by @chaokunyang in https://github.com/apache/fory/pull/2261fix(java): row encoder incorrectly interprets type parameters as cycles by @stevenschlansker in https://github.com/apache/fory/pull/2265fix(scala): Ensure singleton classes are initialized before reading by @creddy in https://github.com/apache/fory/pull/2267fix(go): fix metastringbytes inconsistency issue by @lzaeh in https://github.com/apache/fory/pull/2269fix(java): descriptors for beans should not include static methods by @stevenschlansker in https://github.com/apache/fory/pull/2281fix(java): raise exception when registering invalid serializer for Map/List by @OmCheeLin in https://github.com/apache/fory/pull/2291fix(java): xlang test skip needs correct import in newer python versions by @stevenschlansker in https://github.com/apache/fory/pull/2296fix(java): row encoder interface synthesis handle (Optional) null correctly by @stevenschlansker in https://github.com/apache/fory/pull/2306fix(java): Use (long, long, byte) key for MetaStringBytes cache to prevent collisions by @LouisLou2 in https://github.com/apache/fory/pull/2308fix(python): update python benchmark script by @penguin-wwy in https://github.com/apache/fory/pull/2315  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#other-improvements","content":" chore(ci): Migrate the ci from macOS 12 to macOS 13 by @penguin-wwy in https://github.com/apache/fory/pull/1927chore: bump release version to 0.9.0 by @chaokunyang in https://github.com/apache/fory/pull/1940chore(Rust): fix lint problems by @theweipeng in https://github.com/apache/fory/pull/1962docs(java): add object mapping example and tests by @chaokunyang in https://github.com/apache/fory/pull/1974chore(python): drop py3.7 support by @chaokunyang in https://github.com/apache/fory/pull/1981chore(c++): Function inlining and code tuning by @pandalee99 in https://github.com/apache/fory/pull/2002style(cpp): rename logging level with &quot;FURY_&quot; prefix by @An-DJ in https://github.com/apache/fory/pull/2016docs: update copyright date in NOTICE by @caicancai in https://github.com/apache/fory/pull/2029docs(java): update java serialization schema compatibility doc by @chaokunyang in https://github.com/apache/fory/pull/2047docs: Update to latest version by @theweipeng in https://github.com/apache/fory/pull/2080Update snapshot version by @chaokunyang in https://github.com/apache/fory/pull/2081chore: remove required_linear_history by @chaokunyang in https://github.com/apache/fory/pull/2122chore: fix license issue by @chaokunyang in https://github.com/apache/fory/pull/2137chore(java): use the SHA256_HASH field value directly. by @LiangliangSui in https://github.com/apache/fory/pull/2144chore(java): Update the content that needs to be corrected when reading the code. by @LiangliangSui in https://github.com/apache/fory/pull/2143chore: update copyright year to 2025 by @chaokunyang in https://github.com/apache/fory/pull/2149chore: bump release version to 0.10.1 by @chaokunyang in https://github.com/apache/fory/pull/2151chore(dart): remove unused dart/fury-test/lib/main.dart by @LouisLou2 in https://github.com/apache/fory/pull/2181chore: bump release version to 0.10.2 by @LiangliangSui in https://github.com/apache/fory/pull/2207chore(java): reduce java test log by @chaokunyang in https://github.com/apache/fory/pull/2217chore(.asf.yaml): enable rebase-and-merge button by @chaokunyang in https://github.com/apache/fory/pull/2220chore(github): fix YAML warnings about spaces before comments by @stevenschlansker in https://github.com/apache/fory/pull/2225chore(java): janino 3.1.12 by @stevenschlansker in https://github.com/apache/fory/pull/2226chore(java): jdk 24 build support by @stevenschlansker in https://github.com/apache/fory/pull/2224chore(javascript): remove nodejs 12 support by @chaokunyang in https://github.com/apache/fory/pull/2233chore(java): gitignore testng output by @stevenschlansker in https://github.com/apache/fory/pull/2238chore: fix clippy warning by @theweipeng in https://github.com/apache/fory/pull/2240chore: Delete the redundant comments and add the document by @pandalee99 in https://github.com/apache/fory/pull/2244chore: bump release version to 0.10.3 by @pandalee99 in https://github.com/apache/fory/pull/2252chore: rename apache fury to apache fory by @chaokunyang in https://github.com/apache/fory/pull/2263chore: keep fury for maven artifact by @chaokunyang in https://github.com/apache/fory/pull/2264chore(java): skip xlang tests when pyfory is not available by @stevenschlansker in https://github.com/apache/fory/pull/2266chore(java): Use crossLanguage instead of language in Fory by @CherishCai in https://github.com/apache/fory/pull/2274chore(java): fix xlang test skip in the case where there is no Python at all by @stevenschlansker in https://github.com/apache/fory/pull/2280chore(java): gitignore test-output from integration_tests as well as java by @stevenschlansker in https://github.com/apache/fory/pull/2282chore: update fory rename in README.md by @chaokunyang in https://github.com/apache/fory/pull/2292chore: Some Fory changes in README.md by @pjfanning in https://github.com/apache/fory/pull/2295chore: update fory logo by @chaokunyang in https://github.com/apache/fory/pull/2298chore(java): skip find customized serializer when absClassInfo is empty by @CherishCai in https://github.com/apache/fory/pull/2316  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fory v0.11.0 Released","url":"/zh-CN/blog/fory_0_11_0_release#new-contributors","content":" @theigl made their first contribution in https://github.com/apache/fory/pull/1963@AmitPr made their first contribution in https://github.com/apache/fory/pull/1968@zhfeng made their first contribution in https://github.com/apache/fory/pull/1985@Hen1ng made their first contribution in https://github.com/apache/fory/pull/1722@LouisLou2 made their first contribution in https://github.com/apache/fory/pull/2069@moooonk made their first contribution in https://github.com/apache/fory/pull/2076@w-yfan made their first contribution in https://github.com/apache/fory/pull/2074@Cybermaxke made their first contribution in https://github.com/apache/fory/pull/2101@X-czh made their first contribution in https://github.com/apache/fory/pull/2205@stevenschlansker made their first contribution in https://github.com/apache/fory/pull/2225@Kn0688 made their first contribution in https://github.com/apache/fory/pull/2242@lzaeh made their first contribution in https://github.com/apache/fory/pull/2246@creddy made their first contribution in https://github.com/apache/fory/pull/2267@CherishCai made their first contribution in https://github.com/apache/fory/pull/2274@OmCheeLin made their first contribution in https://github.com/apache/fory/pull/2291@drse made their first contribution in https://github.com/apache/fory/pull/2300  Full Changelog: https://github.com/apache/fory/compare/v0.10.3...v0.11.0-rc2 ","version":null,"tagName":"h2"},{"title":"Fory v0.11.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_11_1_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.11.1 Released","url":"/zh-CN/blog/fory_0_11_1_release#features","content":" feat(java): row encoder supports synthesizing interfaces nested inside of records by @stevenschlansker in https://github.com/apache/fory/pull/2304feat(java): Support customized serializer for abstract or interface. by @CherishCai in https://github.com/apache/fory/pull/2311feat(java): row encoder supports custom rewriting values without changing their type by @stevenschlansker in https://github.com/apache/fory/pull/2305feat(java): support multi-dimensional array field serialization in xlang meta shared mode by @OmCheeLin in https://github.com/apache/fory/pull/2314feat(python): bump cython to 3.1.1 by @penguin-wwy in https://github.com/apache/fory/pull/2318feat(java): array row encoder supports set of interface type by @stevenschlansker in https://github.com/apache/fory/pull/2333feat(java): support maven shade for disallowed.txt by @chaokunyang in https://github.com/apache/fory/pull/2327feat(java): store OptionalInt, OptionalLong, OptionalDouble same as nullable values by @stevenschlansker in https://github.com/apache/fory/pull/2338  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fory v0.11.1 Released","url":"/zh-CN/blog/fory_0_11_1_release#bug-fix","content":" fix(java): row encoder interface synthesis handle (Optional) null correctly by @stevenschlansker in https://github.com/apache/fory/pull/2306fix(java): Use (long, long, byte) key for MetaStringBytes cache to prevent collisions by @LouisLou2 in https://github.com/apache/fory/pull/2308fix(python): update python benchmark script by @penguin-wwy in https://github.com/apache/fory/pull/2315fix(java): fix row encoder synthesized interface lazy-decoding of Optional by @stevenschlansker in https://github.com/apache/fory/pull/2320fix(java): fix row format handling Optional of type with custom codec by @stevenschlansker in https://github.com/apache/fory/pull/2321fix(java): row encoder array element serializer created too late by @stevenschlansker in https://github.com/apache/fory/pull/2323fix(python): fix py3.13 ci on windows by @chaokunyang in https://github.com/apache/fory/pull/2334fix(python): correct compute_string_hash usage in StructHashVisitor.visit_customized by @lzaeh in https://github.com/apache/fory/pull/2335fix(java): fix register serializer for abstract class by @chaokunyang in https://github.com/apache/fory/pull/2347fix(java): fix map nested array type serialization codegen by @chaokunyang in https://github.com/apache/fory/pull/2352  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fory v0.11.1 Released","url":"/zh-CN/blog/fory_0_11_1_release#other-improvements","content":" chore(java): skip find customized serializer when absClassInfo is empty by @CherishCai in https://github.com/apache/fory/pull/2316chore: add release note generate tool by @chaokunyang in https://github.com/apache/fory/pull/2322chore: Update README.md for fory rename by @chaokunyang in https://github.com/apache/fory/pull/2324chore: update slack invite link to fory by @chaokunyang in https://github.com/apache/fory/pull/2325perf(java): Improve zone offset deserialization performance by overriding JDK caching by @Cybermaxke in https://github.com/apache/fory/pull/2336chore: bump release version to 0.11.0 by @chaokunyang in https://github.com/apache/fory/pull/2340perf(java): update benchmark plot by @chaokunyang in https://github.com/apache/fory/pull/2342chore: update plots fro compatible by @chaokunyang in https://github.com/apache/fory/pull/2344docs: add document for customized map collection serializers by @chaokunyang in https://github.com/apache/fory/pull/2351docs: add row format guide for ext and interface types by @nabilshafi in https://github.com/apache/fory/pull/2346chore(java): ProtobufDispatcher should trigger log warning at most once by @ClaudioConsolmagno in https://github.com/apache/fory/pull/2353docs: format markdown docs by @chaokunyang in https://github.com/apache/fory/pull/2354chore: refine validate serializers message for map/collection by @chaokunyang in https://github.com/apache/fory/pull/2355  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fory v0.11.1 Released","url":"/zh-CN/blog/fory_0_11_1_release#new-contributors","content":" @nabilshafi made their first contribution in https://github.com/apache/fory/pull/2346@ClaudioConsolmagno made their first contribution in https://github.com/apache/fory/pull/2353  Full Changelog: https://github.com/apache/fory/compare/v0.11.0...v0.11.1-rc1 ","version":null,"tagName":"h2"},{"title":"Fory v0.11.2 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_11_2_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.11.2 Released","url":"/zh-CN/blog/fory_0_11_2_release#features","content":" feat(python): Add Python Linux ARM64 support and optimize Bazel installation by @esafak in https://github.com/apache/fory/pull/2357feat(java): row encoder array deserialization into List supports lazy access by @stevenschlansker in https://github.com/apache/fory/pull/2358  ","version":null,"tagName":"h2"},{"title":"Bug Fixes‚Äã","type":1,"pageTitle":"Fory v0.11.2 Released","url":"/zh-CN/blog/fory_0_11_2_release#bug-fixes","content":" fix(java): fix register class async jit thread safety by @chaokunyang in https://github.com/apache/fory/pull/2365fix: fix WeakHashMap thread safety by @chaokunyang in https://github.com/apache/fory/pull/2366fix(rust): fix rust lint error by @chaokunyang in https://github.com/apache/fory/pull/2373fix(java): fix automatic module conflict with maven shaded dependencies by @chaokunyang in https://github.com/apache/fory/pull/2372  ","version":null,"tagName":"h2"},{"title":"Documentation‚Äã","type":1,"pageTitle":"Fory v0.11.2 Released","url":"/zh-CN/blog/fory_0_11_2_release#documentation","content":" docs: adding multi-threading clarifications for java serialization by @drse in https://github.com/apache/fory/pull/2356docs: fix document markdown lint error by @LiangliangSui in https://github.com/apache/fory/pull/2360docs: Update java_serialization_guide.md - Fury - Fory by @apupier in https://github.com/apache/fory/pull/2362docs: Update java_serialization_guide.md - fury --&gt; fory by @apupier in https://github.com/apache/fory/pull/2361docs: update jdk 24 support in README.md by @chaokunyang in https://github.com/apache/fory/pull/2368  ","version":null,"tagName":"h2"},{"title":"Chores‚Äã","type":1,"pageTitle":"Fory v0.11.2 Released","url":"/zh-CN/blog/fory_0_11_2_release#chores","content":" chore: bump version 0.11.1 by @LiangliangSui in https://github.com/apache/fory/pull/2369  Full Changelog: https://github.com/apache/fory/compare/v0.11.1...v0.11.2 ","version":null,"tagName":"h2"},{"title":"Fory v0.12.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_12_0_release","content":"","keywords":"","version":null},{"title":"Highlights‚Äã","type":1,"pageTitle":"Fory v0.12.0 Released","url":"/zh-CN/blog/fory_0_12_0_release#highlights","content":" [Python] Support Python __getstate__/__setstate__/__reduce__ serialization protocol[Python] Support serialize python function[Java] Use JDK11 for fory-format module[Scala]Support default value for scala case/pojo classes when deseralizing[Kotlin] Support default value for kotlin data classes when deserializing  ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.12.0 Released","url":"/zh-CN/blog/fory_0_12_0_release#features","content":" refactor(python): replace Black and Flake8 with Ruff by @esafak in https://github.com/apache/fory/pull/2388refactor(python): Unify DataClassSerializer and ComplexObjectSerializer by @esafak in https://github.com/apache/fory/pull/2389refactor(python): Simplify require_pyarrow, remove undefined pytest.mark by @esafak in https://github.com/apache/fory/pull/2396feat(python): Replace usage of ComplexObjectSerializer with DataClassSerializer by @esafak in https://github.com/apache/fory/pull/2395feat(python): Add StatefulSerializer using getstate, setstate by @esafak in https://github.com/apache/fory/pull/2400feat(python): Implement ReduceSerializer for reduce support by @esafak in https://github.com/apache/fory/pull/2401feat(python): Support codegen with XLANG in DataClassSerializer by @esafak in https://github.com/apache/fory/pull/2405perf(Go/python): Type system compatibility upgrade by @pandalee99 in https://github.com/apache/fory/pull/2339feat(python): Add FunctionSerializer for function serialization by @esafak in https://github.com/apache/fory/pull/2404feat: Implement ObjectSerializer for custom objects by @esafak in https://github.com/apache/fory/pull/2413feat(scala): support scala object with default values by @chaokunyang in https://github.com/apache/fory/pull/2412refactor(java): refactor java default value support for scala/kotlin by @chaokunyang in https://github.com/apache/fory/pull/2415feat(kotlin): support default value for kotlin data class by @chaokunyang in https://github.com/apache/fory/pull/2416feat(kotlin): add cache to kotlin default value support by @chaokunyang in https://github.com/apache/fory/pull/2419refactor(ci): Migrate CI runner to Python scripts by @esafak in https://github.com/apache/fory/pull/2406feat(java): use java11 for fory-format module by @chaokunyang in https://github.com/apache/fory/pull/2448feat(python): add register api for python by @chaokunyang in https://github.com/apache/fory/pull/2451feat(java): add graalvm 23 ci by @chaokunyang in https://github.com/apache/fory/pull/2463  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fory v0.12.0 Released","url":"/zh-CN/blog/fory_0_12_0_release#bug-fix","content":" fix: tidy up issues in scala_guide.md by @pjfanning in https://github.com/apache/fory/pull/2374fix(java): ClassDef header calculation error by @LiangliangSui in https://github.com/apache/fory/pull/2382ci(python): Build manylinux_2_28 wheels using auditwheel by @esafak in https://github.com/apache/fory/pull/2381fix: Correct pyarrow installation check and add bazel troubleshooting by @esafak in https://github.com/apache/fory/pull/2418fix(go): fix type writing and reading logic in slice by @lzaeh in https://github.com/apache/fory/pull/2427fix(rust): fix rust lint error by @chaokunyang in https://github.com/apache/fory/pull/2447fix(java): crash when map only contains null value by @LouisLou2 in https://github.com/apache/fory/pull/2444fix(java): MemoryBuffer::readChars by @LouisLou2 in https://github.com/apache/fory/pull/2438fix(java): fix java deploy with different java versions by @chaokunyang in https://github.com/apache/fory/pull/2449fix(java): fix install jdks by @chaokunyang in https://github.com/apache/fory/pull/2450fix(java): fix maven deploy by @chaokunyang in https://github.com/apache/fory/pull/2452fix(java): fix shade janino duplciate entry by @chaokunyang in https://github.com/apache/fory/pull/2453fix(java): fix extension java module conflict by @chaokunyang in https://github.com/apache/fory/pull/2455fix(java): fix extension java module conflict by @chaokunyang in https://github.com/apache/fory/pull/2456fix(java): fix decode classdef for abstract classes by @chaokunyang in https://github.com/apache/fory/pull/2462fix(python): fix pyfory pypi release (#2473) by @chaokunyang in https://github.com/apache/fory/pull/2474fix(python): fix py releases macos13 by @chaokunyang in https://github.com/apache/fory/pull/2479  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fory v0.12.0 Released","url":"/zh-CN/blog/fory_0_12_0_release#other-improvements","content":" chore(Scala): upgrade sbt and plugins by @pjfanning in https://github.com/apache/fory/pull/2379chore(python): add more comprehensive test parameters by @pandalee99 in https://github.com/apache/fory/pull/2377chore(Scala): remove var that can be mutated by @pjfanning in https://github.com/apache/fory/pull/2385chore(Scala): add test for Scala 3 enum by @pjfanning in https://github.com/apache/fory/pull/2386chore(Scala): use setup-sbt CI action by @pjfanning in https://github.com/apache/fory/pull/2387chore(Scala): refactor scala test so it asserts something by @pjfanning in https://github.com/apache/fory/pull/2390chore(Scala): Create DurationTest.scala by @pjfanning in https://github.com/apache/fory/pull/2394chore(Java): handle deserialization scenario that currently throws an IndexOutOfBoundsException by @pjfanning in https://github.com/apache/fory/pull/2399chore: bump release version to 0.11.2 by @pandalee99 in https://github.com/apache/fory/pull/2403chore(deps): bump org.apache.commons:commons-lang3 from 3.12.0 to 3.18.0 in /java/fory-test-core by @dependabot[bot] in https://github.com/apache/fory/pull/2408chore(docs): Fix the names of some documents by @pandalee99 in https://github.com/apache/fory/pull/2411chore(cpp): fix duplicate copyright by @co63oc in https://github.com/apache/fory/pull/2426docs: fix ruff command by @co63oc in https://github.com/apache/fory/pull/2425chore: fix typos by @co63oc in https://github.com/apache/fory/pull/2424chore(dart): fix typos by @co63oc in https://github.com/apache/fory/pull/2428chore: fix typos by @co63oc in https://github.com/apache/fory/pull/2429chore: remove incubating by @chaokunyang in https://github.com/apache/fory/pull/2431chore: fix typos by @co63oc in https://github.com/apache/fory/pull/2433chore: fix typos by @co63oc in https://github.com/apache/fory/pull/2436chore: translate comments by @co63oc in https://github.com/apache/fory/pull/2442chore(python): add execute doc for cross langauge tests in python by @chaokunyang in https://github.com/apache/fory/pull/2420chore(java): arrow 18.3.0 by @stevenschlansker in https://github.com/apache/fory/pull/2458chore: prepare commits for releases-0.12 by @chaokunyang in https://github.com/apache/fory/pull/2470chore(python): disable import format warning by @chaokunyang in https://github.com/apache/fory/pull/2477  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fory v0.12.0 Released","url":"/zh-CN/blog/fory_0_12_0_release#new-contributors","content":" @co63oc made their first contribution in https://github.com/apache/fory/pull/2426  Full Changelog: https://github.com/apache/fory/compare/v0.11.2...v0.12.0 ","version":null,"tagName":"h2"},{"title":"Fory v0.12.2 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_12_2_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.12.2 Released","url":"/zh-CN/blog/fory_0_12_2_release#features","content":" feat(java): bean encoder implemented interfaces honor @Ignore by @stevenschlansker in https://github.com/apache/fory/pull/2576feat(java): support limit deserialization depth by @chaokunyang in https://github.com/apache/fory/pull/2578  ","version":null,"tagName":"h2"},{"title":"Bug Fixes‚Äã","type":1,"pageTitle":"Fory v0.12.2 Released","url":"/zh-CN/blog/fory_0_12_2_release#bug-fixes","content":" fix(ci): Install pyfory for golang xlang tests by @esafak in https://github.com/apache/fory/pull/2561fix(ci): Exit with subprocess return code in run_ci.py by @esafak in https://github.com/apache/fory/pull/2560fix(java): fix codegen name conflict by @chaokunyang in https://github.com/apache/fory/pull/2565fix(java): Skip calculation of classVersionHash if checkClassVersion by @theigl in https://github.com/apache/fory/pull/2573fix(java): skip hash compute for abstract field type by @chaokunyang in https://github.com/apache/fory/pull/2575fix(java): row format buffer recycling leaves offset and size for null by @stevenschlansker in https://github.com/apache/fory/pull/2540  ","version":null,"tagName":"h2"},{"title":"Improvements‚Äã","type":1,"pageTitle":"Fory v0.12.2 Released","url":"/zh-CN/blog/fory_0_12_2_release#improvements","content":" refactor(java): refactor fory java exception hierarchical structure by @chaokunyang in https://github.com/apache/fory/pull/2577  Full Changelog: https://github.com/apache/fory/compare/v0.12.1...v0.12.2 ","version":null,"tagName":"h2"},{"title":"Fory v0.12.3 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_12_3_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.12.3 Released","url":"/zh-CN/blog/fory_0_12_3_release#features","content":" feat(java): support concurent map serialization when being updated by @chaokunyang in https://github.com/apache/fory/pull/2617feat(python): support limit pyfory depth by @chaokunyang in https://github.com/apache/fory/pull/2625feat(python): drop-in replacement for pickle serialization by @chaokunyang in https://github.com/apache/fory/pull/2629  ","version":null,"tagName":"h2"},{"title":"Bug Fixes‚Äã","type":1,"pageTitle":"Fory v0.12.3 Released","url":"/zh-CN/blog/fory_0_12_3_release#bug-fixes","content":" fix(java): fix get nested genericType for codegen by @chaokunyang in https://github.com/apache/fory/pull/2632  Full Changelog: https://github.com/apache/fory/compare/v0.12.2...v0.12.3 ","version":null,"tagName":"h2"},{"title":"Fory v0.12.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fory_0_12_1_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fory v0.12.1 Released","url":"/zh-CN/blog/fory_0_12_1_release#features","content":" feat(python): set default languge to python for pyfory by @chaokunyang in https://github.com/apache/fory/pull/2490feat(python): add register api to python by @chaokunyang in https://github.com/apache/fory/pull/2491  ","version":null,"tagName":"h2"},{"title":"Bug Fixes‚Äã","type":1,"pageTitle":"Fory v0.12.1 Released","url":"/zh-CN/blog/fory_0_12_1_release#bug-fixes","content":" Ensure Encoders.mapEncoder loads bean classes correctly by @stevenschlansker in https://github.com/apache/fory/pull/2494fix(java): row format generated bean types handling Optional by @stevenschlansker in https://github.com/apache/fory/pull/2497fix(java): fix addListener not releasing the lock by @open-snail in https://github.com/apache/fory/pull/2500  ","version":null,"tagName":"h2"},{"title":"Improvements‚Äã","type":1,"pageTitle":"Fory v0.12.1 Released","url":"/zh-CN/blog/fory_0_12_1_release#improvements","content":" Improve PyPI landing page and add row-format documentation (https://github.com/apache/fory/pull/2498, https://github.com/apache/fory/pull/2499)Refactor python release workflow by @esafak in https://github.com/apache/fory/pull/2483 https://github.com/apache/fory/pull/2532chore: translate Chinese comments into English by @Asnowww in https://github.com/apache/fory/pull/2503  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fory v0.12.1 Released","url":"/zh-CN/blog/fory_0_12_1_release#new-contributors","content":" @Asnowww made their first contribution in https://github.com/apache/fory/pull/2503@open-snail made their first contribution in https://github.com/apache/fory/pull/2500  Full Changelog: https://github.com/apache/fory/compare/v0.12.0...v0.12.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.1.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_1_release","content":"","keywords":"","version":null},{"title":"Highlights‚Äã","type":1,"pageTitle":"Fury v0.1.1 released","url":"/zh-CN/blog/fury_0_1_1_release#highlights","content":" Java Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-furyAdd class checker API to customize security check behaviour(#890) Python Support pyarrow6 bazel build (#859 #862)Support python 3.10 (#859 #862)  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.1.1 released","url":"/zh-CN/blog/fury_0_1_1_release#whats-changed","content":" [Java] Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-fury[Java] fix isSecure check for xlang in java (#822)[Java] register empty object by default (#829)[Java] upgrade guava for(#831)[Python] Support pyarrow6 bazel build (#859)[Python] add missing shared lib for python (#862)[Java] optimize buffer copy (#870)[Doc] Fix row format doc (#873)[Java] fix ofHashMap (#877)[Java] add jdk tools.jar for tests (#881)[Java] Fix lazy bean serializer (#883)[Java] print exception for fury creation (#885)[Java] remove getCurrentFury API (#887)[Java] Add fury map iterator api (#889)[Java] Add class checker API (#890)[Python] Fix python linux deploy missing shared library files (#892)[[Java] refine AllowListChecker (#893)  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.1.2 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_2_release","content":"","keywords":"","version":null},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.1.2 released","url":"/zh-CN/blog/fury_0_1_2_release#whats-changed","content":" [Java] Skip toString in annotation invocation handler readObject (#746)[Python] Use cloudpickle for local function serialization (#914)[Python] fix row format getter (#915)  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_0_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#highlight","content":" Chunk based map serializationHighly optimized JavaScript string serialization  ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#features","content":" feat(java): ReplaceResolveSerializer deep copy by @zhaommmmomo in https://github.com/apache/fury/pull/1925feat(java): use varint for jdk compatible serializers by @chaokunyang in https://github.com/apache/fury/pull/1960feat(java): configurable buffer size limit by @theigl in https://github.com/apache/fury/pull/1963feat(java): make 4 bytes utf16 size header optional for utf8 encoding by @chaokunyang in https://github.com/apache/fury/pull/2010feat(ci): support building python on windows by @An-DJ in https://github.com/apache/fury/pull/1885feat(java): Chunk by chunk predictive map serialization protocol by @Hen1ng in https://github.com/apache/fury/pull/1722feat(java): support streaming encode/decode to/from buffer for row format by @chaokunyang in https://github.com/apache/fury/pull/2024feat(java): new implementation and protocol refine for chunk based map serialization by @chaokunyang in https://github.com/apache/fury/pull/2025feat(java): jit support for chunk based map serialization by @chaokunyang in https://github.com/apache/fury/pull/2027feat(java): Add basicMultiConfigFury dataprovider and add basic map unit test use the dataProvider by @Hen1ng in https://github.com/apache/fury/pull/2032feat(java): deserialize one pojo into another type by @orisgarno in https://github.com/apache/fury/pull/2012feat(python): chunk based map serialization for python by @chaokunyang in https://github.com/apache/fury/pull/2038feat(java): zstd meta compressor by @orisgarno in https://github.com/apache/fury/pull/2042feat(python): automatic release pyfury on macos and windows by @chaokunyang in https://github.com/apache/fury/pull/2045feat(javascript): optimize string serializer by @theweipeng in https://github.com/apache/fury/pull/2043feat(python): add macos pyfury ci by @chaokunyang in https://github.com/apache/fury/pull/2041  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#bug-fix","content":" fix(java): Move schema caching to unsafe trait to avoid issues when using non-inferred schema. by @wywen in https://github.com/apache/fury/pull/1944fix(java): ClassLoaderFuryPooled#setFactoryCallback cannot effect old Fury by @MrChang0 in https://github.com/apache/fury/pull/1946fix(java): fix find constructor error in generated serializer class caused by duplicated class classloading for Fury by @chaokunyang in https://github.com/apache/fury/pull/1948fix(c++): fix bazel install by @chaokunyang in https://github.com/apache/fury/pull/1979fix(java): Fix flakiness in ExpressionVisitorTest#testTraverseExpression by @AmitPr in https://github.com/apache/fury/pull/1968fix(java): Fix the issue caused by not using readCompressedBytesString during deserialization when string compression is enabled. by @Aliothmoon in https://github.com/apache/fury/pull/1991fix(java): Compatible mode on de/serialize api failed to deserialize by @orisgarno in https://github.com/apache/fury/pull/1996fix(java): chunk map serialize an error by @Hen1ng in https://github.com/apache/fury/pull/2030fix(python): Fix missing parameters and old API names by @pandalee99 in https://github.com/apache/fury/pull/2049fix(doc): set compressString default value to false by @chaokunyang in https://github.com/apache/fury/pull/1913fix(java): Remove duplicate maven dependency by @Hen1ng in https://github.com/apache/fury/pull/2044fix(java): fix duplicate entry write at max chunk size bound by @chaokunyang in https://github.com/apache/fury/pull/2040  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#other-improvements","content":" chore(ci): Migrate the ci from macOS 12 to macOS 13 by @penguin-wwy in https://github.com/apache/fury/pull/1927chore(Rust): fix lint problems by @theweipeng in https://github.com/apache/fury/pull/1962docs(java): add object mapping example and tests by @chaokunyang in https://github.com/apache/fury/pull/1974chore(python): drop py3.7 support by @chaokunyang in https://github.com/apache/fury/pull/1981fix(java): only print warn message if scopedMetaShareEnabled is true ‚Ä¶ by @zhfeng in https://github.com/apache/fury/pull/1985docs: update copyright date in NOTICE by @caicancai in https://github.com/apache/fury/pull/2029docs(java): update java serialization schema compatibility doc by @chaokunyang in https://github.com/apache/fury/pull/2047  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#new-contributors","content":" @theigl made their first contribution in https://github.com/apache/fury/pull/1963@AmitPr made their first contribution in https://github.com/apache/fury/pull/1968@zhfeng made their first contribution in https://github.com/apache/fury/pull/1985@Hen1ng made their first contribution in https://github.com/apache/fury/pull/1722  Full Changelog: https://github.com/apache/fury/compare/v0.9.0...v0.10.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_1_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#features","content":" feat(java): support passed tracking ref meta when building serializers by @chaokunyang in https://github.com/apache/fury/pull/2113feat(java): extra entry in disallowed.txt by @pjfanning in https://github.com/apache/fury/pull/2098feat(java): use sha256 to check disallowed.txt tamper by @chaokunyang in https://github.com/apache/fury/pull/2102  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#bug-fix","content":" fix(java): fix read null chunk out of bound by @chaokunyang in https://github.com/apache/fury/pull/2065fix(java): Fix error with MemoryBuffer::readBytesAsInt64 when not in LITTLE_ENDIAN mode by @LouisLou2 in https://github.com/apache/fury/pull/2069fix(java): fix read primitives error on fill buffer bound by @chaokunyang in https://github.com/apache/fury/pull/2064fix(java): java.util.Date and its subclasses are mutable by @moooonk in https://github.com/apache/fury/pull/2076fix(java): fix ImmutableCollections$SubList duplicate registration by @w-yfan in https://github.com/apache/fury/pull/2074fix(java): Modify some mistake by @Hen1ng in https://github.com/apache/fury/pull/2086fix(java): fix serialization npe of collection with all null elems by @chaokunyang in https://github.com/apache/fury/pull/2111fix(java): fix disallowed.txt check in windows by @chaokunyang in https://github.com/apache/fury/pull/2128  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#other-improvements","content":" perf(java): Improve performance by using System.arraycopy to copy between byte arrays by @Cybermaxke in https://github.com/apache/fury/pull/2101perf(java): Refactor ThreadPoolFury to improve performance by @moooonk in https://github.com/apache/fury/pull/2092perf(java): Optimize Computational Efficiency of MetaStringEncoder::encodeGeneric by @LouisLou2 in https://github.com/apache/fury/pull/2072  Full Changelog: https://github.com/apache/fury/compare/v0.10.0...v0.10.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.2 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_2_release","content":"","keywords":"","version":null},{"title":"Fury v0.10.3 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_3_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#features","content":" feat(java): add protobuf serializer for message and byte string by @chaokunyang in https://github.com/apache/fury/pull/2213  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#bug-fix","content":" fix(java): mark fury-test-core as test dep in fury extensions by @chaokunyang in https://github.com/apache/fury/pull/2231fix(java): ensure readVarUint36Small reads full bits regardless of remaining buffer size by @LouisLou2 in https://github.com/apache/fury/pull/2179fix(java): ensure FuryObjectInputStream.read never returns 0 when length&gt;0 by @X-czh in https://github.com/apache/fury/pull/2205fix(java): Fix empty string processing in MetaStringBytes by @LouisLou2 in https://github.com/apache/fury/pull/2212fix(java): fix field super class missing in compatible mode by @chaokunyang in https://github.com/apache/fury/pull/2214fix(python): fix pyfury build using pyproject.toml by @chaokunyang in https://github.com/apache/fury/pull/2206fix: install bazel by @chaokunyangfix: print python tests exception by @chaokunyangfix: install pyarrow by @chaokunyang  ","version":null,"tagName":"h2"},{"title":"Chores‚Äã","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#chores","content":" chore: cherry-pick commits for 0.10.3 by @chaokunyang in https://github.com/apache/fury/pull/2219chore: cherry-pick commits for 0.10.3 by @chaokunyang in https://github.com/apache/fury/pull/2234chore: Bump version to 0.10.3 by @pandalee99 in https://github.com/apache/fury/pull/2235chore: fix Releases 0.10 by @pandalee99 in https://github.com/apache/fury/pull/2236chore(javascript): remove nodejs 12 support by @chaokunyang in https://github.com/apache/fury/pull/2233  Full Changelog: https://github.com/apache/fury/compare/v0.10.2...v0.10.3-rc2 ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.10.2 Released","url":"/zh-CN/blog/fury_0_10_2_release#features","content":" feat(kotlin): add kotlin ci by @pandalee99 in https://github.com/apache/fury/pull/2176  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.10.2 Released","url":"/zh-CN/blog/fury_0_10_2_release#bug-fix","content":" fix(java): fix DisallowedList calculate hash in Windows by @chaokunyang in https://github.com/apache/fury/pull/2142fix(java): fix fury logger log exception by @chaokunyang in https://github.com/apache/fury/pull/2153fix(java): fix nested chunk map serialization error when generics exists by @chaokunyang in https://github.com/apache/fury/pull/2162fix(java): fix nested map chunk serialization codegen by @chaokunyang in https://github.com/apache/fury/pull/2172fix(kotlin): fix kotlin compile error by @chaokunyang in https://github.com/apache/fury/pull/2173  Full Changelog: https://github.com/apache/fury/compare/v0.10.1...v0.10.2 ","version":null,"tagName":"h2"},{"title":"Fury v0.2.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_2_1_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#highlight","content":" [Go] Support tiny go compilation[Java] Support private JDK17+ record class JIT serialization  ","version":null,"tagName":"h2"},{"title":"Bug fix‚Äã","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#bug-fix","content":" Fix jit error for register private serializersUpgrade janino version to fix package name conflict with classname  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#whats-changed","content":" [Doc] Update JDK support doc by @chaokunyang in https://github.com/alipay/fury/pull/992[Go] Make compilation support tinygo by @springrain in https://github.com/alipay/fury/pull/991[Doc] fix config class imports by @chaokunyang in https://github.com/alipay/fury/pull/993[go] fixed typo in readme import path by @voldyman in https://github.com/alipay/fury/pull/995[Java] fix jit error for register private serializers by @chaokunyang in https://github.com/alipay/fury/pull/999[Java] Refine reflection contructor by MethodHandle by @chaokunyang in https://github.com/alipay/fury/pull/1000[Java] Fix private record JIT by @chaokunyang in https://github.com/alipay/fury/pull/1004[Java] Upgrade janino version to fix package name conflict with classname by @chaokunyang in https://github.com/alipay/fury/pull/1006[Java] fix janino deps for fury-benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1007[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1009  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#new-contributors","content":" @springrain made their first contribution in https://github.com/alipay/fury/pull/991@voldyman made their first contribution in https://github.com/alipay/fury/pull/995@caicancai made their first contribution in https://github.com/alipay/fury/pull/1009  Full Changelog: https://github.com/alipay/fury/compare/v0.2.0...v0.2.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.2.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_2_0_release","content":"","keywords":"","version":null},{"title":"Highlights‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#highlights","content":" ","version":null,"tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#java","content":" Support JDK17+ record JIT/Interpreter serializationSupport JDK17+ record JIT/Interpreter serialization backward/forward compatibilitySupport jdk9+ Immutable Collections JIT/Interpreter mode serialization, much faster compared to other frameworksNew collection serialization protocol by homogenization, 1.5x speed up, 2X space saving.Desgined and implemented a new long compression algorithm, with performance cost less than 10% but give 50% compresstion ratioSupport configuring compress int/long independently, enable int/long compression by defaultAdd class checker API and Whitelist/Blacklist based implementation to enhance security  ","version":null,"tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#python","content":" Support pyarrow6 bazel buildSupport python 3.10  ","version":null,"tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#javascript","content":" [JavaScript] support fury for browser[JavaScript] support polymorphism[JavaScript] enhancement performance  ","version":null,"tagName":"h3"},{"title":"Golang‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#golang","content":" Implement Golang serialization framework, which support reference, pointer, data serializationImplement serializers for string/numbers/slice/map/slice/struct/pointer  ","version":null,"tagName":"h3"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#whats-changed","content":" [JavaScript] enhancement performance and bugfix by @wangweipeng2 in https://github.com/alipay/fury/pull/811[JavaScript] support polymorphism by @wangweipeng2 in https://github.com/alipay/fury/pull/814Create SECURITY.md by @chaokunyang in https://github.com/alipay/fury/pull/817[JavaScript] fix bug #703 by @wangweipeng2 in https://github.com/alipay/fury/pull/819[Java] fix isSecure check for xlang in java by @chaokunyang in https://github.com/alipay/fury/pull/822[Doc] add protocol wire format wip by @chaokunyang in https://github.com/alipay/fury/pull/823[JavaScript] write tag hash by @wangweipeng2 in https://github.com/alipay/fury/pull/825[JavaScript] support browser by @wangweipeng2 in https://github.com/alipay/fury/pull/830[Java] register empty object by default by @chaokunyang in https://github.com/alipay/fury/pull/829[Java] upgrade guava for CVE-2023-2976 by @chaokunyang in https://github.com/alipay/fury/pull/831[JavaScript] detect platform wrong by @wangweipeng2 in https://github.com/alipay/fury/pull/832[JavaScript] add test by @wangweipeng2 in https://github.com/alipay/fury/pull/836[Java] Add compatible ci for JDK8/11/13/15/17 by @chaokunyang in https://github.com/alipay/fury/pull/835[Java] use java.lang.ClassValue to cache Lookup by @chaokunyang in https://github.com/alipay/fury/pull/844[Java] Refactor integration tests by @chaokunyang in https://github.com/alipay/fury/pull/845[Java] suppress maven download logs by --no-transfer-progress by @chaokunyang in https://github.com/alipay/fury/pull/846[Java] add missing jdk primitive function by @chaokunyang in https://github.com/alipay/fury/pull/848[Java] make getter lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/849[Java] add record utils by @chaokunyang in https://github.com/alipay/fury/pull/850[Java] Support access record field value by @chaokunyang in https://github.com/alipay/fury/pull/851[Java] interpreter mode support for record serialization by @chaokunyang in https://github.com/alipay/fury/pull/852[CI] Fix checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/853[Java] Support jdk record forward/backward interpreter serialization by @chaokunyang in https://github.com/alipay/fury/pull/854[Java] Support jdk record metashare mode by @chaokunyang in https://github.com/alipay/fury/pull/855[Java] move record utils to record pkg by @chaokunyang in https://github.com/alipay/fury/pull/856[Java] move inner functions outside by @chaokunyang in https://github.com/alipay/fury/pull/857[Python] Support pyarrow6 bazel build by @chaokunyang in https://github.com/alipay/fury/pull/859[Python] add missing shared lib for python by @chaokunyang in https://github.com/alipay/fury/pull/862[Python] fix python deploy by @chaokunyang in https://github.com/alipay/fury/pull/863[Java] Jdk record compatible jit by @chaokunyang in https://github.com/alipay/fury/pull/864[Java] JIT serialization for JDK record by @chaokunyang in https://github.com/alipay/fury/pull/866[Java] support private record jit by @chaokunyang in https://github.com/alipay/fury/pull/869[Java] optimize buffer copy by @chaokunyang in https://github.com/alipay/fury/pull/870[Doc] Fix row format doc by @chaokunyang in https://github.com/alipay/fury/pull/873[Java] Support compress int long independently by @chaokunyang in https://github.com/alipay/fury/pull/875[Java] fix ofHashMap by @chaokunyang in https://github.com/alipay/fury/pull/877[Java] add jdk tools.jar for tests by @chaokunyang in https://github.com/alipay/fury/pull/881[Java] register common exception by @chaokunyang in https://github.com/alipay/fury/pull/879[Java] Fix lazy bean serializer by @chaokunyang in https://github.com/alipay/fury/pull/883[Java] print exception for fury creation by @chaokunyang in https://github.com/alipay/fury/pull/885[Java] remove getCurrentFury API by @chaokunyang in https://github.com/alipay/fury/pull/887[Java] Add fury map iterator api by @chaokunyang in https://github.com/alipay/fury/pull/889[Java] Add class checker API by @chaokunyang in https://github.com/alipay/fury/pull/890[Python] Fix python linux deploy missing shared library files by @chaokunyang in https://github.com/alipay/fury/pull/892[Java] refine AllowListChecker by @chaokunyang in https://github.com/alipay/fury/pull/893Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/894[Java] support immutable collection/map jit and generics optimization by @chaokunyang in https://github.com/alipay/fury/pull/895[Java] cache generated guava constructor by @chaokunyang in https://github.com/alipay/fury/pull/897[Java] Optimize jdk9+ immutable collection serialization by @chaokunyang in https://github.com/alipay/fury/pull/900[Java] add jdk20 tests by @chaokunyang in https://github.com/alipay/fury/pull/901[Java] optimize duplicate fields utils by @chaokunyang in https://github.com/alipay/fury/pull/905[Java] fix jit error for package-level field with private type by @chaokunyang in https://github.com/alipay/fury/pull/907[Java] update blacklist by @chaokunyang in https://github.com/alipay/fury/pull/913[Python] Use cloudpickle for local function serialization by @chaokunyang in https://github.com/alipay/fury/pull/914[Python] fix row format getter by @chaokunyang in https://github.com/alipay/fury/pull/915[Java] disable class check by default by @chaokunyang in https://github.com/alipay/fury/pull/917[Java] refine java docs by @chaokunyang in https://github.com/alipay/fury/pull/918Update blacklist.txt by @chaokunyang in https://github.com/alipay/fury/pull/920[Java] Skip toString in annotation invocation handler readObject by @chaokunyang in https://github.com/alipay/fury/pull/922Optimize StringBuilder/StringBuffer serialization by @pandalee99 in https://github.com/alipay/fury/pull/908Bump release versin to 0.1.2 by @chaokunyang in https://github.com/alipay/fury/pull/924[Doc] add basic type java format doc by @chaokunyang in https://github.com/alipay/fury/pull/928[Java] speed test codegen speed by avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/929[Java] Optimize collection serialization protocol by homogenization by @chaokunyang in https://github.com/alipay/fury/pull/923Bump org.apache.avro:avro from 1.11.1 to 1.11.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/931[Java] Rename classinfocache to classinfoholder by @chaokunyang in https://github.com/alipay/fury/pull/933[Java] put together all primitive serializers by @chaokunyang in https://github.com/alipay/fury/pull/934[Java] Fix jvm crash caused by varint out-of-bound writing by @chaokunyang in https://github.com/alipay/fury/pull/937[Java] enable int compression by default by @chaokunyang in https://github.com/alipay/fury/pull/935[Java] put together all fury related config classes into config package by @chaokunyang in https://github.com/alipay/fury/pull/940[Java] Add SLI(small long as int) long encoding algorithm by @chaokunyang in https://github.com/alipay/fury/pull/942[Java] use raw type serializer for getSerialzier in jit by @chaokunyang in https://github.com/alipay/fury/pull/943[Java] use varint for class id encoding to reduce space cost by @chaokunyang in https://github.com/alipay/fury/pull/945[Java] Fix Collection/Map jit/interpreter protocol inconsisitency for generics instantiated subclass by @chaokunyang in https://github.com/alipay/fury/pull/947[Go] add fury go util and ci tests by @chaokunyang in https://github.com/alipay/fury/pull/950[Go] add fury go buffer implementation by @chaokunyang in https://github.com/alipay/fury/pull/952[Go] add fury go serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/954[Go] add serializers for common go types by @chaokunyang in https://github.com/alipay/fury/pull/956[Java] fix varint writeindex grow for jit by @chaokunyang in https://github.com/alipay/fury/pull/957[Go] add fury go map serializer by @chaokunyang in https://github.com/alipay/fury/pull/959[Go] add slice serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/961[Go] add set serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/963[Go] Add struct serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/965[Go] add ref tracking tests by @chaokunyang in https://github.com/alipay/fury/pull/967[Go] add fury type dispatch tests by @chaokunyang in https://github.com/alipay/fury/pull/969[Go] add fury serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/971[Go] Add fury xlang tests by @chaokunyang in https://github.com/alipay/fury/pull/973[Go] rename Reference to Ref by @chaokunyang in https://github.com/alipay/fury/pull/975[Java] add jdk 21 tests by @chaokunyang in https://github.com/alipay/fury/pull/977[Java] add jdk 21 tests ci by @chaokunyang in https://github.com/alipay/fury/pull/978[Java] Optimize sli long read/write by @chaokunyang in https://github.com/alipay/fury/pull/981[Doc] upgrade docs by @chaokunyang in https://github.com/alipay/fury/pull/985 https://github.com/alipay/fury/pull/986 https://github.com/alipay/fury/pull/987[Java] add serializeJavaObject API to ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/988[Java] fix jdk17/21 ci latest_jdk_tests skip by @chaokunyang in https://github.com/alipay/fury/pull/989  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#new-contributors","content":" @pandalee99 made their first contribution in https://github.com/alipay/fury/pull/908@ilxqx made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/1@T-baby made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/13  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.2.0 ","version":null,"tagName":"h2"},{"title":"Fury 0.4.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_4_0_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury 0.4.0 Released","url":"/zh-CN/blog/fury_0_4_0_release#highlight","content":" [Java] Support Graalvm native image. The implementation will generate all serialization code at image build time, the runtime will be extremely fast, see fury graalvm usage doc[Java] Fury vs JDK benchmark on Graalvm native image[Scala] Serialization support for package scoped object[C++] Reflection support by macro/template programing[C++] Automatic row format encoder  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury 0.4.0 Released","url":"/zh-CN/blog/fury_0_4_0_release#whats-changed","content":" [Python] fix python release by @chaokunyang in https://github.com/alipay/fury/pull/1125[Java] make unsafe offset compatible with graalvm by @chaokunyang in https://github.com/alipay/fury/pull/1117[Scala] Fix scala package object JIT error by @chaokunyang in https://github.com/alipay/fury/pull/1130[Java] Refine maven pom config by @chaokunyang in https://github.com/alipay/fury/pull/1126[Rust] add rust building by @caicancai in https://github.com/alipay/fury/pull/1129[C++] Remove useless overload of Writer::WriteString by @PragmaTwice in https://github.com/alipay/fury/pull/1136[Rust] fix typo by @caicancai in https://github.com/alipay/fury/pull/1133[Rust] add mesaage about rust ci by @caicancai in https://github.com/alipay/fury/pull/1131[C++] Add move ctor/assign op to Status by @PragmaTwice in https://github.com/alipay/fury/pull/1134[Rust] fix cargo test error by @wangweipeng2 in https://github.com/alipay/fury/pull/1135[Rust] improve rust ci by @caicancai in https://github.com/alipay/fury/pull/1138[Scala] Fix scala collection serialization nested in pojo by @chaokunyang in https://github.com/alipay/fury/pull/1140[Java] make sting builder serializer codegen eager by @chaokunyang in https://github.com/alipay/fury/pull/1141[Rust] fix rust ci bug by @caicancai in https://github.com/alipay/fury/pull/1139[Java] support add static fields in fury codegen by @chaokunyang in https://github.com/alipay/fury/pull/1147[C++] Add the basic row format serializer for C++ class types via reflection by @PragmaTwice in https://github.com/alipay/fury/pull/1144[C++] Add duplicated fields detection in FURY_FIELD_INFO macro by @PragmaTwice in https://github.com/alipay/fury/pull/1151[Java] support create serializer when register class by @chaokunyang in https://github.com/alipay/fury/pull/1154[Java] Support graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1143[C++] Support string type in RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1158[Scala] add graalvm support for scala singleton by @chaokunyang in https://github.com/alipay/fury/pull/1159[Scala] Fix scala singleton map/collection serialization in struct by @chaokunyang in https://github.com/alipay/fury/pull/1160[Java] add read resolve circular test suite by @chaokunyang in https://github.com/alipay/fury/pull/1161[Java] Remove load arrow serializers by default by @chaokunyang in https://github.com/alipay/fury/pull/1163[Java] Support thread safe fury for graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1164[Scala] Fix package object serialization in scala App by @chaokunyang in https://github.com/alipay/fury/pull/1166[Java] add graalvm usage doc by @chaokunyang in https://github.com/alipay/fury/pull/1168[C++] Split util.h to bit_util.h and time_util.h by @PragmaTwice in https://github.com/alipay/fury/pull/1171[C++] Support cv-qualified types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1172[C++] Add support for nested class types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1173[Java] Add graalvm benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1178[Java] Fix string key serializer ref tracking by @chaokunyang in https://github.com/alipay/fury/pull/1174[Java] Add graalvm benchmark test results by @chaokunyang in https://github.com/alipay/fury/pull/1180[Scala] fix package object inaccessible from source code by @chaokunyang in https://github.com/alipay/fury/pull/1181  Full Changelog: https://github.com/alipay/fury/compare/v0.3.1...v0.4.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.3.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_3_1_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#highlight","content":" Support python 3.11 and 3.12, drop python 3.6 supportRefactor collection serialization framework to support writeReplace JITIntegrate scala collection with fury java collection frameworkSupport scala collection jit serializationSupport shim dispatcher to resolve compatibility problems for common used classesUse lastest arrow 14 version for row format in Java and Python  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#whats-changed","content":" [Doc] add scala sbt install doc by @chaokunyang in https://github.com/alipay/fury/pull/1066[Doc] Update scala_guide.md by @chaokunyang in https://github.com/alipay/fury/pull/1067[Doc] Add scala 2/3 support doc by @chaokunyang in https://github.com/alipay/fury/pull/1068[Java] Refactor collection serialization framework to support writeReplace JIT by @chaokunyang in https://github.com/alipay/fury/pull/1062[Java] Refine collection package by @chaokunyang in https://github.com/alipay/fury/pull/1070[Java] merge map/collection into collection package by @chaokunyang in https://github.com/alipay/fury/pull/1072[Scala] integrate scala collection with fury java collection framework by @chaokunyang in https://github.com/alipay/fury/pull/1073remove unused part of build.sbt by @pjfanning in https://github.com/alipay/fury/pull/1074[Scala] get build to work with Scala 3 by @pjfanning in https://github.com/alipay/fury/pull/1075[Scala] support scala collection jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/1077[Doc] add apache license section to readme by @caicancai in https://github.com/alipay/fury/pull/1080[Java] add option to disable class check warnings by @chaokunyang in https://github.com/alipay/fury/pull/1084[Java] Fix collection serialization NPE when all elements are null by @chaokunyang in https://github.com/alipay/fury/pull/1086[Java] FuryPooledObjectFactory getFury refactor, remove redundant recursive call by @mof-dev-3 in https://github.com/alipay/fury/pull/1088[Rust] add rust-version by @wangweipeng2 in https://github.com/alipay/fury/pull/1091[DOC] add javascript sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1095Make sure the c++ standard is set to 17 by @PragmaTwice in https://github.com/alipay/fury/pull/1093Fix undefined behavior due to use of uninitialized field in Buffer by @PragmaTwice in https://github.com/alipay/fury/pull/1092[Rust] merge derive and make it sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1098[DOC] add rust sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1100Simplify endian utility functions and IsOneOf by @PragmaTwice in https://github.com/alipay/fury/pull/1096[Java] throw error if nested fury serialize happen in serialization by @chaokunyang in https://github.com/alipay/fury/pull/1103[C++] remove useless FromXXXEndian by @chaokunyang in https://github.com/alipay/fury/pull/1105[Rust ] Remove the magic numbers by @wangweipeng2 in https://github.com/alipay/fury/pull/1107[Rust] chore: add rust doc by @wangweipeng2 in https://github.com/alipay/fury/pull/1109[JavaScript] Fill in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/1110chore: check xlang flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1112[Java] Remove guava part1 by @chaokunyang in https://github.com/alipay/fury/pull/1114[Rust] Correct language flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1120[Java] DateTimeUtils minor refactor, reuse floorDiv to calculate floorMod by @mof-dev-3 in https://github.com/alipay/fury/pull/1122[Python] Support python3.11/12 by @chaokunyang in https://github.com/alipay/fury/pull/1064[java] support shim dispatcher to resolve compatibility problems for common used classes by @xiguashu in https://github.com/alipay/fury/pull/1123  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#new-contributors","content":" @pjfanning made their first contribution in https://github.com/alipay/fury/pull/1074@mof-dev-3 made their first contribution in https://github.com/alipay/fury/pull/1088@PragmaTwice made their first contribution in https://github.com/alipay/fury/pull/1093@xiguashu made their first contribution in https://github.com/alipay/fury/pull/1123  Full Changelog: https://github.com/alipay/fury/compare/v0.3.0...v0.3.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.3.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_3_0_release","content":"","keywords":"","version":null},{"title":"Scala Serialization Guide‚Äã","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#scala-serialization-guide","content":" Install dependecy:  libraryDependencies += &quot;org.furyio&quot; % &quot;fury-core&quot; % &quot;0.3.0&quot;   Creating fury:  val fury = Fury.builder() .withScalaOptimizationEnabled(true) .requireClassRegistration(false) .withRefTracking(true) .build()   Serialize case objects:  case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fury.deserialize(fury.serialize(p))) println(fury.deserializeJavaObject(fury.serializeJavaObject(p)))   Serialize singleton objects:  object singleton { } val o1 = fury.deserialize(fury.serialize(singleton)) val o2 = fury.deserialize(fury.serialize(singleton)) println(o1 == o2)   Serialize collection objects:  val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fury.deserialize(fury.serialize(seq))) println(fury.deserialize(fury.serialize(list))) println(fury.deserialize(fury.serialize(map)))   Serialize enum:  enum Color { case Red, Green, Blue } println(fury.deserialize(fury.serialize(Color.Green)))   ","version":null,"tagName":"h2"},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#highlight","content":" [Scala] Support scala serialization: case/object/tuple/string/collection/enum/basic all supported[Scala] Add scala user documentation[Scala] add optimized scala singleton object serializer[Java] Make java.io.Externalizable compatible with Java writeReplace/readResolve API[Java] Integrate fury with dubbo https://github.com/apache/dubbo-spi-extensions/pull/226[Java] support bytes string serialization for jdk8 with JDK17 runtime  ","version":null,"tagName":"h2"},{"title":"BugFix‚Äã","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#bugfix","content":" [Java] Allow for InputStream not reading entire length[Java] Use ReflectionUtils.getCtrHandle() for non-public constructor in ExternalizableSerializer[Java] fix jdk compatible serialization for inheritance  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#whats-changed","content":" [Impove]-[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1011[Java] rename wrong ascii naming to latin by @chaokunyang in https://github.com/alipay/fury/pull/1013[Doc] Update go install doc by @chaokunyang in https://github.com/alipay/fury/pull/1015fix(grammatical): correct typos and improve grammar by @iamahens in https://github.com/alipay/fury/pull/1018[Improve]-[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1020[Improve]-[Doc] add environment requirement by @caicancai in https://github.com/alipay/fury/pull/1022chore(docs): fixed typos by @Smoothieewastaken in https://github.com/alipay/fury/pull/1023bugfix: read buffer error when object contain binary field by @wangweipeng2 in https://github.com/alipay/fury/pull/1026[Doc] Optimize class registration doc by @chaokunyang in https://github.com/alipay/fury/pull/1027[Java] fix jdk compatible serialization for inheritance by @chaokunyang in https://github.com/alipay/fury/pull/1030[Doc] add scala user doc by @chaokunyang in https://github.com/alipay/fury/pull/1028[Doc] refine scala doc by @chaokunyang in https://github.com/alipay/fury/pull/1031Update README.md - fix grammatrical errors in README. by @ayushrakesh in https://github.com/alipay/fury/pull/1037[Java] Support local static class jit by @chaokunyang in https://github.com/alipay/fury/pull/1036[Java] support bytes string serialization for jdk8 by @chaokunyang in https://github.com/alipay/fury/pull/1039[Java] set timeout to JITContextTest by @chaokunyang in https://github.com/alipay/fury/pull/1040[Java] fix string builder serialization for jdk8 with jdk17 runtime by @chaokunyang in https://github.com/alipay/fury/pull/1042[Doc] add auto code reviewers by @chaokunyang in https://github.com/alipay/fury/pull/1043[Java] Allow for InputStream not reading entire length by @knutwannheden in https://github.com/alipay/fury/pull/1034[Java] Use ReflectionUtils.getCtrHandle() in ExternalizableSerializer by @knutwannheden in https://github.com/alipay/fury/pull/1044[Improve] make maven-spotless-plugin version as a parameter by @caicancai in https://github.com/alipay/fury/pull/1046Update README.md by @Shivam250702 in https://github.com/alipay/fury/pull/1047[Java] support writeReplace/readResolve for Externalizable by @chaokunyang in https://github.com/alipay/fury/pull/1048Update README.md by @Spyrosigma in https://github.com/alipay/fury/pull/1051Grammatical error in CODE_OF_CONDUCT.md by @HimanshuMahto in https://github.com/alipay/fury/pull/1050Update scala link title README.md by @chaokunyang in https://github.com/alipay/fury/pull/1052[Doc] add scala readme and refine document by @chaokunyang in https://github.com/alipay/fury/pull/1041[Java] populate StackOverflowError with enable ref tracking message by @chaokunyang in https://github.com/alipay/fury/pull/1049[Scala] Setup scala project by @chaokunyang in https://github.com/alipay/fury/pull/1054[Scala] add scala singleton object serializer by @chaokunyang in https://github.com/alipay/fury/pull/1053Updated README.md by @vidhijain27 in https://github.com/alipay/fury/pull/1056[Scala] add scala tuple serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/1059Empty ListExpression#genCode will throw npe by @farmerworking in https://github.com/alipay/fury/pull/1063  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#new-contributors","content":" @iamahens made their first contribution in https://github.com/alipay/fury/pull/1018@Smoothieewastaken made their first contribution in https://github.com/alipay/fury/pull/1023@ayushrakesh made their first contribution in https://github.com/alipay/fury/pull/1037@knutwannheden made their first contribution in https://github.com/alipay/fury/pull/1034@Shivam250702 made their first contribution in https://github.com/alipay/fury/pull/1047@Spyrosigma made their first contribution in https://github.com/alipay/fury/pull/1051@HimanshuMahto made their first contribution in https://github.com/alipay/fury/pull/1050@vidhijain27 made their first contribution in https://github.com/alipay/fury/pull/1056@farmerworking made their first contribution in https://github.com/alipay/fury/pull/1063  Full Changelog: https://github.com/alipay/fury/compare/v0.2.1...v0.3.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.1.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_0_release","content":"","keywords":"","version":null},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.1.0 released","url":"/zh-CN/blog/fury_0_1_0_release#new-contributors","content":" @wangweipeng2 made their first contribution in https://github.com/alipay/fury/pull/215@rainsonGain made their first contribution in https://github.com/alipay/fury/pull/429@leeco-cloud made their first contribution in https://github.com/alipay/fury/pull/436@dependabot made their first contribution in https://github.com/alipay/fury/pull/590@tisonkun made their first contribution in https://github.com/alipay/fury/pull/762@hieu-ht made their first contribution in https://github.com/alipay/fury/pull/786@s31k31 made their first contribution in https://github.com/alipay/fury/pull/782  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury v0.1.0 released","url":"/zh-CN/blog/fury_0_1_0_release#whats-changed","content":" Create pull_request_template.md by @chaokunyang in https://github.com/alipay/fury/pull/2add apache licence file by @chaokunyang in https://github.com/alipay/fury/pull/3[Java] add java code structure by @chaokunyang in https://github.com/alipay/fury/pull/4[Java] add java code formatter by @chaokunyang in https://github.com/alipay/fury/pull/5[Java] Add licence to file header by @chaokunyang in https://github.com/alipay/fury/pull/6[Docs] add fury debug doc by @chaokunyang in https://github.com/alipay/fury/pull/8[Docs] refine readme by fix syntax error by @chaokunyang in https://github.com/alipay/fury/pull/10[Community] add getting involved document by @chaokunyang in https://github.com/alipay/fury/pull/12[Java] add java ci by @chaokunyang in https://github.com/alipay/fury/pull/14[Java] fix license format conflict with checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/16[Java] Add unsafe memory util by @chaokunyang in https://github.com/alipay/fury/pull/18[Java] add tuple2/tuple3 utils by @chaokunyang in https://github.com/alipay/fury/pull/20[Java] add LoggerFactory for disable logging more easily by @chaokunyang in https://github.com/alipay/fury/pull/22[Java] add string utils by @chaokunyang in https://github.com/alipay/fury/pull/24[Java] add memory read/write utils by @chaokunyang in https://github.com/alipay/fury/pull/26[Community] update slack invite link by @chaokunyang in https://github.com/alipay/fury/pull/27[Java] add cross-language type id by @chaokunyang in https://github.com/alipay/fury/pull/35[Java] Add api annotation to mark api stability by @chaokunyang in https://github.com/alipay/fury/pull/37[Java] add int array to avoid box cost by @chaokunyang in https://github.com/alipay/fury/pull/39[Java] add auto-growing object array by @chaokunyang in https://github.com/alipay/fury/pull/41[Java] Add optimized map for faster lookup by @chaokunyang in https://github.com/alipay/fury/pull/43[Java] add basic type inference support by @chaokunyang in https://github.com/alipay/fury/pull/45[Java] Add long map support by @chaokunyang in https://github.com/alipay/fury/pull/47[Java] add fury exceptions by @chaokunyang in https://github.com/alipay/fury/pull/48[Java] add MurmurHash3 support by @chaokunyang in https://github.com/alipay/fury/pull/50[Java] add Reflection support by @chaokunyang in https://github.com/alipay/fury/pull/52add FieldAccessor and fields compare by @chaokunyang in https://github.com/alipay/fury/pull/54[Java] implement basic compiler backend based on janino by @chaokunyang in https://github.com/alipay/fury/pull/56[Java] Add extensible classloaders by @chaokunyang in https://github.com/alipay/fury/pull/58[Java] Support multi key weak map by @chaokunyang in https://github.com/alipay/fury/pull/60[Java] codegen framework for fury java jit by @chaokunyang in https://github.com/alipay/fury/pull/61[Java] add utility for lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/63[Java] add common expression ir for programing construct by @chaokunyang in https://github.com/alipay/fury/pull/64[Java] fix if expression with return child node by @chaokunyang in https://github.com/alipay/fury/pull/66[Java] add expression tree traverser and updater by @chaokunyang in https://github.com/alipay/fury/pull/68[Java] add missing author java odc by @chaokunyang in https://github.com/alipay/fury/pull/69[Java] add enum string resolver support by @chaokunyang in https://github.com/alipay/fury/pull/72[Java] add reference tracking support by @chaokunyang in https://github.com/alipay/fury/pull/74[Java] add java serializer interface by @chaokunyang in https://github.com/alipay/fury/pull/76[Java] add test utils by @chaokunyang in https://github.com/alipay/fury/pull/77[Java] add generics hierarchy resolving support by @chaokunyang in https://github.com/alipay/fury/pull/79[Java] add serialization context to relate serializing different objects by @chaokunyang in https://github.com/alipay/fury/pull/82[Java] add class info util by @chaokunyang in https://github.com/alipay/fury/pull/83[Java] add buffer callback by @chaokunyang in https://github.com/alipay/fury/pull/87[Java] implement basic java serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/88[Java] Add string serializer by @chaokunyang in https://github.com/alipay/fury/pull/90[Java] add string builder/buffer serializers by @chaokunyang in https://github.com/alipay/fury/pull/93[Java] add missing uint serializers tests by @chaokunyang in https://github.com/alipay/fury/pull/95[Java] Implement enum serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/97[Java] Implement bigint/decimal serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/101[Community] add zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/103[Community] fix zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/104[Community] update slack desc by @chaokunyang in https://github.com/alipay/fury/pull/105[Java] Add object array serializer by @chaokunyang in https://github.com/alipay/fury/pull/107[Java] Implement primitive array serializers by @chaokunyang in https://github.com/alipay/fury/pull/109[Java] support serializing byte buffer by @chaokunyang in https://github.com/alipay/fury/pull/113[Java] support serializing java.util.concurrent.atomics by @chaokunyang in https://github.com/alipay/fury/pull/115[Java] move string array serializers by @chaokunyang in https://github.com/alipay/fury/pull/116[Java] support Currency serialization by @chaokunyang in https://github.com/alipay/fury/pull/118[Java] support charset serialization by @chaokunyang in https://github.com/alipay/fury/pull/120[Java] support URI serialization by @chaokunyang in https://github.com/alipay/fury/pull/122[Java] add support for regex serialization by @chaokunyang in https://github.com/alipay/fury/pull/124[Java] support uuid serialization by @chaokunyang in https://github.com/alipay/fury/pull/126[Java] add class serialization test by @chaokunyang in https://github.com/alipay/fury/pull/127[Java] add Locale Serializer support by @chaokunyang in https://github.com/alipay/fury/pull/129[Java] fix LocaleSerializer cache thread safety by @chaokunyang in https://github.com/alipay/fury/pull/132[Java] serialization support for java.util.OptionalXXX by @chaokunyang in https://github.com/alipay/fury/pull/134[Java] Add time serializers by @chaokunyang in https://github.com/alipay/fury/pull/137[Java] add ObjectInput/Output based on fury by @chaokunyang in https://github.com/alipay/fury/pull/139[Java] add JavaSerializer based on ObjectInputStream/ObjectOutputStream by @chaokunyang in https://github.com/alipay/fury/pull/141[Java] implement jdk proxy serialization by @chaokunyang in https://github.com/alipay/fury/pull/143[Java] implement Externalizable serialization by @chaokunyang in https://github.com/alipay/fury/pull/145[Java] implement Collection serialization by @chaokunyang in https://github.com/alipay/fury/pull/147[Java] add sortedset serializer by @chaokunyang in https://github.com/alipay/fury/pull/149[Java] add empty collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/151[Java] add single collection serializers by @chaokunyang in https://github.com/alipay/fury/pull/153[Java] add ConcurrentSkipListSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/155[Java] add java.util.Vector serializer by @chaokunyang in https://github.com/alipay/fury/pull/157[Java] add java.util.ArrayDeque serializer by @chaokunyang in https://github.com/alipay/fury/pull/159[Java] add java.util.EnumSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/161[Java] implement java.util.BitSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/163[Java] implement java.util.PriorityQueue serialization by @chaokunyang in https://github.com/alipay/fury/pull/165[Java] implement map serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/167[Java] support java.util.SortedMap serialization by @chaokunyang in https://github.com/alipay/fury/pull/169[Java] support empty map serialization by @chaokunyang in https://github.com/alipay/fury/pull/171[Java] implement singleton map serialization by @chaokunyang in https://github.com/alipay/fury/pull/173[Java] support concurrent map serialization by @chaokunyang in https://github.com/alipay/fury/pull/175[Java] implement enum map serialization by @chaokunyang in https://github.com/alipay/fury/pull/177[Java] group and sort descriptors for cache and consistency by @chaokunyang in https://github.com/alipay/fury/pull/179[Java] Implement object serialization by @chaokunyang in https://github.com/alipay/fury/pull/181[Java] fury native lambda serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/183Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/184Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/185Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/186[Java] Optimize Collections.synchronized serialization performance by @chaokunyang in https://github.com/alipay/fury/pull/188[Java] optimize unmodifiable serialization by @chaokunyang in https://github.com/alipay/fury/pull/191[Java] add native readResolve/writeReplace serialization support by @chaokunyang in https://github.com/alipay/fury/pull/193[Java] [1/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/196[Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/199Revert &quot;[Java] Add struct util to create test struct class dynamically&quot; by @chaokunyang in https://github.com/alipay/fury/pull/200[Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/201[Java] [2/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/195[Java] Optimize subclass container serialization by @chaokunyang in https://github.com/alipay/fury/pull/205[Java] remove generated classes automatically by @chaokunyang in https://github.com/alipay/fury/pull/207[Java] implement collection serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/209[Java] implement java map serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/210[Java] optimize jdk compatible collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/212[Java] support compatible map serialization by @chaokunyang in https://github.com/alipay/fury/pull/213[JavaScript] javascript of fury by @wangweipeng2 in https://github.com/alipay/fury/pull/215[JavaScript]Replace Nodejs lib by standard lib by @wangweipeng2 in https://github.com/alipay/fury/pull/217[JavaScript]Add test by @wangweipeng2 in https://github.com/alipay/fury/pull/219[JavaScript] Change package.json entry file by @wangweipeng2 in https://github.com/alipay/fury/pull/221Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/223[Java] implement fury-native jdk compatible object serialization by @chaokunyang in https://github.com/alipay/fury/pull/222[Java] Add class def for meta sharing by @chaokunyang in https://github.com/alipay/fury/pull/226[Java] Support meta shared serialization by @chaokunyang in https://github.com/alipay/fury/pull/225[Java] add missing license to ObjectStreamSerializer by @chaokunyang in https://github.com/alipay/fury/pull/228[Java] move loadClass to ClassUtils by @chaokunyang in https://github.com/alipay/fury/pull/229[javascript] add javascript ci by @chaokunyang in https://github.com/alipay/fury/pull/230Fix CI by @chaokunyang in https://github.com/alipay/fury/pull/232[Java] forbid classes serialization by blacklist by @chaokunyang in https://github.com/alipay/fury/pull/234[Java] generate field accessor on the flight by @chaokunyang in https://github.com/alipay/fury/pull/240[Java] expression optimizer for method split by @chaokunyang in https://github.com/alipay/fury/pull/241[JavaScript]Fix ci by @wangweipeng2 in https://github.com/alipay/fury/pull/242[Java] add codec builder base class by @chaokunyang in https://github.com/alipay/fury/pull/244[Java] add jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/248[Java] add base object serializer builder by @chaokunyang in https://github.com/alipay/fury/pull/249[Java] Implement jit serialization for object by @chaokunyang in https://github.com/alipay/fury/pull/250[Java] Fix meta shared serializer when jit enabled by @chaokunyang in https://github.com/alipay/fury/pull/252Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/253[Java] type forward/backward compatible jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/254[Java] Meta shared object jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/255[Java] jit context for manage compilation by @chaokunyang in https://github.com/alipay/fury/pull/259[Java] fix javaFury thread safety by @chaokunyang in https://github.com/alipay/fury/pull/261[Java] set rootdir for maven multi-module project by @chaokunyang in https://github.com/alipay/fury/pull/263[Java] add guava immutable list serializer by @chaokunyang in https://github.com/alipay/fury/pull/264[Java] add guava immutable map serializer by @chaokunyang in https://github.com/alipay/fury/pull/266[Java] Async compilation for jit serializers by @chaokunyang in https://github.com/alipay/fury/pull/268[Java] add url serializer by @chaokunyang in https://github.com/alipay/fury/pull/269[Java] optimize java serialization by @chaokunyang in https://github.com/alipay/fury/pull/271[Java] bind fury with classloader by @chaokunyang in https://github.com/alipay/fury/pull/274[Java] add forward serializer by @chaokunyang in https://github.com/alipay/fury/pull/276[Java] add thread-safe fury serializer by @chaokunyang in https://github.com/alipay/fury/pull/278[Java] Add guava/sublist todo serializer by @chaokunyang in https://github.com/alipay/fury/pull/282[Java] add zero-copy tests by @chaokunyang in https://github.com/alipay/fury/pull/284[Java] Profiling fury init by @chaokunyang in https://github.com/alipay/fury/pull/286[Java] add complex cyclic tests by @chaokunyang in https://github.com/alipay/fury/pull/288[Java] enable testArrayStructZeroCopy by @chaokunyang in https://github.com/alipay/fury/pull/290[Java] add complex collection struct tests by @chaokunyang in https://github.com/alipay/fury/pull/292[Java] add complex map struct tests by @chaokunyang in https://github.com/alipay/fury/pull/294[Java] misc serializer tests by @chaokunyang in https://github.com/alipay/fury/pull/295[Java] optimize time reference by @chaokunyang in https://github.com/alipay/fury/pull/297[Java] add unsafe accessor test for duplicate fields by @chaokunyang in https://github.com/alipay/fury/pull/299[Java] add serializer factory test by @chaokunyang in https://github.com/alipay/fury/pull/301[Java] add duplicate fields tests by @chaokunyang in https://github.com/alipay/fury/pull/303[Java] add protocol interoperability tests by @chaokunyang in https://github.com/alipay/fury/pull/305[Java] Lazy map support by @chaokunyang in https://github.com/alipay/fury/pull/307[Java] Support deserialize unexisted classes by @chaokunyang in https://github.com/alipay/fury/pull/309[Java] fix OutOfBandTest pkg by @chaokunyang in https://github.com/alipay/fury/pull/310javascript latin1 string performance improvement by @wangweipeng2 in https://github.com/alipay/fury/pull/312[Java] Add row format interface by @chaokunyang in https://github.com/alipay/fury/pull/316[Java] add Default arrow type visitor by @chaokunyang in https://github.com/alipay/fury/pull/318[Java] add decimal util by @chaokunyang in https://github.com/alipay/fury/pull/320[Java] add pyarrow style data types API in java by @chaokunyang in https://github.com/alipay/fury/pull/322[Java] add fury InputStream/OutputStream by @chaokunyang in https://github.com/alipay/fury/pull/324[Java] Infer arrow schema for java bean by @chaokunyang in https://github.com/alipay/fury/pull/326[Java] add bitmap utils by @chaokunyang in https://github.com/alipay/fury/pull/328[Java] binary row format data structure by @chaokunyang in https://github.com/alipay/fury/pull/330[Java] binary row format writer by @chaokunyang in https://github.com/alipay/fury/pull/333[Java] add arrow visitor for value accessor by @chaokunyang in https://github.com/alipay/fury/pull/335[Java] add row format tests by @chaokunyang in https://github.com/alipay/fury/pull/337[Java] add row format encoder interface by @chaokunyang in https://github.com/alipay/fury/pull/339[Java] Base builder for building jit encoder by @chaokunyang in https://github.com/alipay/fury/pull/341[Java] add jit-based row encoder implementation by @chaokunyang in https://github.com/alipay/fury/pull/343[Java] format code by @chaokunyang in https://github.com/alipay/fury/pull/344[Java] add missing license by @chaokunyang in https://github.com/alipay/fury/pull/345[Java] Add fury channel by @chaokunyang in https://github.com/alipay/fury/pull/346[Java] Mock io for count bytes by @chaokunyang in https://github.com/alipay/fury/pull/349[Java] Arrow record batch zero-copy serializers by @chaokunyang in https://github.com/alipay/fury/pull/351[Java] Add missing license by @chaokunyang in https://github.com/alipay/fury/pull/352[Java] optimize decimal encoding performance by @chaokunyang in https://github.com/alipay/fury/pull/354[Java] optimize schema creation perf by @chaokunyang in https://github.com/alipay/fury/pull/356[Java] update row javadoc by @chaokunyang in https://github.com/alipay/fury/pull/357[Java] Support convert row to arrow format by @chaokunyang in https://github.com/alipay/fury/pull/359[Java] add arrow serializers tests by @chaokunyang in https://github.com/alipay/fury/pull/361[Java] fix arrow tests by @chaokunyang in https://github.com/alipay/fury/pull/362[Java] add serialize to buffer tests by @chaokunyang in https://github.com/alipay/fury/pull/364[Java] add basic cross-langauge serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/366[Java] add serializeBeanTest by @chaokunyang in https://github.com/alipay/fury/pull/367[Java] add registerTest by @chaokunyang in https://github.com/alipay/fury/pull/368[Java] add testTreeMap by @chaokunyang in https://github.com/alipay/fury/pull/369[Java] add offheap tests by @chaokunyang in https://github.com/alipay/fury/pull/371[Java] refine classresovler tests by @chaokunyang in https://github.com/alipay/fury/pull/373[Java] add private bean tests by @chaokunyang in https://github.com/alipay/fury/pull/375[Java] add blocking queue test by @chaokunyang in https://github.com/alipay/fury/pull/377[Java] add duplicate fields test by @chaokunyang in https://github.com/alipay/fury/pull/378[Java] add guava tests by @chaokunyang in https://github.com/alipay/fury/pull/381[Java] add test for jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/383[Java] add secure mode test by @chaokunyang in https://github.com/alipay/fury/pull/385[Java] ensure fury doesn't introduce class leak by @chaokunyang in https://github.com/alipay/fury/pull/387[Java] add tests for ignoring fields by @chaokunyang in https://github.com/alipay/fury/pull/389[Java] add thread to blacklist by @chaokunyang in https://github.com/alipay/fury/pull/391[Java] Add complex testsuite by @chaokunyang in https://github.com/alipay/fury/pull/393[Java] add benchmark framework by @chaokunyang in https://github.com/alipay/fury/pull/399[Java] add plotting tool by @chaokunyang in https://github.com/alipay/fury/pull/400[Java] add usertype benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/401[Java] Add string benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/403[Java] add array benchmark by @chaokunyang in https://github.com/alipay/fury/pull/405[Java] add map benchmark by @chaokunyang in https://github.com/alipay/fury/pull/409[Java] add memory benchmark by @chaokunyang in https://github.com/alipay/fury/pull/410[Java] add row format benchmark by @chaokunyang in https://github.com/alipay/fury/pull/411[Java] add zero copy benchmark by @chaokunyang in https://github.com/alipay/fury/pull/413[Java] Add flatbufffer/protobuffer benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/415[Java] update integration_tests readme by @chaokunyang in https://github.com/alipay/fury/pull/416[C++] generate arrow bazel depdencies from pyarrow bundled shared library by @chaokunyang in https://github.com/alipay/fury/pull/418[C++] Add bazel C++ build support by @chaokunyang in https://github.com/alipay/fury/pull/420[C++] add c++ logging util by @chaokunyang in https://github.com/alipay/fury/pull/423[C++] add cpp status util by @chaokunyang in https://github.com/alipay/fury/pull/425[C++] basic util for bytes operations by @chaokunyang in https://github.com/alipay/fury/pull/427Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/430[Java] register class check duplciate id by @chaokunyang in https://github.com/alipay/fury/pull/432[Java] move ExpressionOptimizer into codegen package by @chaokunyang in https://github.com/alipay/fury/pull/433Format/container encoder by @rainsonGain in https://github.com/alipay/fury/pull/429[Java] Thread-safe fury implementation by pooling by @leeco-cloud in https://github.com/alipay/fury/pull/436[C++] Add c++ buffer util by @chaokunyang in https://github.com/alipay/fury/pull/438[CI] fix CI by @chaokunyang in https://github.com/alipay/fury/pull/439[C++] Binary row format for c++ by @chaokunyang in https://github.com/alipay/fury/pull/441[C++] C++ row format to arrow by @chaokunyang in https://github.com/alipay/fury/pull/442[C++] Add c++ ci by @chaokunyang in https://github.com/alipay/fury/pull/444[CI] Add code lint ci job by @chaokunyang in https://github.com/alipay/fury/pull/446[Doc] Add c++ debugging doc by @chaokunyang in https://github.com/alipay/fury/pull/448[Python] [1/n] Fury python binding by @chaokunyang in https://github.com/alipay/fury/pull/450[python] Type infer for python by @chaokunyang in https://github.com/alipay/fury/pull/458[Java] skip checkstyle in java test by @chaokunyang in https://github.com/alipay/fury/pull/459[Python] Fix python ci by @chaokunyang in https://github.com/alipay/fury/pull/461[Python] Python row format by @chaokunyang in https://github.com/alipay/fury/pull/463[Python] Python encoder for row format by @chaokunyang in https://github.com/alipay/fury/pull/466[Python] Row and arrow format converter by @chaokunyang in https://github.com/alipay/fury/pull/467[C++] cpp murmurhash by @chaokunyang in https://github.com/alipay/fury/pull/469[Python] Python murmur hash binding by @chaokunyang in https://github.com/alipay/fury/pull/472[Python] add weak key identity map by @chaokunyang in https://github.com/alipay/fury/pull/474[Python] add reference resolver by @chaokunyang in https://github.com/alipay/fury/pull/476[Python] Implement python serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/478[Python] add common python serializers by @chaokunyang in https://github.com/alipay/fury/pull/480[Python] struct serialization support by @chaokunyang in https://github.com/alipay/fury/pull/482[Java] Fix get super type exception by @chaokunyang in https://github.com/alipay/fury/pull/484[Java] fix map final value type serializer in jit compatible mode by @chaokunyang in https://github.com/alipay/fury/pull/485[Docs] add fury logo by @chaokunyang in https://github.com/alipay/fury/pull/487[Docs] add square fury logo by @chaokunyang in https://github.com/alipay/fury/pull/488[python] add cpp reference resolver based on abseil map by @chaokunyang in https://github.com/alipay/fury/pull/493[python] add cpp class resolver by @chaokunyang in https://github.com/alipay/fury/pull/494[Python] cython serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/496[Python] cython basic serializers by @chaokunyang in https://github.com/alipay/fury/pull/501[Python] cython container serializers by @chaokunyang in https://github.com/alipay/fury/pull/502[Pyhton] cython array serializers by @chaokunyang in https://github.com/alipay/fury/pull/503[Python] cython struct serializer by @chaokunyang in https://github.com/alipay/fury/pull/505[Python] cython misc serializers by @chaokunyang in https://github.com/alipay/fury/pull/506[Python] Unify cython python serializer by @chaokunyang in https://github.com/alipay/fury/pull/507[Python] Codegen serialization support by @chaokunyang in https://github.com/alipay/fury/pull/509[Python] Support arrow serialization in objgraph by @chaokunyang in https://github.com/alipay/fury/pull/515[Python] Add common pytests by @chaokunyang in https://github.com/alipay/fury/pull/517[C++] pin bazel to 4.2.0 by @chaokunyang in https://github.com/alipay/fury/pull/519[Community] Update contacts about wechat/dingding by @chaokunyang in https://github.com/alipay/fury/pull/521[Java] support struct cross language serialization by @chaokunyang in https://github.com/alipay/fury/pull/523[Java] add java/python cross language row format tests by @chaokunyang in https://github.com/alipay/fury/pull/525feat: fix qrcode size in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/526[Java] replace io.furyx with org.furyio by @chaokunyang in https://github.com/alipay/fury/pull/527[Java] Add missing map license by @chaokunyang in https://github.com/alipay/fury/pull/529[Java] reduce string serializer caller stack by jit by @chaokunyang in https://github.com/alipay/fury/pull/531[Java] fix nested map generics by @chaokunyang in https://github.com/alipay/fury/pull/533[Java] fix jdk11 string jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/535[JavaScript] improve write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/538[Java] refine java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/536[Java] fix fury java kryo/fst benchmark classloading by @chaokunyang in https://github.com/alipay/fury/pull/542[Java] Unsafe method invoke optimization by @chaokunyang in https://github.com/alipay/fury/pull/543[Java] Optimize string serialization mem ops by @chaokunyang in https://github.com/alipay/fury/pull/545[Java] Optimze jit generated code by @chaokunyang in https://github.com/alipay/fury/pull/548[Java] Optimize primitive fields jit read/write by @chaokunyang in https://github.com/alipay/fury/pull/550[Java] Fix benchmark plot by @chaokunyang in https://github.com/alipay/fury/pull/554[Java] Upload benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/555[Docs] Update benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/560[Docs] use a smaller size for benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/561[Docs] update docs by @chaokunyang in https://github.com/alipay/fury/pull/565[Doc] update docs by @chaokunyang in https://github.com/alipay/fury/pull/566[Docs] update readme by @chaokunyang in https://github.com/alipay/fury/pull/567[JavaScript] Import js write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/569[Docs ] fix benchmarks figures align by @chaokunyang in https://github.com/alipay/fury/pull/571[Docs] fix python typehint comment by @chaokunyang in https://github.com/alipay/fury/pull/572[Docs] add row format to arrow conversion java example by @chaokunyang in https://github.com/alipay/fury/pull/573[JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/574[JavaScript] easy type description by @wangweipeng2 in https://github.com/alipay/fury/pull/576[JavaScript] add generic constraints to the serializer by @wangweipeng2 in https://github.com/alipay/fury/pull/577[Docs] Refine benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/578[Docs] fix java header by @chaokunyang in https://github.com/alipay/fury/pull/582[Python] support secure mode for python by @chaokunyang in https://github.com/alipay/fury/pull/584[Docs] update readme speedup by @chaokunyang in https://github.com/alipay/fury/pull/585[Docs] remove Binary Serialization from header by @chaokunyang in https://github.com/alipay/fury/pull/586[Docs] add Serialization to header by @chaokunyang in https://github.com/alipay/fury/pull/587[Docs] fix invalid image links in cpp debug doc by @chaokunyang in https://github.com/alipay/fury/pull/589Bump protobuf-java from 3.11.0 to 3.16.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/590Bump testng from 7.3.0 to 7.5.1 in /java by @dependabot in https://github.com/alipay/fury/pull/591Bump checkstyle from 8.19 to 8.29 in /java by @dependabot in https://github.com/alipay/fury/pull/592Bump guava from 30.0-jre to 32.0.0-jre in /java by @dependabot in https://github.com/alipay/fury/pull/593Bump protobuf-java from 3.15.0 to 3.16.3 in /integration_tests by @dependabot in https://github.com/alipay/fury/pull/594[Java] replace log4j by log4j2 for test modules by @chaokunyang in https://github.com/alipay/fury/pull/595[JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/597[Java] rename reference to ref by @chaokunyang in https://github.com/alipay/fury/pull/599[Java] fix checkstyle failure by @chaokunyang in https://github.com/alipay/fury/pull/602[Java] fix missing reference renaming by @chaokunyang in https://github.com/alipay/fury/pull/603[Java] Rename requireClassRegistration by @chaokunyang in https://github.com/alipay/fury/pull/604[JavaScript]: remove dependency on v8 by @wangweipeng2 in https://github.com/alipay/fury/pull/606[Rust] Add readme for fury rust by @chaokunyang in https://github.com/alipay/fury/pull/607[Java] add missing license for java code by @chaokunyang in https://github.com/alipay/fury/pull/608[Java] update java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/609[Docs] update java benchmarks chart size by @chaokunyang in https://github.com/alipay/fury/pull/610[Docs] use same color for fury best performance by @chaokunyang in https://github.com/alipay/fury/pull/611[Java] add MetaContext tests by @chaokunyang in https://github.com/alipay/fury/pull/613[Java] Add java misc tests by @chaokunyang in https://github.com/alipay/fury/pull/614[Java] Add codegen class loading/gc tests by @chaokunyang in https://github.com/alipay/fury/pull/616[Java] add warn logs when requireClassRegistration disabled by @chaokunyang in https://github.com/alipay/fury/pull/618[Docs] Add java adcanced user guide doc by @chaokunyang in https://github.com/alipay/fury/pull/621[Docs] Update java advanced doc by @chaokunyang in https://github.com/alipay/fury/pull/625[JavaScript] Eliminate polymorphism in JS code by @wangweipeng2 in https://github.com/alipay/fury/pull/627[Python] rename reference to ref for python by @chaokunyang in https://github.com/alipay/fury/pull/629[Java/Python] Rename crosslanguage to x by @chaokunyang in https://github.com/alipay/fury/pull/631[JavaScript] reduce generated code size by @wangweipeng2 in https://github.com/alipay/fury/pull/633[Java] update java snapshot url by @chaokunyang in https://github.com/alipay/fury/pull/635[CI] Enable Fury CI by @chaokunyang in https://github.com/alipay/fury/pull/636[Docs] add benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/639[Doc] use camel naming for benchmark class doc by @chaokunyang in https://github.com/alipay/fury/pull/640[Docs] Update security doc by @chaokunyang in https://github.com/alipay/fury/pull/642[Java] update license for Generics by @chaokunyang in https://github.com/alipay/fury/pull/644[Java] fix generics license length by @chaokunyang in https://github.com/alipay/fury/pull/645[Java] update java security doc by @chaokunyang in https://github.com/alipay/fury/pull/646[Go] update golang readme by @chaokunyang in https://github.com/alipay/fury/pull/648[Doc] replace Fury.Language by Language by @chaokunyang in https://github.com/alipay/fury/pull/650[Java] update java row readme by @chaokunyang in https://github.com/alipay/fury/pull/651[Java] register guava serializers ahead by @chaokunyang in https://github.com/alipay/fury/pull/654[Docs] split user guide doc into 3 parts to sync with website by @chaokunyang in https://github.com/alipay/fury/pull/665[Docs] move guide docs to guide by @chaokunyang in https://github.com/alipay/fury/pull/667[Doc] sync files to home site by @wangweipeng2 in https://github.com/alipay/fury/pull/666[Java] Fix IndexOutOfBoundsException when new fury deserialize from InputStream by @chaokunyang in https://github.com/alipay/fury/pull/671[Doc] support front matter by @wangweipeng2 in https://github.com/alipay/fury/pull/672[Doc] rename inner fury to f when creating ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/676[Java] Support string zerocopy for jdk14+ by @chaokunyang in https://github.com/alipay/fury/pull/677[CI] Add deploy script by @chaokunyang in https://github.com/alipay/fury/pull/688[Java] Support maven release by @chaokunyang in https://github.com/alipay/fury/pull/691[Doc] add java release jar for v0.1.0-alpha.1 by @chaokunyang in https://github.com/alipay/fury/pull/693[Doc] Fix release jar doc by @chaokunyang in https://github.com/alipay/fury/pull/694[Doc] Refine readme for more readability by @chaokunyang in https://github.com/alipay/fury/pull/695[Java] Add detailed lambda error by @chaokunyang in https://github.com/alipay/fury/pull/698[Doc] Fix threadsafe example by @chaokunyang in https://github.com/alipay/fury/pull/699[Docs] fix threadsafe fury in java guide by @chaokunyang in https://github.com/alipay/fury/pull/700[Docs] remove bracket from classLoader by @chaokunyang in https://github.com/alipay/fury/pull/701[Java] add maven source plugin by @chaokunyang in https://github.com/alipay/fury/pull/702[Java] Jdk serialization binary check by @chaokunyang in https://github.com/alipay/fury/pull/714[Java] add jdk migration doc by @chaokunyang in https://github.com/alipay/fury/pull/715[Java] Support jit for non public classes by @chaokunyang in https://github.com/alipay/fury/pull/719[Rust] rust lang initial version by @wangweipeng2 in https://github.com/alipay/fury/pull/718[Java] add type tag registration check by @chaokunyang in https://github.com/alipay/fury/pull/722[Doc] highlight warmup by @chaokunyang in https://github.com/alipay/fury/pull/723[Rust ] calculate the reserved space on compile time by @wangweipeng2 in https://github.com/alipay/fury/pull/725[Java/Python] disable reference tracking by default by @chaokunyang in https://github.com/alipay/fury/pull/727[Java] debug log code stats by @chaokunyang in https://github.com/alipay/fury/pull/728[Java] upgrade java install to 0.1.0-alpha.2 by @chaokunyang in https://github.com/alipay/fury/pull/731[Doc] use fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/733[Doc] remove margin fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/734[Doc] Refine logo and icon by @chaokunyang in https://github.com/alipay/fury/pull/735[ Rust ] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/738[JavaScript] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/739[Java] Remove guava from userdoc by @chaokunyang in https://github.com/alipay/fury/pull/740[Java] rename writeNonRefT to writeNonRef by @chaokunyang in https://github.com/alipay/fury/pull/743[Java] Optimize object array serialization by @chaokunyang in https://github.com/alipay/fury/pull/741[Java] avoid reflection in resolve/replace by @chaokunyang in https://github.com/alipay/fury/pull/744[Java] avoid reflection in writeObject/readOject/readObjectNoData by @chaokunyang in https://github.com/alipay/fury/pull/747[Java] optimize guava list serialization by @chaokunyang in https://github.com/alipay/fury/pull/748[Java] add MakeJDKFunction lambda factory by @chaokunyang in https://github.com/alipay/fury/pull/752[Java] Optimize guava List/Map/Set serialization by @chaokunyang in https://github.com/alipay/fury/pull/750[Doc] Add contributing guide doc by @chaokunyang in https://github.com/alipay/fury/pull/759[Doc] Create CODE_OF_CONDUCT.md by @chaokunyang in https://github.com/alipay/fury/pull/761[Doc] Fix broken link in README by @tisonkun in https://github.com/alipay/fury/pull/762[Rust] Several Rust idioms by @tisonkun in https://github.com/alipay/fury/pull/763[Java] fix write replace class failure by @chaokunyang in https://github.com/alipay/fury/pull/767[Java] replace withSecureMode by requireClassRegistration API by @chaokunyang in https://github.com/alipay/fury/pull/768[Doc] Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/770[Doc] add javadoc for FuryBuilder by @chaokunyang in https://github.com/alipay/fury/pull/775[Doc] add doc for fury creation reuse by @chaokunyang in https://github.com/alipay/fury/pull/777[Java] [Python] auto deploy java/python packages by @chaokunyang in https://github.com/alipay/fury/pull/781[Java] refine FuryBuilder API by @chaokunyang in https://github.com/alipay/fury/pull/784[CI] skip release tests by @chaokunyang in https://github.com/alipay/fury/pull/785Corrected grammar and paraphrasing to make the README easier to read by @hieu-ht in https://github.com/alipay/fury/pull/786Don't let CI run when the changed files are not the code by @hieu-ht in https://github.com/alipay/fury/pull/787[Java] use lambda for SynchronizedSerializers factory by @chaokunyang in https://github.com/alipay/fury/pull/789[Java] use lambda for unmodifiable serializers factory by @chaokunyang in https://github.com/alipay/fury/pull/790[Python] replace alpha/beta to a/b for python by @chaokunyang in https://github.com/alipay/fury/pull/792[Python] fix python bump version by @chaokunyang in https://github.com/alipay/fury/pull/793[CI] Fix bump version by @chaokunyang in https://github.com/alipay/fury/pull/795[CI] Fix py release by @chaokunyang in https://github.com/alipay/fury/pull/796[Doc] update python and java install by @chaokunyang in https://github.com/alipay/fury/pull/797Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/800[Doc] Update java install version to 0.1.0-alpah.5 by @chaokunyang in https://github.com/alipay/fury/pull/801[CI] Fix pypi upload by @chaokunyang in https://github.com/alipay/fury/pull/803[Java] Add core java developer to maven pom by @chaokunyang in https://github.com/alipay/fury/pull/802[Java] add core java developer to maven modules pom by @chaokunyang in https://github.com/alipay/fury/pull/804[Java] support decode utf8 for java string serialization by @chaokunyang in https://github.com/alipay/fury/pull/806Update Java Deserialization Blacklist by @s31k31 in https://github.com/alipay/fury/pull/782chore: apply license format by @tisonkun in https://github.com/alipay/fury/pull/783[Java] use soft reference to avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/809  Full Changelog: https://github.com/alipay/fury/commits/v0.1.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.5.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_5_0_release","content":"","keywords":"","version":null},{"title":"New Features‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#new-features","content":" ","version":null,"tagName":"h2"},{"title":"Specification‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#specification","content":" Introduced fury cross-language serialization specification (#1413, #1508)Introduced xlang type mapping (#1468)Introduced fury java specification (#1240)Introduced meta string encoding specification (#1565, #1513, #1517)  ","version":null,"tagName":"h3"},{"title":"Java‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#java","content":" Support for compatible mode with GraalVM (#1586, #1587).Support unexisted array/enum classes and enabled deserializeUnexistedClass by default (#1569, #1575).meta string encoding algorithm in java (#1514, #1568, #1516, #1565)Support meta string encoding for classname and package name (#1527)native streaming mode deserialization (#1451, #1551)native channel stream reader (#1483)Support registration in thread safe fury (#1280)Implement fury logger and remove slf4j library (#1485, #1494, #1506, #1492)Support adjust logger level dynamically (#1557)Support jdk proxy serialization for graalvm (#1379)Specify JPMS module names (#1343)Align string array to collection protocol v2 (#1228)  ","version":null,"tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#javascript","content":" Align implementation to new Xlang protocol (#1487)Implement Xlang map (#1549)Implemented xlang map code generator (#1571)Added magic number feature for better serialization control (#1550).Support oneof (#1348)create zero-copy buffer when convert (#1386)Implement the collection protocol (#1337)Implement Enum (#1321)compress numbers (#1290)  ","version":null,"tagName":"h3"},{"title":"C++‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#c","content":" Support optional fields/elements in RowEncoder (#1223)Support mapping types for RowEncodeTrait (#1247)  ","version":null,"tagName":"h3"},{"title":"Golang‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#golang","content":" Implemented Fury meta string encoding algorithm (#1566).concat meta string len with flags (#1517)  ","version":null,"tagName":"h3"},{"title":"Enhancements‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#enhancements","content":" ","version":null,"tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#java-1","content":" Improved buffer growth strategy to support larger data sizes for serialization (#1582).Performance optimizations for MetaStringDecoder and various serialization processes (#1568, #1511, #1493).concat write classname flag with package name (#1523)concat meta string len with flags (#1517)fastpath for read/write small varint in range [0,127] (#1503)optimize read float/double for jvm jit inline (#1472)replace Guava's TypeToken with self-made (#1553)Remove basic guava API usage (#1244)optimize fury creation speed (#1511)optimize string serialization by concat coder and length (#1486)carry read objects when deserialization fail for better trouble shooting (#1420)implement define_class insteadof using javaassist (#1422)avoid recompilation when gc happens for memory pressure (#1411, #1585)Fix immutable collection ref tracking (#1403)reduce fury caller stack (#1496)Extract BaseFury interface (#1382)refine collection builder util (#1334)disable async compilation for graalvm (#1222)refine endian check code size in buffer (#1501)generate list fori loop instead of iterator loop for list serialization (#1493)Reduce unsafeWritePositiveVarLong bytecode size. (#1491)Reduce unsafePutPositiveVarInt bytecode size. (#1490, #1489)optimize read char/short jvm jit inline (#1471)reduce code size of read long to optimize jvm jit inline (#1470)reduce readInt/readVarInt code size for for jvm jit inline (#1469)refactor readVarUint32 algorithm (#1462)rewrite readVarUint64 algorithm (#1463)  ","version":null,"tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#javascript-1","content":" Make PlatformBuffer available if has Buffer polyfill (#1373)enhance performance 64bits number (#1320)Refactor &amp; Compress Long (#1313)Improve tag write performance (#1241)Add more methods for BinaryReader (#1231)Implements tuple serializer (#1216)  ","version":null,"tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#python","content":" concat meta string len with flags (#1517)  ","version":null,"tagName":"h3"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#bug-fix","content":" Java‚Äã  Fix bytebuffer no such method error (#1580)Prevent exception in ObjectArray.clearObjectArray() (#1573)Fix slf4j on graalvm (#1432)Fix illegal classname caused by negative hash (#1436)Fix BigDecimal serializer (#1431)Fix BigInteger serialization (#1479)Fix type conflict in method split (#1371)Fix CodeGen Name conflicts when omitting java.lang prefix #1363 (#1366)Fix ClassLoader npe in loadOrGenCodecClass (#1346)Fix big buffer trunc (#1402)Make Blacklist detection is also performed when the Class is registered. (#1398)avoid big object graph cause buffer take up too much memory (#1397)Fix get static field by unsafe (#1380)Fix javax package for accessor codegen (#1388)Fix nested collection cast for scala/java (#1333)Fix References within InvocationHandler (#1365)Allow partial read of serialized size from InputStream (#1391)add potential missing bean class-loader (#1381)Fix polymorphic array serialization (#1324)Fix nested collection num elements (#1306)Fix collection init size typo (#1342)Clear extRegistry.getClassCtx if generate serializer class failed (#1221)  Rust‚Äã  Fix memory errors caused by casting (#1372)Fix incorrect cast (#1345)  ","version":null,"tagName":"h3"},{"title":"Miscellaneous‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#miscellaneous","content":" Numerous code cleanups, refactorings, and internal improvements across all supported languages to enhance code quality and maintainability.Moved various utilities into more appropriate packages to improve code organization and readability (#1584, #1583, #1578).rename MemoryBuffer read/write/put/getType with read/write/put/getTypeNumber (#1480, #1464, #1505, #1500)extract public Fury methods to BaseFury (#1467)Optimize Class ID allocation. (#1406)refine Collection util data structure (#1287) (#1288)Improve Status by using unique_ptr (#1234)Improve FormatTimePoint by removing sstream (#1233)Drop optional chaining expression (#1338)  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#new-contributors","content":" @nandakumar131 made their first contribution in https://github.com/apache/fury/pull/1244@vesense made their first contribution in https://github.com/apache/fury/pull/1260@LiangliangSui made their first contribution in https://github.com/apache/fury/pull/1294@liuxiaocs7 made their first contribution in https://github.com/apache/fury/pull/1312@mtf90 made their first contribution in https://github.com/apache/fury/pull/1343@bowin made their first contribution in https://github.com/apache/fury/pull/1353@cn-at-osmit made their first contribution in https://github.com/apache/fury/pull/1366@Maurice-Betzel made their first contribution in https://github.com/apache/fury/pull/1381@phogh made their first contribution in https://github.com/apache/fury/pull/1391@laglangyue made their first contribution in https://github.com/apache/fury/pull/1415@Munoon made their first contribution in https://github.com/apache/fury/pull/1467@pixeeai made their first contribution in https://github.com/apache/fury/pull/1559@huisman6 made their first contribution in https://github.com/apache/fury/pull/1572@tommyettinger made their first contribution in https://github.com/apache/fury/pull/1573@qingoba made their first contribution in https://github.com/apache/fury/pull/1566  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#acknowledgements","content":" Thanks @chaokunyang @theweipeng @PragmaTwice @LiangliangSui @nandakumar131 @Munoon @qingoba @vesense @liuxiaocs7 @mtf90 @bowin @cn-at-osmit @Maurice-Betzel @phogh @laglangyue @tommyettinger @huisman6 @pixeeai  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated.  Full Changelog: https://github.com/apache/fury/compare/v0.4.1...v0.5.0 ","version":null,"tagName":"h2"},{"title":"Fury 0.4.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_4_1_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#highlight","content":" [Rust] Support row format[C++] Support iterable types for RowEncoder[JavaScript] Support partial record[Java] Fix JIT error in corner case, now Fury can generate serializer for every class  ","version":null,"tagName":"h2"},{"title":"What's Changed‚Äã","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#whats-changed","content":" [Doc] Refine issue template by a yaml form by @chaokunyang in https://github.com/alipay/fury/pull/1185[C++] Fix ownership problem for children writers by visitor by @PragmaTwice in https://github.com/alipay/fury/pull/1193[C++] Remove useless fields and macro in logging by @PragmaTwice in https://github.com/alipay/fury/pull/1195[Doc] add docs for java FuryBuilder #1188 by @mof-dev-3 in https://github.com/alipay/fury/pull/1192[Rust] support row format by @wangweipeng2 in https://github.com/alipay/fury/pull/1196[C++] Add RowEncoder wrapper to RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1200[Rust] Row support more types by @wangweipeng2 in https://github.com/alipay/fury/pull/1202[Rust] Support row map by @wangweipeng2 in https://github.com/alipay/fury/pull/1206[C++] update bazel version from 4.2 to 6.3.2 by @chaokunyang in https://github.com/alipay/fury/pull/1204[JavaScript] Support partial record by @wangweipeng2 in https://github.com/alipay/fury/pull/1208[Java] fix package access level class accessor jit by @chaokunyang in https://github.com/alipay/fury/pull/1210[JavaScript] Fix register a description twice will get undefined serializer by @bytemain in https://github.com/alipay/fury/pull/1211[C++] Support iterable types in RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1212[C++] Support iterable types for RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1215[Python] Refine py register class method by @chaokunyang in https://github.com/alipay/fury/pull/1218[Java] Clear extRegistry.getClassCtx if generate serializer class failed in https://github.com/alipay/fury/pull/1221  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#new-contributors","content":" @bytemain made their first contribution in https://github.com/alipay/fury/pull/1211  Full Changelog: https://github.com/alipay/fury/compare/v0.4.0...v0.4.1 ","version":null,"tagName":"h2"},{"title":"Fury 0.5.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_5_1_release","content":"","keywords":"","version":null},{"title":"Feature‚Äã","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#feature","content":" feat(spec): remove list/map header from type meta spec by @chaokunyang in https://github.com/apache/fury/pull/1590perf(java): Reduce performance regression caused by deleteCharAt by @LiangliangSui in https://github.com/apache/fury/pull/1591feat(java): type meta encoding for java by @chaokunyang in https://github.com/apache/fury/pull/1556 and https://github.com/apache/fury/pull/1601feat(sepc): update type meta field info spec by @chaokunyang in https://github.com/apache/fury/pull/1603feat(javascript): add data to description util by @bytemain in https://github.com/apache/fury/pull/1609feat(java): Support CopyOnWriteArrayListSerializer by @MrChang0 in https://github.com/apache/fury/pull/1613feat(java): add blocked stream utils by @chaokunyang in https://github.com/apache/fury/pull/1617feat(go/java): Add ASCII check before meta string encoding by @jasonmokk in https://github.com/apache/fury/pull/1620feat(java): register old version guava collect by @MrChang0 in https://github.com/apache/fury/pull/1622feat(java): support deserialization ignoreEnumDeserializeError by @157152688 in https://github.com/apache/fury/pull/1623feat(java): add set serializer for concurrent set by @MrChang0 in https://github.com/apache/fury/pull/1616feat(java): add custom serializer register in case of special serializer ctr by @MrChang0 in https://github.com/apache/fury/pull/1625feat(java): remove soft/weak ref values from thread safe fury by @chaokunyang in https://github.com/apache/fury/pull/1639refactor(java): Remove Guava's Collection usages by @Munoon in https://github.com/apache/fury/pull/1611 and https://github.com/apache/fury/pull/1614refactor(java): replace Guava's string utility methods with own implementation by @Munoon in https://github.com/apache/fury/pull/1624  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#bug-fix","content":" fix(java): compatible low version guava by @MrChang0 in https://github.com/apache/fury/pull/1593 and https://github.com/apache/fury/pull/1594fix(java): fix getClassDef thead safety by @chaokunyang in https://github.com/apache/fury/pull/1597fix(java): remove maven groupId change by @chaokunyang in https://github.com/apache/fury/pull/1602fix(java): make slf4j provided by @chaokunyang in https://github.com/apache/fury/pull/1605fix(java): clear serializer for collection/map by @chaokunyang in https://github.com/apache/fury/pull/1606fix(java): fix TypeRef getSubType by @chaokunyang in https://github.com/apache/fury/pull/1608fix(java): fix fastutil Object2ObjectOpenHashMap serialization by @chaokunyang in https://github.com/apache/fury/pull/1618fix(java): subclass without fields will encode superclass by @MrChang0 in https://github.com/apache/fury/pull/1626fix(java): fix wildcard capturer capture NullPointerException by @chaokunyang in https://github.com/apache/fury/pull/1637fix(java): fix abstract collection elems same type serialization by @chaokunyang in https://github.com/apache/fury/pull/1641fix(java): ThreadPoolFury#factoryCallback don't work when create new classLoaderFuryPooled by @MrChang0 in https://github.com/apache/fury/pull/1628fix(go/java): Enhance ASCII check in meta string encoding by @jasonmokk in https://github.com/apache/fury/pull/1631  ","version":null,"tagName":"h2"},{"title":"Misc‚Äã","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#misc","content":" chore(java): move tests to meta/reflect pkg by @chaokunyang in https://github.com/apache/fury/pull/1592chore(java): make enum serializer as an upper level class by @chaokunyang in https://github.com/apache/fury/pull/1598chore: bump dev version to 0.6.0 by @chaokunyang in https://github.com/apache/fury/pull/1599chore: Fury header add language field by @LiangliangSui in https://github.com/apache/fury/pull/1612chore(java): rename deserializeUnexistentEnumValueAsNull to deserializeNonexistentAsNull by @chaokunyang in https://github.com/apache/fury/pull/1634chore(java): remove gpg pinentry-mode by @chaokunyang in https://github.com/apache/fury/pull/1636  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#new-contributors","content":" @MrChang0 made their first contribution in https://github.com/apache/fury/pull/1594@jasonmokk made their first contribution in https://github.com/apache/fury/pull/1620@157152688 made their first contribution in https://github.com/apache/fury/pull/1623  Full Changelog: https://github.com/apache/fury/compare/v0.5.0...v0.5.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.8.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_8_0_release","content":"","keywords":"","version":null},{"title":"Highlights‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#highlights","content":" Support graalvm 17/21/22 native imageRelease fury optimized serializers for scala collectionReduce scala collection classname serialization cost using dict encoding  ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#features","content":" refactor(rust): simplify error handle by @jiacai2050 in https://github.com/apache/fury/pull/1823feat(java): support graalvm 17/21/22 by @chaokunyang in https://github.com/apache/fury/pull/1845perf(java): inline same element invoke in jit by @chaokunyang in https://github.com/apache/fury/pull/1851perf(java): optimize read classdef perf by @chaokunyang in https://github.com/apache/fury/pull/1852feat(scala): optimize scala class serialization by @chaokunyang in https://github.com/apache/fury/pull/1853feat(java): implement sublist serializers by @chaokunyang in https://github.com/apache/fury/pull/1856feat(java): use SubListViewSerializer only when tracking ref by @chaokunyang in https://github.com/apache/fury/pull/1858  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#bug-fix","content":" fix(java): DeserializationException#getMessage call by @yoohaemin in https://github.com/apache/fury/pull/1830fix(java): fix collection view serialization by @chaokunyang in https://github.com/apache/fury/pull/1833fix(java): fix long type name meta string encoding by @chaokunyang in https://github.com/apache/fury/pull/1837fix(java): fix serializer factory getSerializerClass by @chaokunyang in https://github.com/apache/fury/pull/1836fix(rust): replace (value &lt;&lt; 8) | (value &gt;&gt; 8) with value.rotate_right(8) by @chaokunyang in https://github.com/apache/fury/pull/1841fix(java): Fix for maximum size of java arrays by @fink-arthur in https://github.com/apache/fury/pull/1843fix(java): Fix max Java array size for reader by @fink-arthur in https://github.com/apache/fury/pull/1844fix(java): fix jdk proxy serialization when proxy writeReplace method by @chaokunyang in https://github.com/apache/fury/pull/1857  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#other-improvements","content":" chore(java): fix default value doc for metaShareEnabled/scopedMetaShareEnabled by @chaokunyang in https://github.com/apache/fury/pull/1826chore(doc): fix 'how to upgrade fury' link in README by @sh-cho in https://github.com/apache/fury/pull/1846build(deps): bump com.google.protobuf:protobuf-java from 3.16.3 to 3.25.5 in /java/benchmark by @dependabot in https://github.com/apache/fury/pull/1847chore(java): simplify generated codec name by @chaokunyang in https://github.com/apache/fury/pull/1850ci: only run sync job if the repo is apache/fury by @pjfanning in https://github.com/apache/fury/pull/1860feat(scala): upgrade sbt and sbt-apache-sonatype by @pjfanning in https://github.com/apache/fury/pull/1859  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#new-contributors","content":" @yoohaemin made their first contribution in https://github.com/apache/fury/pull/1830@fink-arthur made their first contribution in https://github.com/apache/fury/pull/1843@sh-cho made their first contribution in https://github.com/apache/fury/pull/1846  Full Changelog: https://github.com/apache/fury/compare/v0.7.1...v0.8.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#acknowledgements","content":" Thanks @jiacai2050 @fink-arthur @sh-cho @pjfanning @chaokunyang @yoohaemin  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury v0.7.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_7_1_release","content":"","keywords":"","version":null},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#features","content":" feat(javascript): Added MetaString Class for Unicode Encoding/Decoding in Type.Object Code Generation by @Forchapeatl in https://github.com/apache/fury/pull/1774feat(Rust): Refine Code Structure &amp; Prepare for Future Compatibility Features by @theweipeng in https://github.com/apache/fury/pull/1787feat(java): ThreadSafeFury add getClassResolver method by @funky-eyes in https://github.com/apache/fury/pull/1780feat(Rust): Implement TypeMeta part of the compatibility features by @theweipeng in https://github.com/apache/fury/pull/1789feat(Rust): Support polymorphism by @theweipeng in https://github.com/apache/fury/pull/1795feat(java): Support copy capabilities for some classes without no-argument constructors by @zhaommmmomo in https://github.com/apache/fury/pull/1794feat(java): support jdk9+ java.util.ImmutableCollections copy by @zhaommmmomo in https://github.com/apache/fury/pull/1800feat(rust): support enum serialization by @jiacai2050 in https://github.com/apache/fury/pull/1817refine fury website and add chinese documents by @yuluo-yx and @LofiSu  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#bug-fix","content":" ci: fix rust ci failed by @LiangliangSui in https://github.com/apache/fury/pull/1783fix(java): fix classloader get npe by @chaokunyang in https://github.com/apache/fury/pull/1792fix(scala): fix nested type serialization in scala object type by @chaokunyang in https://github.com/apache/fury/pull/1809fix(java): Fix replace resolver serializaiton by @chaokunyang in https://github.com/apache/fury/pull/1812fix(java): fix reserved keyword conflict by @chaokunyang in https://github.com/apache/fury/pull/1819fix(java): fix nested map field value serialization by private map serializer by @chaokunyang in https://github.com/apache/fury/pull/1820fix(rust): use iter to avoid reallocate by @jiacai2050 in https://github.com/apache/fury/pull/1821  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#other-improvements","content":" chore(java): Disallow writing meta classdef when obj is null by @LiangliangSui in https://github.com/apache/fury/pull/1686chore(infra): optimize github tmpl &amp; update actions/checkout version to 4.1.7 by @yuluo-yx in https://github.com/apache/fury/pull/1807chore(infra): remove redundant bug reporting options by @yuluo-yx in https://github.com/apache/fury/pull/1810docs: add check lint ci &amp; fix md lint by @yuluo-yx in https://github.com/apache/fury/pull/1811  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#new-contributors","content":" @Forchapeatl made their first contribution in https://github.com/apache/fury/pull/1774@funky-eyes made their first contribution in https://github.com/apache/fury/pull/1780@yuluo-yx made their first contribution in https://github.com/apache/fury/pull/1807  Full Changelog: https://github.com/apache/fury/compare/v0.7.0...v0.7.1  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#acknowledgements","content":" Thanks @jiacai2050 @chaokunyang @theweipeng @funky-eyes @Forchapeatl @zhaommmmomo @yuluo-yx @LiangliangSui @LofiSu  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury v0.9.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_9_0_release","content":"","keywords":"","version":null},{"title":"Highlight‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#highlight","content":" Optimized serializers for Fury kotlin supportHighly-optimized UTF-8 string encoding implementation for Java(2x faster than JDK utf8 encoding)Reduce metastring hashcode payload for small string(&lt;=16 bytes)Support building C++ libs on windows platform  ","version":null,"tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#features","content":" feat(kotlin): Introduce kotlin package with stdlib collections and tests by @wywen in https://github.com/apache/fury/pull/1877feat(kotlin): Add Unsigned Primitive Support by @wywen in https://github.com/apache/fury/pull/1886feat(kotlin): Add unsigned array support and tests for arrays and strings by @wywen in https://github.com/apache/fury/pull/1891feat(java): Refactor String serialization and deserialization by @HuangXingBo in https://github.com/apache/fury/pull/1890feat(java): support thread safe register callback for scala kotlin by @chaokunyang in https://github.com/apache/fury/pull/1895feat(scala): add scala range serializer by @chaokunyang in https://github.com/apache/fury/pull/1899feat(java): add option to treat enum as string by @orisgarno in https://github.com/apache/fury/pull/1892feat(kotlin): Add tests and support for built-in types from the kotlin stdlib by @wywen in https://github.com/apache/fury/pull/1901feat(java): reduce metastring hashcode payload for small string(&lt;=16 bytes) by @chaokunyang in https://github.com/apache/fury/pull/1909feat(javascript): Added serialization and serialization for Type Meta Layer by @Forchapeatl in https://github.com/apache/fury/pull/1825feat(bazel): support building C++ libs on windows platform by @An-DJ in https://github.com/apache/fury/pull/1873feat(scala): support scala native image build by @chaokunyang in https://github.com/apache/fury/pull/1922perf(python): Add python benchmark test by @penguin-wwy in https://github.com/apache/fury/pull/1916  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#bug-fix","content":" fix(scala): ban these sbt commands by @pjfanning in https://github.com/apache/fury/pull/1862fix(java): fix async compilation switch for non-public nested class by @chaokunyang in https://github.com/apache/fury/pull/1883fix(java): fix add fury thread safety issue by @chaokunyang in https://github.com/apache/fury/pull/1889fix(other): fix feature request template by @chaokunyang in https://github.com/apache/fury/pull/1898fix(java): NonExistentEnum on mode serializeEnumByName by @orisgarno in https://github.com/apache/fury/pull/1904fix(java): ThreadLocalFury and ThreadPoolFury prioritize using the user classloader by @Aliothmoon in https://github.com/apache/fury/pull/1907fix(java): child container deep copy by @zhaommmmomo in https://github.com/apache/fury/pull/1911fix(java): Fix incorrect results of utf16 to utf8 conversion for latin1 but not ascii characters in https://github.com/apache/fury/pull/1914fix(python): Eliminate PytestCollectionWarning when running pytest by @penguin-wwy in https://github.com/apache/fury/pull/1917  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#other-improvements","content":" chore(py314): Replace deprecated pkgutil.find_loader by @effigies in https://github.com/apache/fury/pull/1888docs(guide): Fix package typo by @mandrean in https://github.com/apache/fury/pull/1906build(kotlin): Add spotless ktfmt and enable explicit api mode for library code. by @wywen in https://github.com/apache/fury/pull/1912build(deps): upgrade scala (2.13.15/3.3.4) by @pjfanning in https://github.com/apache/fury/pull/1861feat(rust): add rust-analyzer to toolchain by @caicancai in https://github.com/apache/fury/pull/1865chore(scala): add scala build script by @chaokunyang in https://github.com/apache/fury/pull/1920chore(kotlin): add parent pom for fury kotlin by @chaokunyang in https://github.com/apache/fury/pull/1921feat(java): Improve error message on architecture not using little-endian format by @apupier in https://github.com/apache/fury/pull/1918  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#new-contributors","content":" @An-DJ made their first contribution in https://github.com/apache/fury/pull/1873@wywen made their first contribution in https://github.com/apache/fury/pull/1877@effigies made their first contribution in https://github.com/apache/fury/pull/1888@HuangXingBo made their first contribution in https://github.com/apache/fury/pull/1890@orisgarno made their first contribution in https://github.com/apache/fury/pull/1892@mandrean made their first contribution in https://github.com/apache/fury/pull/1906@Aliothmoon made their first contribution in https://github.com/apache/fury/pull/1907@penguin-wwy made their first contribution in https://github.com/apache/fury/pull/1916@apupier made their first contribution in https://github.com/apache/fury/pull/1918  Full Changelog: https://github.com/apache/fury/compare/v0.8.0...v0.9.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#acknowledgements","content":" Thanks @effigies @apupier @wywen @mandrean @HuangXingBo @pjfanning @chaokunyang @penguin-wwy @An-DJ @Forchapeatl @orisgarno @zhaommmmomo @caicancai @Aliothmoon  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury 0.6.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_6_0_release","content":"","keywords":"","version":null},{"title":"High light‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#high-light","content":" In this release, we introduced a scoped meta share mode for schema evolution in java and enabled it by default when CompatibleMode is set to Compatible:  This mode is 50% faster than previous KV compatible mode, and only 1/6 size of serialized payload than before.It's 4x faster than protobuf, less than 1/2 serialized size of protobuf for complex object.    Protobuf/JSON will write message fields meta and values in a KV layout, so when serializzing a list of message, they will have two issues:  Write meta multiple times even those message are the same type.KV layout is dispersive, which is not friendly for compression.  The meta share mode will write field name&amp;type meta of a struct only once for multiple objects of same type, which will save space and improve performance comparedto protobuf.  With meta share, we can write field name&amp;type meta of a struct only once for multiple objects of same type, which will save space and improve performance comparedto protobuf. And we can also encode the meta into binary in advance, and use one memory copy to write it which will be much faster.  ","version":null,"tagName":"h2"},{"title":"Serialize data‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#serialize-data","content":"  public static class NumericStruct { public int f1; public int f2; public int f3; public int f4; public int f5; public int f6; public int f7; public int f8; public static NumericStruct build() { NumericStruct struct = new NumericStruct(); struct.f1 = 1; struct.f2 = 2; struct.f3 = 3; struct.f4 = 4; struct.f5 = 5; struct.f6 = 6; struct.f7 = 7; struct.f8 = 8; return struct; } } public static class NumericStructList { public List&lt;NumericStruct&gt; list; public static NumericStructList build() { NumericStructList structList = new NumericStructList(); structList.list = new ArrayList&lt;&gt;(1000); for (int i = 0; i &lt; 1000; i++) { structList.list.add(NumericStruct.build()); } return structList; }   ","version":null,"tagName":"h3"},{"title":"Result‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#result","content":" Performance:  Benchmark Mode Cnt Score Error Units fury_deserialize thrpt 30 49667.900 ¬± 3004.061 ops/s fury_kv_compatible_deserialize thrpt 30 33014.595 ¬± 3716.199 ops/s fury_kv_compatible_serialize thrpt 30 23915.260 ¬± 3968.119 ops/s fury_serialize thrpt 30 63146.826 ¬± 2930.505 ops/s protobuf_deserialize thrpt 30 14156.610 ¬± 685.272 ops/s protobuf_serialize thrpt 30 10060.293 ¬± 706.064 ops/s   Size:  Lib\tSerialized Payload Sizefury\t8077 furystrict\t8009 furykv\t48028 protobuf\t18000  ","version":null,"tagName":"h3"},{"title":"Feature‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#feature","content":" feat(java): support nonexistent class deserialization in meta share mode by @chaokunyang in https://github.com/apache/fury/pull/1646feat(java): scoped meta share mode for type forward/backward compaibility by @chaokunyang in https://github.com/apache/fury/pull/1660feat(java): support meta compression by Deflater by @chaokunyang in https://github.com/apache/fury/pull/1663perf(java): Add ClassInfo ClassBytes generation conditions. by @LiangliangSui in https://github.com/apache/fury/pull/1667feat(javascript): use TextDecoder to decode buffer by @bytemain in https://github.com/apache/fury/pull/1699feat(Python): meta string encoding algorithm in Python by @pandalee99 in https://github.com/apache/fury/pull/1702feat(C++): String detection is performed using SIMD techniques by @pandalee99 in https://github.com/apache/fury/pull/1720feat(C++): The use of SIMD accelerated to implement and optimize utf16 utf8 by @pandalee99 in https://github.com/apache/fury/pull/1732feat(java): enable scoped meta share for compatible mode by default by @chaokunyang in https://github.com/apache/fury/pull/1733perf(java): optimize scoped meta share mode perf by @chaokunyang in https://github.com/apache/fury/pull/1734  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#bug-fix","content":" chore(doc): fix example by @wangjie-fourth in https://github.com/apache/fury/pull/1657fix(java): fix scala object type codegen by @chaokunyang in https://github.com/apache/fury/pull/1659fix(java): Fix header offset issue in MetaStringBytes hashcode by @LiangliangSui in https://github.com/apache/fury/pull/1668fix(java): return fury to pooled which get from by @MrChang0 in https://github.com/apache/fury/pull/1697fix(doc): codestyle version in python by @pandalee99 in https://github.com/apache/fury/pull/1706fix(java): fix nested map serialization codegen by @chaokunyang in https://github.com/apache/fury/pull/1713fix(java): fix fastjson object serialization by @chaokunyang in https://github.com/apache/fury/pull/1717  ","version":null,"tagName":"h2"},{"title":"Others‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#others","content":" chore: Add IssueNavigationLink and icon for IDEA by @lvshaokang in https://github.com/apache/fury/pull/1665chore(rust): resolve deprecate warnings by @waynexia in https://github.com/apache/fury/pull/1662chore(doc): fix doc example code by @wangjie-fourth in https://github.com/apache/fury/pull/1666chore(rust): Setup rustfmt and toolchain for rust by @Xuanwo in https://github.com/apache/fury/pull/1677chore(rust): Make rust clippy happy by @Xuanwo in https://github.com/apache/fury/pull/1678chore(doc): add incubating DISCLAIMER by @chaokunyang in https://github.com/apache/fury/pull/1681chore(java): Update github URL in IntelliJ vcs.xml by @pjfanning in https://github.com/apache/fury/pull/1689ci: fix ci error by @LiangliangSui in https://github.com/apache/fury/pull/1691docs: fix badge x by @vesense in https://github.com/apache/fury/pull/1694chore(doc): fix compiler error by @wangjie-fourth in https://github.com/apache/fury/pull/1698refactor(java): move latin language checker method from string serializer to string util by @anagh07 in https://github.com/apache/fury/pull/1708chore(doc): the more complete readme is in python by @pandalee99 in https://github.com/apache/fury/pull/1709build: update scala build by @pjfanning in https://github.com/apache/fury/pull/1725build: publish jars for fury-scala by @pjfanning in https://github.com/apache/fury/pull/1729chore(java): merge reflect.Types into TypeRef by @chaokunyang in https://github.com/apache/fury/pull/1731  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#new-contributors","content":" @wangjie-fourth made their first contribution in https://github.com/apache/fury/pull/1657@lvshaokang made their first contribution in https://github.com/apache/fury/pull/1665@waynexia made their first contribution in https://github.com/apache/fury/pull/1662@Xuanwo made their first contribution in https://github.com/apache/fury/pull/1677@anagh07 made their first contribution in https://github.com/apache/fury/pull/1708  Full Changelog: https://github.com/apache/fury/compare/v0.5.1...v0.6.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.7.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_7_0_release","content":"","keywords":"","version":null},{"title":"High Light‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#high-light","content":" ","version":null,"tagName":"h2"},{"title":"Experimental‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#experimental","content":" Implement fast object deep copy framework for java:  Fury fury = Fury.builder().withRefCopy(true).build(); fury.register(SomeClass.class); SomeClass a = xxx; SomeClass copied = fury.copy(a);   Benchmark result:  Benchmark\tobjectType\tScore\tError\tUnitsfury_copy\tMEDIA_CONTENT\t1243297.690\t¬± 451828.452\tops/s fury_copy\tSAMPLE\t2670545.816\t¬± 1378536.021\tops/s fury_copy\tSTRUCT\t2673356.422\t¬± 202288.322\tops/s fury_copy\tSTRUCT2\t1943587.774\t¬± 392513.707\tops/s fury_copy_int_map\tint map\t1470264.733\t¬± 1021875.257\tops/s fury_copy_list\tint list\t3556892.276\t¬± 127410.724\tops/s fury_copy_object_array\tarray\t4430589.112\t¬± 25366.893\tops/s fury_copy_string_map\tstring map\t1736145.327\t¬± 377806.877\tops/s kryo_copy\tMEDIA_CONTENT\t804208.092\t¬± 27429.069\tops/s kryo_copy\tSAMPLE\t717669.608\t¬± 71093.370\tops/s kryo_copy\tSTRUCT\t1076048.642\t¬± 223194.146\tops/s kryo_copy\tSTRUCT2\t141374.767\t¬± 14150.535\tops/s kryo_copy_int_map\tint map\t546203.187\t¬± 54669.173\tops/s kryo_copy_list\tint list\t843643.496\t¬± 312306.921\tops/s kryo_copy_object_array\tobject array\t1593267.344\t¬± 1721824.436\tops/s kryo_copy_string_map\tstring map\t574809.875\t¬± 47316.340\tops/s  ","version":null,"tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#features","content":" feat(Rust): add meta string encoding algorithm in Rust by @urlyy in https://github.com/apache/fury/pull/1712feat(Rust): Implement utf16 to utf8 conversion algorithm by @urlyy in https://github.com/apache/fury/pull/1730perf(java): add struct benchmark with pb by @chaokunyang in https://github.com/apache/fury/pull/1736feat(java): fast object copy framework in fury java by @zhaommmmomo in https://github.com/apache/fury/pull/1701perf(java): optimize pojo copy performance by @chaokunyang in https://github.com/apache/fury/pull/1739feat(java): support jdk17+ record copy by @chaokunyang in https://github.com/apache/fury/pull/1741feat(RUST): String detection is performed using SIMD techniques by @kitty-eu-org in https://github.com/apache/fury/pull/1752feat(java): Add 'Expose' annotation to support &quot;only de/serialize annotated fields&quot; by @urlyy in https://github.com/apache/fury/pull/1751feat(java): support Ignore inconsistent types deserialize by @weijiang157152688 in https://github.com/apache/fury/pull/1737perf(java): optimize map copy perf by @chaokunyang in https://github.com/apache/fury/pull/1767perf(java): optimize list copy perf by @chaokunyang in https://github.com/apache/fury/pull/1769perf(java): optimize object array copy perf by @chaokunyang in https://github.com/apache/fury/pull/1770feat(java): support deep ref copy by @chaokunyang in https://github.com/apache/fury/pull/1771  ","version":null,"tagName":"h2"},{"title":"Bug Fix‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#bug-fix","content":" fix(java): fix janino commons classes issue by @chaokunyang in https://github.com/apache/fury/pull/1753fix(scala): fix scala release version by @chaokunyang in https://github.com/apache/fury/pull/1756fix(java): fix streaming classdef read by @chaokunyang in https://github.com/apache/fury/pull/1758fix(java): fix big buffer streaming MetaShared read offset by @chaokunyang in https://github.com/apache/fury/pull/1760fix(java): fix fury logger npe by @chaokunyang in https://github.com/apache/fury/pull/1762fix(java): fix enum abstract field serialization by @chaokunyang in https://github.com/apache/fury/pull/1765fix(java): Fix memory leak in StructSerializer.xread() caused by re-pushing instead of popping GenericType. by @komamitsu in https://github.com/apache/fury/pull/1768  ","version":null,"tagName":"h2"},{"title":"Other Improvements‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#other-improvements","content":" chore: Update case in DISCLAIMER by @pjfanning in https://github.com/apache/fury/pull/1746chore: bump dev version to 0.7.0 by @chaokunyang in https://github.com/apache/fury/pull/1755chore(java): rename copyTrackingRef to copyRef by @chaokunyang in https://github.com/apache/fury/pull/1748chore(java): add fury deep copy documentation by @chaokunyang in https://github.com/apache/fury/pull/1773  ","version":null,"tagName":"h2"},{"title":"New Contributors‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#new-contributors","content":" @urlyy made their first contribution in https://github.com/apache/fury/pull/1712@zhaommmmomo made their first contribution in https://github.com/apache/fury/pull/1701@kitty-eu-org made their first contribution in https://github.com/apache/fury/pull/1752@komamitsu made their first contribution in https://github.com/apache/fury/pull/1768  Full Changelog: https://github.com/apache/fury/compare/v0.6.0...v0.7.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements‚Äã","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#acknowledgements","content":" Thanks @komamitsu @pjfanning @chaokunyang @weijiang157152688 @kitty-eu-org @urlyy @zhaommmmomo A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated.  Full Changelog: https://github.com/apache/fury/compare/v0.6.0...v0.7.0 ","version":null,"tagName":"h2"},{"title":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework","content":"","keywords":"","version":null},{"title":"Background‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#background","content":" Serialization is a basic component of system communication, and widely used in big data, AI framework, cloud native and other distributed systems. Data transfer between processes, languages, nodes, or object persistence, state read-write and copy, all need serialization. The performance and ease-of-use of serialization affects runtime and development efficiency of the system.  Static serialization frameworks like Protobuf or FlatBuffers cannot be used for cross-language application development directly, because they don't support shared reference and polymorphism, and also need to generate code ahead.  Dynamic serialization frameworks such as JDK serialization, Kryo, Fst, Hessian, Pickle provide ease-of-use and dynamics, but don't support cross-language and suffer significant performance issues, which is unsuitable for high throughput, low latency, and large-scale data transfer scenarios.  Therefore, we developed a new multi-language serialization framework Apache Fury, which is open-sourced on https://github.com/apache/fury. Through highly optimized serialization primitives, JIT dynamic compilation and zero-copy technologies, Fury is both fast and easy-to-use. It can cross-language serialize any object automatically and provides ultimate performance at the same time.    ","version":null,"tagName":"h2"},{"title":"What is Apache Fury?‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#what-is-apache-fury","content":" Apache Fury is a multi-language serialization framework powered by JIT dynamic compilation and zero copy, providing blazing fast speed and ease of use:  Multiple languages: Java, Python, C++, Golang, JavaScript, Rust. Other languages can be added easily.Highly optimized serialization primitives.Zero-copy: Support out-of-band serialization and off-heap read/write.High performance: Use JIT to generate serialization code at runtime in an async multithreaded way, which can optimize methods inlining, code cache, dead code elimination, hash lookup, meta writing and memory read/write.Multi protocols: Provide flexibility and ease of use of dynamic serialization, as well as the cross-language of static serialization. Java Serialization: Drop-in replaces JDK, Kryo, and Hessian. No need to modify user code, but providing 170x speed up at most, which can improve efficiency of rpc, data transfer and object persistence significantly.100% JDK compatible, support JDK custom serialization methods writeObject, readObject, writeReplace, readResolve, readObjectNoData natively. Cross-language object graph: Cross-language serialize any objects automatically, no need for IDL, schema compilation, and object/protocol conversion.Cross-language serialize shared/circular reference, no data duplication or recursion error.Support object polymorphism, multiple children type objects can be serialized simultaneously. Row format A cache-friendly binary random-access format, supports skipping deserialization and lazy deserialization, efficient for high-performance computing and large-scale data transfer.Support automatic conversion to Apache Arrow.  ","version":null,"tagName":"h2"},{"title":"Core Serialization Capabilities‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#core-serialization-capabilities","content":" Although different scenarios require different serialization protocols, the underlying operations of serialization are similar.  Therefore, Fury defines and implements a set of basic serialization capabilities, which can be used for quickly building new multi-language serialization protocols and get speedup by JIT acceleration and other optimizations.  At the same time, performance optimization for a protocol on the primitives can also benefit all other protocols.  ","version":null,"tagName":"h2"},{"title":"Serialization Primitives‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#serialization-primitives","content":" Common serialization operations contains:  Bitmap operationsNumber encoding and decodingCompression for int and longString creation and copyString encoding: ASCII, UTF8, UTF16Memory copyArray copy and compressionMeta encoding, compression, and cache  Fury use SIMD and other advanced language features to make basic operations extremely fast in every languages.  ","version":null,"tagName":"h3"},{"title":"Zero-copy Serialization‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#zero-copy-serialization","content":" Large-scale data transfer often has multiple binary buffers in an object graph. Some serialization frameworks will write the binaries into an intermediate buffer and introduce multiple time-consuming memory copies. Fury implemented an out-of-band serialization protocol inspired by pickle5, Ray and Apache Arrow, which can capture all binary buffers in an object graph to avoid intermediate copies of these buffers.  The following figure shows the serialization process of zero-copy:    Currently, Fury supports the following types of zero-copy:  Java: all basic types of arrays, ByteBuffer, ArrowRecordBatch, and VectorSchemaRootPython: all arrays of the array module, numpy arrays, pyarrow.Table, and pyarrow.RecordBatchGolang: byte slice  You can also add the new zero copy type based on the Fury interface.  ","version":null,"tagName":"h3"},{"title":"JIT dynamic compilation acceleration‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#jit-dynamic-compilation-acceleration","content":" Custom type objects usually contain lots of type information, Fury used this information to generate efficient serialization code at runtime, which can push lots of runtime operations into the dynamic compilation stage. By inlining more methods, better code cache, reducing virtual method calls, conditional branches, hash lookup, metadata writes, and memory reads/writes, the serialization performance is greatly accelerated.  For Java, Fury implements a runtime codegen framework and defines an operator expression IR. Then fury can perform type inference based on the generic type information of the object at runtime to build an expression tree that describes the logic of serialized code.  The codegen framework will generate efficient Java code from the expression tree, then pass to Janino to compile it into bytecode, and load it into the user's ClassLoader or the ClassLoader created by Fury, and finally compile it into efficient assembly code through Java JIT.  Since JVM JIT skips Big method compilation and inlining, Fury also implements an optimizer to split big methods into small methods recursively, thus ensuring that all code can be compiled and inlined.    Fury also supports asynchronous multithreaded compilation by running the codegen tasks in a thread pool, and using interpretation mode until JIT finishes to ensure no serialization burrs. Users can skip warm up serialization of objects.  Python and JavaScript codegen are similar. Generating source code is easier for development and troubleshooting problems.  Since serialization will manipulate objects extensively in each programming language, and the language does not expose the low-level API of the memory model, native methods call has a large cost too, so we cannot use LLVM to build a unified serializer JIT framework. Instead, we implemented a codegen framework for every language separately.  ","version":null,"tagName":"h3"},{"title":"Static code generation‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#static-code-generation","content":" Although JIT compilation can greatly improve serialization efficiency and generate better serialization code based on the statistical distribution of data at runtime, languages like C++ do not support reflection, have no virtual machines, and no low-level API for memory models. We cannot generate serialization code dynamically for such languages through JIT.  In such scenarios, Fury is implementing an AOT codegen framework, which generates the serialized code statically according to the object schema, and objects can be serialized automatically using the generated serializer. For Rust, Rust macro is used to generate code statically.  ","version":null,"tagName":"h3"},{"title":"Cache optimization‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#cache-optimization","content":" When serializing a custom type, fury will reorder fields to ensure that fields of the same type are serialized in order. This can hit more data cache and CPU instruction cache.  The basic type fields are written in descending order by byte size. In this way, if the initial addresses are aligned, subsequent read and write operations will occur at the position where the memory addresses are aligned, making CPU execution more efficient.  ","version":null,"tagName":"h3"},{"title":"Multi-protocol Design and Implementation‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#multi-protocol-design-and-implementation","content":" Based on the multi-language serialization features provided by Fury core, we have built three serialization protocols for different scenarios:  Java serialization: Suitable for pure Java serialization scenarios and provides up to 170x speed up;Cross-language object graph serialization: Suitable for application-oriented multi-language programming and high-performance cross-language serialization;Row-format serialization: Suitable for distributed computing engines such as Apache Spark, Apache Flink, Apache Doris, Velox, and features frameworks.  In the future, we will add new protocols for other core scenarios. Users can also build their own protocols based on Fury's serialization framework.  ","version":null,"tagName":"h2"},{"title":"Java serialization‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#java-serialization","content":" Java is widely used in big data, cloud native, microservices, and enterprise applications. Therefore, Fury made lots of optimizations for Java serialization, which reduces system latency and server costs a lot, and improves throughput significantly. Our implementation has the following highlights:  Blazing fast performance: Based on Java types, JIT compilation and Unsafe low-level operations, Fury is 170x faster than JDK, and 50~110x faster than Kryo/Hessian at most.100% JDK serialization API compatibility : Supports all JDK custom serialization methods writeObject, readObject, writeReplace, readResolve, readObjectNoData natively to ensure the serialization correctness in any scenario. Kryo and Hessian have some correctness issues in these scenarios.Type compatibility: When the deserialization and serialization class schema are inconsistent, it can still deserialize correctly. It supports application upgrade and deployment, add/delete fields independently. Fury type-compatible mode is implemented with no performance loss compared to type-consistent mode.Metadata sharing : share metadata(class name, field name&amp;type, etc.) across multiple serializations under a context (TCP connection), meta will be sent to the peer only for the first serialization, the peer can reconstruct the same deserializer based on this information. Subsequent serialization will skip transferring metadata, which can reduce network traffic, and support type compatibility automatically.Zero-copy support: supports out-of-band zero copy and off-heap memory read and write.  ","version":null,"tagName":"h3"},{"title":"Cross-language object graph serialization‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#cross-language-object-graph-serialization","content":" Fury cross-language object graph serialization is primarily used for scenarios that require higher dynamics and ease-of-use.  Although frameworks like Protobuf or FlatBuffers support cross-language serialization, they still have limitations:  They require pre-defined IDLs and generate code statically ahead, lacking sufficient dynamics and flexibility;The generated classes don't conform to object-oriented design and it's impossible to add behavior to classes, which make them unsuitable for use as domain objects in cross-language application development.They don't support polymorphism. Object-oriented programming uses interfaces to invoke subclass methods, but this pattern isn't supported well in those frameworks. Although FlatBuffers offers Union, and Protobuf provides OneOf/Any, those API require check object type during serialization and deserialization, which isn't polymorphic.They don't support circular references and shared references. Users need to define a set of IDLs for domain objects and implement reference resolution by themselves, as well as writing code to convert between domain objects and protocol objects in each language. If the object graph depth is deep, more code needs to be written.  Due to the above limitations, Fury implemented a cross-language object graph serialization protocol that:  Automatically serializes any object across multiple languages: By defining classes in the serialization and deserialization peer, objects in one language can be automatically serialized into objects in another language without creating IDL files, compiling schema to generate code, or writing conversion code.Automatically serializes shared and circular references across multiple languages.Supports object type polymorphism, consistent with the object-oriented programming paradigm, and multiple subtypes can be automatically deserialized without manual intervention.Out-of-band zero-copy is also supported in this protocol.  Example of Automatic Cross-Language Serialization:    ","version":null,"tagName":"h3"},{"title":"Row-format‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#row-format","content":" For high-performance computing and large-scale data transfer scenarios, data serialization and transfer are often the performance bottlenecks of the system. If users only need to read part of the data or filter data based on some field of an object, deserializing the entire data will result in unnecessary overhead. Therefore, Fury provides a binary data structure for direct reading and writing on binary data to avoid serialization.  Apache Arrow is a standardized columnar storage format that supports binary read and write. However, columnar format is not suitable for all scenarios. Data in online and streaming computing are naturally stored row by row, and row is also used in columnar computing engines when involving data updates, Hash/Join/Aggregation operations.  However, there is no standardized implementation for row format. Computing engines such as Spark/Flink/Doris/Velox all defined their row format, which doesn't support cross-language and can only be used internally by themselves. FlatBuffers does support lazy deserialization, but it requires static compilation of schema IDL and management of offset, which is impossible for complex scenarios.  Therefore, Fury implemented a binary row format inspired by Spark Tungsten and Apache Arrow format, which allows random access and partial deserialization. Currently, Java/Python/C++ versions have been implemented, allowing direct reading and writing on binary data to avoid all serialization overhead, and can convert to arrow format automatically.    This format is densely stored, byte aligned and cache-friendly, which enables faster read and write operations. By avoiding deserialization, it reduces Java GC pressure and Python overhead. Based on Python's dynamics, Fury's data structure implements special methods such as getattr, getitem, slice, etc., ensuring behavior consistency with Python dataclass, list, object, and users have no perception of this.  ","version":null,"tagName":"h3"},{"title":"Performance Comparison‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#performance-comparison","content":" Here are some Java serialization performance data, where charts with &quot;compatible&quot; in the title are performance data under type compatible mode: Support type forward vs. Backward compatibility. Charts without &quot;compatible&quot; in the title are performance data without type compatibility: class schema must be same between serialization and deserialization.  For fairness, Fury disabled the zero-copy feature for all tests.        ","version":null,"tagName":"h2"},{"title":"Roadmap‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#roadmap","content":" Meta compression, auto meta sharing and cross-language schema compatibility.AOT Framework for C++ and Golang to generate code statically.Object graph serialization support for C++ and RustRow format support for Golang, Rust, and NodeJSProtobuf compatibility supportProtocols for features and knowledge graph serializationContinuously improve our serialization infrastructure for any new protocols  ","version":null,"tagName":"h2"},{"title":"Join us‚Äã","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#join-us","content":" We are committed to building Apache Fury into an open and neutral community project that pursues passion and innovation. The development and discussion are open-sourced and transparent in the community. Any form of participation is welcome, including but not limited to questions, code contributions, technical discussions, etc. We are looking forward to receiving your ideas and feedback, participating in the project together, pushing the project forward and creating a better serialization framework.  The GitHub address of the fury repository is: https://github.com/apache/fury  Official website: https://fury.apache.org  All issues, PR, and Discussion are welcome. ","version":null,"tagName":"h2"},{"title":"Important Announcement - Apache Fury is Now Apache Fory","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_renamed_to_fory","content":"","keywords":"","version":null},{"title":"Announcement‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#announcement","content":" The Apache Fury team is now officially announcing that Apache Fury has been renamed to Apache Fory, effective immediately. This transition impacts all project components including code repositories, package names, documentation, and communication channels.  ","version":null,"tagName":"h2"},{"title":"Why This Change Is Necessary‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#why-this-change-is-necessary","content":" This transition is required to resolve naming conflicts identified by the ASF Brand Management. Following massive discussions and a formal vote, this change ensures compliance with ASF's guidelines.  The new name &quot;Fory&quot; preserves phonetic similarity to &quot;Fury&quot; while establishing a distinct identity aligned with ASF standards.  ","version":null,"tagName":"h2"},{"title":"Technical Changes and Impact‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#technical-changes-and-impact","content":" This transition requires updates across the ecosystem:  Java packages migrated from org.apache.fury to org.apache.foryClass names migrated from XXXFury/FuryXXX to XXXFory/ForyXXXGitHub repositories renamed to apache/fory (code) and apache/fory-site (website)Downstream integrations (Quarkus-Fury, Camel-Fury) require dependency updatesMailing lists transition to @fory.apache.org  ","version":null,"tagName":"h2"},{"title":"Migration Support‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#migration-support","content":" To facilitate this transition:  Existing Apache Fury release document remains intact at v0.10 documentCritical URL redirects in place  ","version":null,"tagName":"h2"},{"title":"Why \"Fory\"?‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#why-fory","content":" The name was chosen by prioritizing:  Phonetic similarity to &quot;Fury&quot;No existing trademark conflictsPreservation of our technical identityShort, memorable, and globally pronounceable  ","version":null,"tagName":"h2"},{"title":"Our Commitment‚Äã","type":1,"pageTitle":"Important Announcement - Apache Fury is Now Apache Fory","url":"/zh-CN/blog/fury_renamed_to_fory#our-commitment","content":" We recognize the burden this places on our users, especially those with deep integrations. Please know:  All existing issues and PRs have been migratedPerformance benchmarks remain consistently superiorRelease cycles continue uninterrupted  This rename represents our commitment to respecting intellectual property while maintaining technical excellence. We're grateful for your patience and continued trust as we navigate this transition together. ","version":null,"tagName":"h2"},{"title":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8","content":"","keywords":"","version":null},{"title":"Background‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#background","content":" In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.  Those strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.  If we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.  So we proposed a new string encoding algorithm which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.  ","version":null,"tagName":"h2"},{"title":"Meta String Introduction‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#meta-string-introduction","content":" Meta string encoding algorithm is mainly used to encode meta strings such as field names, namespace, packageName, className, path and filename. Such a string is enumerated and limited, so the encoding performance is not important since we can cache the encoding result.  Meta string encoding uses 5/6 bits instead of 8 bits in utf-8 encoding for every chars. Since it uses less bits than utf8, it can bring37.5% space cost savings compared to utf-8 and has a smaller encoded binary size, which uses less storage and makes the network transfer faster.  More details about meta string spec can be found in Fury xlang serialization specification.  ","version":null,"tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  If we use LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL, we must add a strip last char flag in encoded data. This is because every char will be encoded using 5/6 bits, and the last char may have 1~7 bits which are unused by encoding, such bits may cause an extra char to be read, which we must strip off.  Here is encoding code snippet in java, see org.apache.fury.meta.MetaStringEncoder#encodeGeneric(char[], int) for more details:  private byte[] encodeGeneric(char[] chars, int bitsPerChar) { int totalBits = chars.length * bitsPerChar + 1; int byteLength = (totalBits + 7) / 8; // Calculate number of needed bytes byte[] bytes = new byte[byteLength]; int currentBit = 1; for (char c : chars) { int value = (bitsPerChar == 5) ? charToValueLowerSpecial(c) : charToValueLowerUpperDigitSpecial(c); // Encode the value in bitsPerChar bits for (int i = bitsPerChar - 1; i &gt;= 0; i--) { if ((value &amp; (1 &lt;&lt; i)) != 0) { // Set the bit in the byte array int bytePos = currentBit / 8; int bitPos = currentBit % 8; bytes[bytePos] |= (byte) (1 &lt;&lt; (7 - bitPos)); } currentBit++; } } boolean stripLastChar = bytes.length * 8 &gt;= totalBits + bitsPerChar; if (stripLastChar) { bytes[0] = (byte) (bytes[0] | 0x80); } return bytes; } private int charToValueLowerSpecial(char c) { if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') { return c - 'a'; } else if (c == '.') { return 26; } else if (c == '_') { return 27; } else if (c == '$') { return 28; } else if (c == '|') { return 29; } else { throw new IllegalArgumentException(&quot;Unsupported character for LOWER_SPECIAL encoding: &quot; + c); } } private int charToValueLowerUpperDigitSpecial(char c) { if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') { return c - 'a'; } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') { return 26 + (c - 'A'); } else if (c &gt;= '0' &amp;&amp; c &lt;= '9') { return 52 + (c - '0'); } else if (c == specialChar1) { return 62; } else if (c == specialChar2) { return 63; } else { throw new IllegalArgumentException( &quot;Unsupported character for LOWER_UPPER_DIGIT_SPECIAL encoding: &quot; + c); } }   Here is decoding code snippet in golang, see go/fury/meta/meta_string_decoder.go:70 for more details:  func (d *Decoder) decodeGeneric(data []byte, algorithm Encoding) ([]byte, error) { bitsPerChar := 5 if algorithm == LOWER_UPPER_DIGIT_SPECIAL { bitsPerChar = 6 } // Retrieve 5 bits every iteration from data, convert them to characters, and save them to chars // &quot;abc&quot; encodedBytes as [00000] [000,01] [00010] [0, corresponding to three bytes, which are 0, 68, 0 // Take the highest digit first, then the lower, in order // here access data[0] before entering the loop, so we had to deal with empty data in Decode method // totChars * bitsPerChar &lt;= totBits &lt; (totChars + 1) * bitsPerChar stripLastChar := (data[0] &amp; 0x80) &gt;&gt; 7 totBits := len(data)*8 - 1 - int(stripLastChar)*bitsPerChar totChars := totBits / bitsPerChar chars := make([]byte, totChars) bitPos, bitCount := 6, 1 // first highest bit indicates whether strip last char for i := 0; i &lt; totChars; i++ { var val byte = 0 for i := 0; i &lt; bitsPerChar; i++ { if data[bitCount/8]&amp;(1&lt;&lt;bitPos) &gt; 0 { val |= 1 &lt;&lt; (bitsPerChar - i - 1) } bitPos = (bitPos - 1 + 8) % 8 bitCount++ } ch, err := d.decodeChar(val, algorithm) if err != nil { return nil, err } chars[i] = ch } return chars, nil }   ","version":null,"tagName":"h2"},{"title":"Select Best Encoding‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#select-best-encoding","content":" For most lowercase characters, meta string will use 5 bits to encode every char. For string containing uppercase chars, meta string will try to convert the string into a lower case representation by inserting some markers, and compare used bytes with 6 bits encoding, then select the encoding which has smaller encoded size.  Here is the common encoding selection strategy:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  For package name, module name or namespace, LOWER_SPECIAL will be used mostly. ALL_TO_LOWER_SPECIAL can be used too, since it can represent the same chars as LOWER_SPECIAL without using more bits, but also support string with uppercase chars.  For className, FIRST_TO_LOWER_SPECIAL will be used mostly. If there are multiple uppercase chars, then ALL_TO_LOWER_SPECIAL will be used instead. If a string contains digits, then LOWER_UPPER_DIGIT_SPECIAL will be used.  Finally, utf8 will be the fallback encoding if the string contains some chars which is not in range a-z0-9A-Z.  ","version":null,"tagName":"h2"},{"title":"Encoding Flags and Data jointly‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#encoding-flags-and-data-jointly","content":" Depending on the case, one can choose encoding flags + data jointly, using 3 bits of first byte for flags and other bytes for data. This can be useful since there are some holes remaining in last byte, adding flags in data doesn't always increase serialized bytes size.Or one can use a header to encode such flags with other meta such as encoded size, this is what Fury does in https://github.com/apache/fury/pull/1556  ","version":null,"tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#benchmark","content":" utf8 encoding uses 30 bytes for string org.apache.fury.benchmark.data, fury meta string uses only 19 bytes. utf8 encoding uses 12 bytes for string MediaContent, but fury meta string uses only 9 bytes.  // utf8 use 30 bytes, we use only 19 bytes assertEquals(encoder.encode(&quot;org.apache.fury.benchmark.data&quot;).getBytes().length, 19); // utf8 uses 12 bytes, we use only 9 bytes. assertEquals(encoder.encode(&quot;MediaContent&quot;).getBytes().length, 9);  ","version":null,"tagName":"h2"},{"title":"Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/community/","content":"","keywords":"","version":"0.10"},{"title":"ÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#ÈÇÆ‰ª∂ÂàóË°®","content":" ÈÇÆ‰ª∂ÂàóË°®\tÊèèËø∞\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÊ¥ªÂä®dev@fury.apache.org\tÂºÄÂèëÁõ∏ÂÖ≥ËÆ®ËÆ∫\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä® commits@fury.apache.org\t‰ªìÂ∫ìÁöÑÊâÄÊúâ commits\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂè™ËØªÁöÑÈÇÆ‰ª∂ÂàóË°®\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä®  Âú®Â∞ùËØïÂèëÈÄÅÈÇÆ‰ª∂‰πãÂâçÔºåËØ∑Á°Æ‰øùËÆ¢ÈòÖ‰∏äËø∞ÁöÑÈÇÆ‰ª∂ÂàóË°®„ÄÇ  Â¶ÇÊûúÊÇ®Ê≤°ÊúâËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®ÔºåÊÇ®ÁöÑÈÇÆ‰ª∂Â∞ÜË¢´ÊãíÁªùÊàñ‰∏ç‰ºöÊî∂Âà∞ÂõûÂ§ç„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®","content":" Ë¶ÅÂèëÈÄÅÈÇÆ‰ª∂Ëá≥ÈÇÆ‰ª∂ÂàóË°®ÔºåËØ∑ÂÖàÈÄöËøá‰ª•‰∏ãÊñπÂºèËÆ¢ÈòÖÔºö  ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ listname-subscribe@fury.apache.orgÔºåÂπ∂Áõ∏Â∫îÊõøÊç¢ listnameÔºõÂõûÂ§çÊÇ®Â∞ÜÊî∂Âà∞ÁöÑÁ°ÆËÆ§ÁîµÂ≠êÈÇÆ‰ª∂Ôºå‰øùÊåÅÈÇÆ‰ª∂‰∏ªÈ¢òË°åÂÆåÊï¥ÔºõÁÑ∂ÂêéÊÇ®Â∞ÜÊî∂Âà∞‰∏ÄÂ∞ÅÊ¨¢ËøéÁöÑÁîµÂ≠êÈÇÆ‰ª∂ÔºåËÆ¢ÈòÖÊàêÂäü„ÄÇ  Âú®ËÆ®ËÆ∫ÁîµÂ≠êÈÇÆ‰ª∂‰∏≠ÁöÑ‰ª£Á†ÅÁâáÊÆµÊó∂ÔºåËØ∑Á°Æ‰øùÔºö  ÊÇ®‰∏çË¶ÅÈìæÊé•Âà∞Â§ñÈÉ®ÊúçÂä°‰∏≠ÁöÑÊñá‰ª∂ÔºåÂõ†‰∏∫Ê≠§Á±ªÊñá‰ª∂ÂèØËÉΩ‰ºöÊõ¥Êîπ„ÄÅË¢´Âà†Èô§ÊàñÈìæÊé•ÂèØËÉΩ‰ºö‰∏≠Êñ≠Ôºå‰ªéËÄå‰ΩøÂ≠òÊ°£ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Á∫øÁ®ãÂèòÂæóÊó†Áî®ÔºõÊÇ®Á≤òË¥¥ÊñáÊú¨ËÄå‰∏çÊòØÊñáÊú¨Â±èÂπïÊà™ÂõæÔºõÁ≤òË¥¥‰ª£Á†ÅÊó∂‰øùÊåÅÊ†ºÂºèÔºå‰ª•‰øùÊåÅ‰ª£Á†ÅÂèØËØªÔºõÊúâË∂≥Â§üÁöÑÂØºÂÖ•ËØ≠Âè•‰ª•ÈÅøÂÖç‰∫ßÁîü‰ª£Á†ÅÊ≠ß‰πâ„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Slack‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#slack","content":" ÊÇ®ÂèØ‰ª•Âä†ÂÖ•Slack ‰∏äÁöÑ Apache Fury‚Ñ¢ Á§æÂå∫„ÄÇ  ËøôÈáåÊúâ‰∏Ä‰∫õÁ§æÂå∫ËßÑÂàôÔºö  ‰øùÊåÅÂ∞äÈáçÂíåÂèãÂñÑÔºõÊâÄÊúâÈáçË¶ÅÁöÑÂÜ≥ÂÆöÂíåÁªìËÆ∫ÈÉΩÂøÖÈ°ªÂèçÊò†Âà∞ÈÇÆ‰ª∂ÂàóË°®‰∏≠„ÄÇ ‚ÄúÂ¶ÇÊûúËøôÊ≤°ÊúâÂú®ÈÇÆ‰ª∂ÂàóË°®‰∏≠ÊúâÁõ∏ÂÖ≥ÁöÑËÆ®ËÆ∫ËÆ∞ÂΩïÔºåÂàô‰ª£Ë°®ÂÆÉ‰∏çÁîüÊïà‚Äù ÔºõThe Apache WayÔºõ‰ΩøÁî® Slack Á∫øÁ®ãÊù•Èò≤Ê≠¢Âπ∂Ë°åÂØπËØùÊ∑πÊ≤°ÂΩìÂâçÁöÑÂØπËØùÈ¢ëÈÅìÔºõËØ∑‰∏çË¶ÅÁõ¥Êé•ÂêëÈÇÆ‰ª∂ÂàóË°®ÂèëÈÄÅ Bug fix„ÄÅIssue ÂàÜÈÖçÂíå Code Review Ê∂àÊÅØ„ÄÇËøô‰∫õÂÜÖÂÆπÂ∫îËØ•Ë¢´Á§æÂå∫Ë¥°ÁåÆËÄÖËá™ÊÑøÂ§ÑÁêÜÂπ∂ÂàÜÈÖç„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Issue Ë∑üË∏™‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#issue-Ë∑üË∏™","content":" Êàë‰ª¨‰ΩøÁî® GitHub Issues Êù•Ë∑üË∏™ÊâÄÊúâ IssuesÔºö  ‰ª£Á†ÅÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fury/issuesÁΩëÁ´ôÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fury-site/issues  ÊÇ®ÈúÄË¶ÅÊúâ‰∏Ä‰∏™ GitHub Â∏êÊà∑ ÊâçËÉΩÂàõÂª∫ÈóÆÈ¢ò„ÄÇ Â¶ÇÊûúÊÇ®Ê≤°Êúâ GitHub Â∏êÊà∑ÔºåÊÇ®ÂèØ‰ª•ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ dev@fury.apache.org„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Êä•Âëä Bug‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#Êä•Âëä-bug","content":" ÊÇ®Âú®Êä•Âëä Bug ‰πãÂâçÔºåÂ∫îËØ•Ôºö  È™åËØÅËØ• Bug Á°ÆÂÆûÂ≠òÂú®ÔºõÊêúÁ¥¢ Issue List ‰ª•Á°Æ‰øù‰∏çÂ≠òÂú®Áõ∏ÂÖ≥ Bug„ÄÇÂú® Issue List ‰∏≠ÂàõÂª∫ bug Êä•Âëä„ÄÇÂ¶ÇÊûúÂèØËÉΩÁöÑËØùÔºåÊ∑±ÂÖ•Á†îÁ©∂ Apache Fury ÁöÑÊ∫ê‰ª£Á†ÅÔºåÂπ∂ÈíàÂØπÊÇ®Êä•ÂëäÁöÑ Bug Êèê‰∫§Ë°•‰∏ÅÔºåËøôÊúâÂä©‰∫éÂø´ÈÄü‰øÆÂ§ç Bug„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û","content":" Apache Fury ÊòØ Apache ËΩØ‰ª∂Âü∫Èáë‰ºö ÁöÑ‰∏Ä‰∏™È°πÁõÆÔºåÈÅµÂæ™ ASF ÊºèÊ¥ûÂ§ÑÁêÜÊµÅÁ®ã„ÄÇ  Ë¶ÅÊä•ÂëäÊÇ®ÂèëÁé∞ÁöÑÊñ∞ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÔºåËØ∑ÈÅµÂæ™ ASF ÊºèÊ¥ûÊä•ÂëäÊµÅÁ®ãÔºåËØ•ÊµÅÁ®ãËß£Èáä‰∫ÜÂ¶Ç‰ΩïÁßÅ‰∏ãÂêëÁ§æÂå∫Áª¥Êä§ËÄÖÂèëÈÄÅËØ¶ÁªÜÁöÑÊºèÊ¥û‰ø°ÊÅØ„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"New Feature‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#new-feature","content":" Ê¨¢ËøéÊÇ®Â¢ûÂº∫ÂäüËÉΩÊàñÊñ∞ÂäüËÉΩÂª∫ËÆÆ„ÄÇÊèêÊ°àË∂äÂÖ∑‰Ωì„ÄÅË∂äÂêàÁêÜÔºåÊÇ®Âú® Fury Á§æÂå∫ÁöÑÂΩ±ÂìçÂäõÂ∞±Ë∂äÂ§ß„ÄÇÂÆÉÊúâÂèØËÉΩÂú®‰πãÂêéÁâàÊú¨ÂèëÂ∏É„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"È°πÁõÆÊ∫ê‰ª£Á†Å‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.10/community/#È°πÁõÆÊ∫ê‰ª£Á†Å","content":" Fury Core Â≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/furyFury ÁΩëÁ´ôÂ≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/fury-site ","version":"0.10","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/community/how_to_join_community","content":"","keywords":"","version":"0.10"},{"title":"Fury Ë¥°ÁåÆÊåáÂçó‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#fury-Ë¥°ÁåÆÊåáÂçó","content":" Fury Âõ¢ÈòüÈÄöÂ∏∏Âú® github ‰∏äËøõË°åÂºÄÂèëÂíå issue Áª¥Êä§ÔºåËØ∑ÊâìÂºÄ¬†Github ÁΩëÁ´ôÔºåÁÇπÂáªÂè≥‰∏äËßí¬†Sign up¬†ÊåâÈíÆÔºåÊ≥®ÂÜå‰∏Ä‰∏™Ëá™Â∑±ÁöÑË¥¶Âè∑ÔºåÂºÄÂêØ‰Ω†ÂºÄÊ∫ê‰πãÊóÖÁöÑÁ¨¨‰∏ÄÊ≠•„ÄÇ  Âú®¬†Fury‰ªìÂ∫ì‰∏≠ÔºåÊàë‰ª¨Êúâ‰∏Ä‰ªΩÈù¢ÂêëÊâÄÊúâÂºÄÊ∫êË¥°ÁåÆËÄÖÁöÑÊåáÂçóÔºå‰ªãÁªç‰∫ÜÊúâÂÖ≥ÁâàÊú¨ÁÆ°ÁêÜ„ÄÅÂàÜÊîØÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåËØ∑Ëä±Âá†ÂàÜÈíüÊó∂Èó¥ÈòÖËØª‰∫ÜËß£‰∏Ä‰∏ã„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™-pull-request","content":" ","version":"0.10","tagName":"h2"},{"title":"Step0ÔºöÂÆâË£Ö Git‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step0ÂÆâË£Ö-git","content":" Git ÊòØ‰∏ÄÁßçÁâàÊú¨ÊéßÂà∂Á≥ªÁªüÔºåÁî®‰∫éË∑üË∏™ÂíåÁÆ°ÁêÜËΩØ‰ª∂ÂºÄÂèëÈ°πÁõÆ‰∏≠ÁöÑ‰ª£Á†ÅÂèòÊõ¥„ÄÇÂÆÉÂ∏ÆÂä©ÂºÄÂèëËÄÖËÆ∞ÂΩïÂíåÁÆ°ÁêÜ‰ª£Á†ÅÁöÑÂéÜÂè≤ËÆ∞ÂΩïÔºåÊñπ‰æøÂõ¢ÈòüÂçè‰Ωú„ÄÅ‰ª£Á†ÅÁâàÊú¨ÊéßÂà∂„ÄÅÂêàÂπ∂‰ª£Á†ÅÁ≠âÊìç‰Ωú„ÄÇÈÄöËøá GitÔºåÊÇ®ÂèØ‰ª•ËøΩË∏™ÊØè‰∏™Êñá‰ª∂ÁöÑÊØè‰∏™ÁâàÊú¨ÔºåÂπ∂ËΩªÊùæÂú∞Âú®‰∏çÂêåÁâàÊú¨‰πãÈó¥ËøõË°åÂàáÊç¢ÂíåÊØîËæÉ„ÄÇGit ËøòÊèê‰æõ‰∫ÜÂàÜÊîØÁÆ°ÁêÜÂäüËÉΩÔºå‰ΩøÂæóÂèØ‰ª•ÂêåÊó∂ËøõË°åÂ§ö‰∏™Âπ∂Ë°åÂºÄÂèë‰ªªÂä°„ÄÇ  ËÆøÈóÆ Git ÂÆòÊñπÁΩëÁ´ôÔºöhttps://git-scm.com‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨ÁöÑ Git ÂÆâË£ÖÁ®ãÂ∫è„ÄÇËøêË°å‰∏ãËΩΩÁöÑÂÆâË£ÖÁ®ãÂ∫èÔºåÊåâÁÖßÂÆâË£ÖÂêëÂØºÁöÑÊèêÁ§∫ËøõË°åÂÆâË£Ö„ÄÇÂÆâË£ÖÂÆåÊàêÂêéÔºå‰Ω†ÂèØ‰ª•ÈÄöËøáÂëΩ‰ª§Ë°å‰ΩøÁî®¬†git version¬†ÂëΩ‰ª§Á°ÆËÆ§ÂÆâË£ÖÊàêÂäü„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Step1ÔºöFork È°πÁõÆ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step1fork-È°πÁõÆ","content":" È¶ñÂÖàÈúÄË¶Å fork Ëøô‰∏™È°πÁõÆÔºåËøõÂÖ•FuryÈ°πÁõÆÈ°µÈù¢ÔºåÁÇπÂáªÂè≥‰∏äËßíÁöÑ Fork ÊåâÈíÆ‰Ω†ÁöÑ github Â∏êÂè∑‰∏≠‰ºöÂá∫Áé∞ xxxx(‰Ω†ÁöÑ github Áî®Êà∑Âêç)/fury Ëøô‰∏™È°πÁõÆÂú®Êú¨Âú∞ÁîµËÑë‰∏ä‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§: ÂæóÂà∞‰∏Ä‰∏™ fury Êñá‰ª∂Â§π  // ssh git clone git@github.com:xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fury.git // https git clone https://github.com/xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fury.git   ","version":"0.10","tagName":"h3"},{"title":"Step2ÔºöËé∑ÂèñÈ°πÁõÆ‰ª£Á†Å‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step2Ëé∑ÂèñÈ°πÁõÆ‰ª£Á†Å","content":" ËøõÂÖ• fury Êñá‰ª∂Â§πÔºåÊ∑ªÂä† fury ÁöÑËøúÁ®ãÂú∞ÂùÄ  git remote add upstream https://github.com/apache/fury.git   ","version":"0.10","tagName":"h3"},{"title":"Step3ÔºöÂàõÂª∫ÂàÜÊîØ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step3ÂàõÂª∫ÂàÜÊîØ","content":" Â•Ω‰∫ÜÔºåÁé∞Âú®ÂèØ‰ª•ÂºÄÂßãË¥°ÁåÆÊàë‰ª¨ÁöÑ‰ª£Á†Å‰∫Ü„ÄÇfury ÈªòËÆ§ÂàÜÊîØ‰∏∫ main ÂàÜÊîØ„ÄÇÊó†ËÆ∫ÊòØÂäüËÉΩÂºÄÂèë„ÄÅbug ‰øÆÂ§ç„ÄÅÊñáÊ°£ÁºñÂÜôÔºåÈÉΩËØ∑Êñ∞Âª∫Á´ã‰∏Ä‰∏™ÂàÜÊîØÔºåÂÜçÂêàÂπ∂Âà∞ main ÂàÜÊîØ‰∏ä„ÄÇ‰ΩøÁî®‰ª•‰∏ã‰ª£Á†ÅÂàõÂª∫ÂàÜÊîØÔºö  // ÂàõÂª∫ÂäüËÉΩÂºÄÂèëÂàÜÊîØ git checkout -b feat/xxxx // ÂàõÂª∫ÈóÆÈ¢ò‰øÆÂ§çÂºÄÂèëÂàÜÊîØ git checkout -b fix/xxxx // ÂàõÂª∫ÊñáÊ°£„ÄÅdemoÂàÜÊîØ git checkout -b docs/add-java-demo   ÂÅáËÆæÊàë‰ª¨ÂàõÂª∫‰∫ÜÊñáÊ°£‰øÆÊîπÂàÜÊîØ¬†docs/add-java-demo  ÂÅáËÆæÊàë‰ª¨Â∑≤ÁªèÊ∑ªÂä†‰∫Ü‰∏Ä‰∫õ‰ª£Á†ÅÔºåÊèê‰∫§Âà∞‰ª£Á†ÅÂ∫ì git add . git commit -a -m &quot;docs: add java demo and related docs&quot; „ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Step4ÔºöÂêàÂπ∂‰øÆÊîπ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step4ÂêàÂπ∂‰øÆÊîπ","content":" ÂàáÊç¢ÂõûËá™Â∑±ÁöÑÂºÄÂèëÂàÜÊîØ:  git checkout docs/add-java-demo   ÊääÊõ¥Êñ∞‰ª£Á†ÅÊèê‰∫§Âà∞Ëá™Â∑±ÁöÑÂàÜÊîØ‰∏≠:  git push origin docs/add-java-demo   ","version":"0.10","tagName":"h3"},{"title":"Step5ÔºöÊèê‰∫§ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#step5Êèê‰∫§-pull-request","content":" ‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑ github ‰ª£Á†Å‰ªìÂ∫ìÈ°µÈù¢ÁÇπÂáª¬†Compare &amp; pull request¬†ÊåâÈíÆ„ÄÇÊàñÈÄöËøá¬†contribute¬†ÊåâÈíÆÂàõÂª∫„ÄÇ  Â°´ÂÜôËøôÊòØ‰ªÄ‰πàÁ±ªÂûãÁöÑ‰øÆÊîπÂ°´ÂÜôÂÖ≥ËÅîÁöÑ issueËã•ÊúâÂ§çÊùÇÂèòÊõ¥ÔºåËØ∑ËØ¥ÊòéËÉåÊôØÂíåËß£ÂÜ≥ÊñπÊ°à  Áõ∏ÂÖ≥‰ø°ÊÅØÂ°´ÂÜôÂÆåÊàêÂêéÔºåÁÇπÂáª Create pull request Êèê‰∫§„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ËΩªÊùæÊ≠•ÂÖ• Fury ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#ËΩªÊùæÊ≠•ÂÖ•-fury-ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ","content":" &quot;good first issue&quot; ÊòØ‰∏Ä‰∏™Âú®ÂºÄÊ∫êÁ§æÂå∫Â∏∏ËßÅÁöÑÊ†áÁ≠æÔºåËøô‰∏™Ê†áÁ≠æÁöÑÁõÆÁöÑÊòØÂ∏ÆÂä©Êñ∞Ë¥°ÁåÆËÄÖÊâæÂà∞ÈÄÇÂêàÂÖ•Èó®ÁöÑÈóÆÈ¢ò„ÄÇ  Fury ÁöÑÂÖ•Èó®ÈóÆÈ¢òÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá¬†issue ÂàóË°®Êü•Áúã„ÄÇ  Â¶ÇÊûú‰Ω†ÂΩìÂâçÊúâÊó∂Èó¥ÂíåÊÑèÊÑøÂèÇ‰∏éÂà∞Á§æÂå∫Ë¥°ÁåÆÔºåÂèØ‰ª•Âú® issue ÈáåÁúã‰∏ÄÁúã¬†good first issueÔºåÈÄâÊã©‰∏Ä‰∏™ÊÑüÂÖ¥Ë∂£„ÄÅÈÄÇÂêàËá™Â∑±ÁöÑËÆ§È¢Ü„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Êã•Êä± Apache Fury Á§æÂå∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Fury Á§æÂå∫","url":"/zh-CN/docs/0.10/community/how_to_join_community#Êã•Êä±-apache-fury-Á§æÂå∫","content":" Âú®‰Ω†‰∏∫ Fury Ë¥°ÁåÆ‰ª£Á†Å‰πã‰ΩôÔºåÊàë‰ª¨ÈºìÂä±‰Ω†ÂèÇ‰∏éÂÖ∂‰ªñËÆ©Á§æÂå∫Êõ¥Âä†ÁπÅËç£ÁöÑ‰∫ãÊÉÖÔºåÊØîÂ¶ÇÔºö  ‰∏∫È°πÁõÆÁöÑÂèëÂ±ï„ÄÅÂäüËÉΩËßÑÂàí Á≠âÊèêÂª∫ËÆÆ„ÄÇÂàõ‰ΩúÊñáÁ´†„ÄÅËßÜÈ¢ëÔºåÂºÄÂäûËÆ≤Â∫ßÊù•ÂÆ£‰º† Fury„ÄÇÊí∞ÂÜôÊé®ÂπøËÆ°ÂàíÔºåÂêåÂõ¢Èòü‰∏ÄÂêåÊâßË°å„ÄÇ ","version":"0.10","tagName":"h2"},{"title":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fury","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/community/how_to_verify","content":"","keywords":"","version":"0.10"},{"title":"‰∏ãËΩΩ Apache Fury‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fury","url":"/zh-CN/docs/0.10/community/how_to_verify#‰∏ãËΩΩ-apache-fury","content":" # If there is svn locally, you can clone to the local svn co https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/ # You can download the material file directly wget https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/xxx.xxx   ","version":"0.10","tagName":"h2"},{"title":"È™åËØÅ checksums Âíå signatures‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fury","url":"/zh-CN/docs/0.10/community/how_to_verify#È™åËØÅ-checksums-Âíå-signatures","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÂÆâË£Ö gpgÔºö  apt-get install gnupg # or yum install gnupg # or brew install gnupg   ‰πãÂêéÔºåÂØºÂÖ• Apache Fury release manager ÁöÑÂÖ¨Èí•Ôºö  curl https://downloads.apache.org/incubator/fury/KEYS &gt; KEYS # Download KEYS gpg --import KEYS # Import KEYS to local # Then, trust the public key: gpg --edit-key &lt;KEY-used-in-this-version&gt; # Edit the key(mentioned in vote email) # It will enter the interactive mode, use the following command to trust the key: gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; gpg&gt; trust pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: ultimate validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please note that the shown key validity is not necessarily correct unless you restart the program.   Êé•‰∏ãÊù•È™åËØÅÁ≠æÂêçÔºö  for i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done   Â¶ÇÊûúÂá∫Áé∞Â¶Ç‰∏ãÂÜÖÂÆπÔºåÂàôË°®Á§∫Á≠æÂêçÊ≠£Á°ÆÔºö  apache-fury-incubating-0.5.0-src.tar.gz gpg: Signature made Wed 17 Apr 2024 11:49:45 PM CST using RSA key ID 5E580BA4 gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Good signature from &quot;chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt;&quot;   ÁÑ∂ÂêéÈ™åËØÅ checksumÔºö  for i in *.tar.gz; do echo $i; sha512sum --check $i.sha512; done   ÂÆÉÂ∫îËØ•ËæìÂá∫Â¶Ç‰∏ãÂÜÖÂÆπÔºö  apache-fury-incubating-0.5.0-src.tar.gz apache-fury-incubating-0.5.0-src.tar.gz: OK   ","version":"0.10","tagName":"h2"},{"title":"Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fury","url":"/zh-CN/docs/0.10/community/how_to_verify#Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂","content":" Ëß£ÂéãÁº© apache-fury-${release_version}-${rc_version}-src.tar.gz Âπ∂Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  Ê≠§Â≠òÂÇ®Â∫ì LICENSE Âíå NOTICE Êñá‰ª∂ÊòØÊ≠£Á°ÆÁöÑÔºõÂ¶ÇÊúâÂøÖË¶ÅÔºåÊâÄÊúâÊñá‰ª∂ÈÉΩÊúâ ASF ËÆ∏ÂèØËØÅÊ†áÂ§¥ÔºõÈ°πÁõÆÊûÑÂª∫ÈÄöËøá„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Ê£ÄÊü• fury-java ÁöÑ Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fury","url":"/zh-CN/docs/0.10/community/how_to_verify#Ê£ÄÊü•-fury-java-ÁöÑ-maven-artifacts","content":" ‰∏ãËΩΩ Apache FuryÔºöhttps://repository.apache.org/content/repositories/orgapachefury-${maven_artifact_number}/.  ÊÇ®ÂèØ‰ª•Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  JAR ÁöÑ Checksum ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ checksum Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR ÁöÑ signature ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ signature Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR Âú®Êú¨Âú∞ÊòØÂèØÈáçÂ§çÁöÑ„ÄÇËøôÊÑèÂë≥ÁùÄÊÇ®ÂèØ‰ª•Âú®ËÆ°ÁÆóÊú∫‰∏äÊûÑÂª∫ JARÔºåÂπ∂È™åËØÅ checksum Âíå‰∏éÈ°πÁõÆÁªëÂÆöÁöÑÁõ∏Âêå„ÄÇ ","version":"0.10","tagName":"h2"},{"title":"ÂºÄÂèëÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/development","content":"","keywords":"","version":"0.10"},{"title":"Êú¨Âú∞ÊûÑÂª∫ Apache Fury‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#Êú¨Âú∞ÊûÑÂª∫-apache-fury","content":" ‰ªé Github ‰ª£Á†ÅÂ∫ì ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"ÊûÑÂª∫ Apache Fury Java‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-java","content":" cd java mvn clean compile -DskipTests   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  java 1.8+maven 3.6.3+  ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fury Python‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  python 3.6+  ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fury C++‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-c","content":" Build fury row formatÔºö  pip install pyarrow==14.0.0 bazel build //cpp/fury/row:fury_row_format   Build fury row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fury/encoder:fury_encoder   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fury GoLang‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-golang","content":" cd go/fury # run test go test -v # run xlang test go test -v fury_xlang_test.go   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  go 1.13+  ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fury Rust‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-rust","content":" cd rust # build cargo build # run test cargo test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fury JavaScript‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/development#ÊûÑÂª∫-apache-fury-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  node 14+npm 8+ ","version":"0.10","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂèëÂ∏É","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/community/how_to_release","content":"","keywords":"","version":"0.10"},{"title":"‰ªãÁªç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#‰ªãÁªç","content":" Ê∫ê‰ª£Á†ÅÂèëÂ∏ÉÊòØ Apache ÊúÄÈáçËßÜ‰ª•ÂèäÊúÄÈáçË¶ÅÁöÑÈÉ®ÂàÜ„ÄÇ  ËØ∑Ê≥®ÊÑèËÆ∏ÂèØËØÅÂíåÂèëÂ∏ÉÁöÑËΩØ‰ª∂Á≠æÂêçÈóÆÈ¢ò„ÄÇÂèëÂ∏ÉËΩØ‰ª∂ÊòØ‰∏Ä‰ª∂‰∏•ËÇÉÁöÑ‰∫ãÊÉÖÔºåÂπ∂‰ºö‰∫ßÁîüÁõ∏Â∫îÁöÑÊ≥ïÂæãÂêéÊûú„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"release manager Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#release-manager-Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É","content":" ","version":"0.10","tagName":"h2"},{"title":"ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÁéØÂ¢ÉË¶ÅÊ±Ç","content":" Ê≠§ÂèëÂ∏ÉËøáÁ®ãÂú® Ubuntu Á≥ªÁªü‰∏≠ËøêË°åÔºåÈúÄË¶Å‰ª•‰∏ãÂá†‰∏™ÁéØÂ¢É‰æùËµñÔºö  JDK 1.8+Apache Maven 3.x+Python 3.8GnuPG 2.xGitSVNÔºàApache Âü∫Èáë‰ºö‰ΩøÁî® svn Êù•ÊâòÁÆ°È°πÁõÆÂèëÂ∏ÉÔºâËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÔºöÂ¶ÇÊûúÊÇ®Âú®‰∏çÂêåÁöÑÁõÆÂΩï‰∏ãÈÖçÁΩÆ‰∫Ü gpg ÂØÜÈí•ÔºåËØ∑ÊâßË°å export GNUPGHOME=$(xxx) ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÂáÜÂ§á GPG ÂØÜÈí•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂáÜÂ§á-gpg-ÂØÜÈí•","content":" Â¶ÇÊûúÊÇ®ÊòØÁ¨¨‰∏ÄÊ¨°‰Ωú‰∏∫ËΩØ‰ª∂ÂèëÂ∏ÉËÄÖÔºåÊÇ®ÈúÄË¶ÅÂáÜÂ§á‰∏Ä‰∏™ GPG ÂØÜÈí•„ÄÇ  ÊÇ®ÂèØ‰ª•ÂèÇËÄÉËøôÈáåÁöÑÂø´ÈÄüÂºÄÂßãËé∑Âèñ‰∏Ä‰∏™ GPG ÂØÜÈí•ÊàñËÄÖËé∑ÂèñÊõ¥Â§öÁõ∏ÂÖ≥‰ø°ÊÅØ„ÄÇ  ÂÆâË£Ö GPG‚Äã  sudo apt install gnupg2   ÁîüÊàê GPG ÂØÜÈí•‚Äã  ËØ∑‰ΩøÁî®ÊÇ®ÁöÑ Apache ÂêçÂ≠óÂíåÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁîüÊàê GPG ÂØÜÈí•Ôºö  $ gpg --full-gen-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 # input 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 # input 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n years Key is valid for? (0) 0 # input 0 Key does not expire at all Is this correct? (y/N) y # input y GnuPG needs to construct a user ID to identify your key. Real name: Chaokun Yang # input your name Email address: chaokunyang@apache.org # input your email Comment: CODE SIGNING KEY # input some annotations, optional You selected this USER-ID: &quot;Chaokun &lt;chaokunyang@apache.org&gt;&quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. # Input the security key ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Please enter this passphrase ‚îÇ ‚îÇ ‚îÇ ‚îÇ Passphrase: _______________________________ ‚îÇ ‚îÇ ‚îÇ ‚îÇ &lt;OK&gt; &lt;Cancel&gt; ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò # key generation will be done after your inputting the key with the following output gpg: key E49B00F626B marked as ultimately trusted gpg: revocation certificate stored as '/Users/chaokunyang/.gnupg/openpgp-revocs.d/1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4.rev' public and secret key created and signed. pub rsa4096 2022-07-12 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] Chaokun &lt;chaokunyang@apache.org&gt; sub rsa4096 2022-07-12 [E]   ‰∏ä‰º†ÂÖ¨Èí•Ëá≥ GPG ÂØÜÈí•ÊúçÂä°Âô®‚Äã  È¶ñÂÖàÔºåÂàóÂá∫ÊÇ®ÊâÄÂàõÂª∫ÁöÑ GPG ÂØÜÈí•Ôºö  gpg --list-keys   ÊâßË°åÁõ∏ÂÖ≥ÂëΩ‰ª§‰πãÂêéÔºåÊÇ®Â∞ÜÁúãÂà∞Â¶Ç‰∏ãËæìÂá∫Ôºö  -------------------------------------------------- pub rsa4096 2024-03-27 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; sub rsa4096 2024-03-27 [E]   ÁÑ∂ÂêéÔºåÂ∞ÜÊÇ®ÁöÑÂØÜÈí• ID ÂèëÈÄÅÂà∞ÂØÜÈí•ÊúçÂä°Âô®Ôºö  gpg --keyserver keys.openpgp.org --send-key &lt;key-id&gt; # e.g., 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4   ÂÖ∂‰∏≠Ôºåkeys.openpgp.org ÊòØ‰∏Ä‰∏™ÈöèÊú∫ÈÄâÊã©ÁöÑÂØÜÈí•ÊúçÂä°Âô®ÔºåÂèØ‰ª•‰ΩøÁî® keyserver.ubuntu.com Êàñ‰ªª‰ΩïÂÖ∂‰ªñÂäüËÉΩÂÆåÂ§áÁöÑÂØÜÈí•ÊúçÂä°Âô®„ÄÇ  Ê£ÄÊü•ÂØÜÈí•ÊòØÂê¶ÂàõÂª∫ÊàêÂäü‚Äã  ‰∏ä‰º†Â§ßÁ∫¶ÈúÄË¶Å‰∏ÄÂàÜÈíüÔºõ‰πãÂêéÔºåÊÇ®ÂèØ‰ª•ÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂Âú®Áõ∏Â∫îÁöÑÂØÜÈí•ÊúçÂä°Âô®‰∏äÊ£ÄÊü•„ÄÇ  Â∞ÜÂØÜÈí•‰∏ä‰º†Âà∞ÂØÜÈí•ÊúçÂä°Âô®ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØ‰∏∫‰∫ÜÂä†ÂÖ•‰∏Ä‰∏™ÂèØ‰ø°ÁöÑ‰ø°‰ªªÁΩëÁªú„ÄÇ  Â∞Ü GPG ÂÖ¨Èí•Ê∑ªÂä†Âà∞È°πÁõÆ KEYS Êñá‰ª∂‰∏≠‚Äã  ÂèëÂ∏ÉÂàÜÊîØÁöÑ svn ‰ªìÂ∫ìÊòØÔºöhttps://dist.apache.org/repos/dist/release/incubator/fury  ËØ∑Âú®ÂèëÂ∏ÉÂàÜÊîØÁöÑ KEYS ‰∏≠Ê∑ªÂä†ÂÖ¨Èí•Ôºö  svn co https://dist.apache.org/repos/dist/release/incubator/fury fury-dist # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. cd fury-dist (gpg --list-sigs YOUR_NAME@apache.org &amp;&amp; gpg --export --armor YOUR_NAME@apache.org) &gt;&gt; KEYS # Append your key to the KEYS file svn add . # It is not needed if the KEYS document exists before. svn ci -m &quot;add gpg key for YOUR_NAME&quot; # Later on, if you are asked to enter a username and password, just use your apache username and password.   Â∞Ü GPG ÂÖ¨Èí•‰∏ä‰º†Âà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑‚Äã  ËæìÂÖ• https://github.com/settings/keys ‰ª•Ê∑ªÂä†ÊÇ®ÁöÑ GPG ÂØÜÈí•„ÄÇÂ¶ÇÊûúÊ∑ªÂä†ÂêéÂèëÁé∞‚ÄúÊú™È™åËØÅ‚ÄùÂ≠óÊ†∑ÔºåËØ∑Â∞Ü GPG ÂØÜÈí•‰∏≠‰ΩøÁî®ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁªëÂÆöÂà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑Ôºàhttps://github.com/settings/emailsÔºâ„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Âª∂‰º∏ÈòÖËØª‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Âª∂‰º∏ÈòÖËØª","content":" Âª∫ËÆÆÊÇ®Âú®ÂèëÂ∏É‰πãÂâçÈòÖËØª‰ª•‰∏ãÊñáÊ°£Ôºå‰∫ÜËß£ÊúâÂÖ≥ Apache Âü∫Èáë‰ºöÂèëÂ∏ÉËΩØ‰ª∂ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºå‰ΩÜËøô‰∏çÊòØÂøÖÈ°ªÁöÑÔºö  ÂèëÂ∏ÉÊîøÁ≠ñÔºöhttps://www.apache.org/legal/release-policy.htmlTLP ÁâàÊú¨Ôºöhttps://infra.apache.org/release-distributionÂèëÂ∏ÉÊ†áÂøóÔºöhttps://infra.apache.org/release-signing.htmlÂèëÂ∏ÉÂèëÂ∏ÉÔºöhttps://infra.apache.org/release-publishing.htmlÂèëÂ∏É‰∏ãËΩΩÈ°µÈù¢Ôºöhttps://infra.apache.org/release-download-pages.htmlÂèëÂ∏É maven artifactsÔºöhttps://infra.apache.org/publishing-maven-artifacts.html  ","version":"0.10","tagName":"h3"},{"title":"ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫","content":" ÈÄöËøáÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥‰ª•‰∏ãÂú∞ÂùÄÂèëËµ∑ÊúâÂÖ≥‰∏ã‰∏Ä‰∏™ÁâàÊú¨ÁöÑËÆ®ËÆ∫Ôºödev@fury.apache.orgÔºö  Ê†áÈ¢òÔºö  [DISCUSS] Release Apache Fury(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fury(incubating) Community, This is a call for a discussion to release Apache Fury(incubating) version ${release_version}. The change lists about this release: https://github.com/apache/fury/compare/v0.4.1...v0.5.0 Please leave your comments here about this release plan. We will bump the version in repo and start the release process after the discussion. Thanks, ${name}   ","version":"0.10","tagName":"h2"},{"title":"ÂáÜÂ§áÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂáÜÂ§áÂèëÂ∏É","content":" Â¶ÇÊûúËÆ®ËÆ∫ÁªìÊûú‰∏≠Ê≤°ÊúâÂá∫Áé∞ÂèçÂØπÂ£∞Èü≥ÔºåÊÇ®ÈúÄË¶ÅÂÅö‰∏Ä‰∫õÂèëÂ∏ÉÁâàÊú¨ÁöÑÂáÜÂ§áÂ∑•‰Ωú„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Github ÂàÜÊîØÂíåÊ†áÁ≠æ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#github-ÂàÜÊîØÂíåÊ†áÁ≠æ","content":" ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ releases-0.5.0ÈÄöËøáÊâßË°åÂëΩ‰ª§Â∞ÜÁâàÊú¨ $version ÂçáÁ∫ßÂà∞ python ci/release.py bump_version -l all -version $versionÊâßË°å git commit Âπ∂Â∞ÜÂàÜÊîØÊé®ÈÄÅÂà∞ git@github.com:apache/fury.gitÈÄöËøá git tag v0.5.0-rc1 ÂàõÂª∫‰∏Ä‰∏™Êñ∞Ê†áÁ≠æÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂Êé®ÈÄÅÂà∞ git@github.com:apache/fury.git  ","version":"0.10","tagName":"h3"},{"title":"ÊûÑÂª∫ artifacts Âπ∂‰∏ä‰º†Âà∞ SVN dist/dev ‰ªìÂ∫ì‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÊûÑÂª∫-artifacts-Âπ∂‰∏ä‰º†Âà∞-svn-distdev-‰ªìÂ∫ì","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÈÄöËøá python ci/release.py build -v $version ÊûÑÂª∫È¢ÑÂèëÂ∏É artifacts„ÄÇ  ÁÑ∂ÂêéÊÇ®ÈúÄË¶ÅÊääÂÆÉ‰∏ä‰º†Âà∞ svn dist repo„ÄÇdev ÂàÜÊîØÁöÑ dist ‰ªìÂ∫ìÂú∞ÂùÄÊòØÔºöhttps://dist.apache.org/repos/dist/dev/incubator/fury  # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. svn co https://dist.apache.org/repos/dist/dev/incubator/fury fury-dist-dev   ÁÑ∂ÂêéÔºå‰∏ä‰º†È°πÁõÆÔºö  cd fury-dist-dev # create a directory named by version mkdir ${release_version}-${rc_version} # copy source code and signature package to the versioned directory cp ${repo_dir}/dist/* ${release_version}-${rc_version} # check svn status svn status # add to svn svn add ${release_version}-${rc_version} # check svn status svn status # commit to SVN remote server svn commit -m &quot;Prepare for fury ${release_version}-${rc_version}&quot;   ËÆøÈóÆ https://dist.apache.org/repos/dist/dev/incubator/fury/ ‰ª•Ê£ÄÊü• artifacts ÊòØÂê¶Ê≠£Á°Æ‰∏ä‰º†„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊüê‰∫õÊñá‰ª∂ÊòØÊÑèÂ§ñÂá∫Áé∞ÊàñËÄÖÂèëÁîüÊüê‰∫õÈîôËØØÔºåÂàôÈúÄË¶ÅÂà†Èô§Áõ∏ÂÖ≥ÂÜÖÂÆπÂπ∂ÊâßË°å svn deleteÔºåÁÑ∂ÂêéÈáçÂ§ç‰∏äËø∞‰∏ä‰º†ËøáÁ®ã„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÊäïÁ•®","content":" ‰Ωú‰∏∫‰∏Ä‰∏™Â≠µÂåñÈ°πÁõÆÔºåÊñ∞ÁâàÊú¨ÂèëÂ∏ÉÈúÄË¶Å Apache Fury Á§æÂå∫ÂíåÂ≠µÂåñÂô®Á§æÂå∫ÁöÑÊäïÁ•®„ÄÇ  release_versionÔºöFury ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0„ÄÇrelease_candidate_versionÔºöÊäïÁ•®ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1„ÄÇmaven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001. ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂèØ‰ª•ÈÄöËøáÊêúÁ¥¢ ‚Äúfury‚Äù Êù•ÊâæÂà∞ maven_artifact_number https://repository.apache.org/#stagingRepositories.  ","version":"0.10","tagName":"h2"},{"title":"Fury Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#fury-Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ Fury CommunityÔºödev@fury.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fury(incubating) Community: This is a call for vote to release Apache Fury(Incubating) version release-0.5.0-rc3. Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The change lists about this release: https://github.com/apache/fury/compare/v0.4.1...v0.5.0-rc3 The release candidates: https://dist.apache.org/repos/dist/dev/incubator/fury/0.5.0-rc3/ The maven staging for this release: https://repository.apache.org/content/repositories/orgapachefury-1003 Git tag for the release: https://github.com/apache/fury/releases/tag/v0.5.0-rc3 Git commit for the release: https://github.com/apache/fury/commit/fae06330edd049bb960536e978a45b97bca66faf The artifacts signed with PGP key [5E580BA4], corresponding to [chaokunyang@apache.org], that can be found in keys file: https://downloads.apache.org/incubator/fury/KEYS The vote will be open for at least 72 hours until the necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about Fury, please see https://fury.apache.org/ *Valid check is a requirement for a vote. *Checklist for reference: [ ] Download Fury is valid. [ ] Checksums and PGP signatures are valid. [ ] Source code distributions have correct names matching the current release. [ ] LICENSE and NOTICE files are correct. [ ] All files have license headers if necessary. [ ] No compiled archives bundled in source archive. [ ] Can compile from source. More detail checklist please refer: https://cwiki.apache.org/confluence/display/INCUBATOR/Incubator+Release+Checklist How to Build and Test, please refer to: https://github.com/apache/fury/blob/main/docs/guide/DEVELOPMENT.md Thanks, Chaokun Yang   Âú®Ëá≥Â∞ëËé∑Âæó 3 + 1 ‰∏îÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™ Fury Podling PMC ÊàêÂëòÂíåÊèê‰∫§ËÄÖÔºâÂπ∂Ê≤°ÊúâÊî∂Âà∞Âê¶ÂÜ≥Á•®‰πãÂêéÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fury(incubating) Community, The vote to release Apache Fury(Incubating) v${release_version}-${rc_version} has passed. The vote PASSED with 3 binding +1 and 0 -1 vote: Binding votes: - xxx - yyy - zzz Vote thread: ${vote_thread_url} Thanks, ${name}   ","version":"0.10","tagName":"h3"},{"title":"Â≠µÂåñÂô®Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Â≠µÂåñÂô®Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥Ôºögeneral@incubator.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello everyone, This is a call for the vote to release Apache Fury(Incubating) v${release_version}-${rc_version}. The Apache Fury community has voted and approved the release of Apache Fury(incubating) v${release_version}-${rc_version}. We now kindly request the IPMC members review and vote for this release. Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. Fury community vote thread: ${community_vote_thread_url} Vote result thread: ${community_vote_result_thread_url} The release candidate: https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/ This release has been signed with a PGP available here: https://downloads.apache.org/incubator/fury/KEYS Git tag for the release: https://github.com/apache/fury/releases/tag/v${release_version}-${rc_version}/ Git commit for the release: https://github.com/apache/fury/commit/$xxx Maven staging repo: https://repository.apache.org/content/repositories/orgapachefury-${maven_artifact_number}/ How to Build and Test, please refer to: https://github.com/apache/fury/blob/main/docs/guide/DEVELOPMENT.md Please download, verify, and test. The VOTE will pass after 3 binding approve. [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about apache fury, please see https://fury.apache.org/ Checklist for reference: [ ] Download links are valid. [ ] Checksums and signatures. [ ] LICENSE/NOTICE files exist [ ] No unexpected binary files [ ] All source files have ASF headers [ ] Can compile from source Thanks, ${name}   Ëá≥Â∞ë 72 Â∞èÊó∂ÂêéÔºåËá≥Â∞ëÊúâ 3 + 1 ÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™Â≠µÂåñÂô® PMC ÊàêÂëòÔºâ‰∏îÊ≤°ÊúâÂê¶ÂÜ≥Á•®ÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hi Incubator PMC, The vote to release Apache Fury(incubating) v${release_version}-${rc_version} has passed with 4 +1 binding and 3 +1 non-binding votes, no +0 or -1 votes. Binding votesÔºö - xxx - yyy - zzz Non-Binding votes: - aaa Vote thread: ${incubator_vote_thread_url} Thanks for reviewing and voting for our release candidate. We will proceed with publishing the approved artifacts and sending out the announcement soon.   ","version":"0.10","tagName":"h3"},{"title":"Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÔºåËØ∑ÂçïÂáª‚ÄúÂà†Èô§‚Äù‰ª•Âà†Èô§ÊöÇÂ≠òÁöÑ Maven artifacts„ÄÇ  Ëß£ÂÜ≥ÊèêÂá∫ÁöÑÈóÆÈ¢òÔºåÁÑ∂ÂêéÂÜçÊ¨°ÊèêÂá∫ rc_version ÁöÑÊñ∞ÊäïÁ•®„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÂÆòÊñπÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂÆòÊñπÂèëÂ∏É","content":" ","version":"0.10","tagName":"h2"},{"title":"Â∞Ü artifacts ÂèëÂ∏ÉÂà∞ SVN ÂèëÂ∏ÉÁõÆÂΩï‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Â∞Ü-artifacts-ÂèëÂ∏ÉÂà∞-svn-ÂèëÂ∏ÉÁõÆÂΩï","content":" release_versionÔºöFury ÁöÑÂèëÂ∏ÉÁâàÊú¨ÔºåÂ¶Ç 0.5.0release_candidate_versionÔºöÊäïÁ•®ÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1  svn mv https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version} https://dist.apache.org/repos/dist/release/incubator/fury/${release_version} -m &quot;Release fury ${release_version}&quot;   ","version":"0.10","tagName":"h3"},{"title":"Êõ¥Êîπ Fury ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#Êõ¥Êîπ-fury-ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•","content":" Êèê‰∫§ PR Âà∞ https://github.com/apache/fury-site ‰ªìÂ∫ìÊõ¥Êñ∞ Fury ÁâàÊú¨Ôºå‰∏ãËΩΩÈ°µÈù¢  ","version":"0.10","tagName":"h3"},{"title":"ÂèëÂ∏É Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂèëÂ∏É-maven-artifacts","content":" maven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001„ÄÇÊâìÂºÄhttps://repository.apache.org/#stagingRepositories.ÊâæÂà∞ artifacts orgapachefury-${maven_artifact_number}ÔºåÁÇπÂáª‚ÄúÂèëÂ∏É‚Äù„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÂèëÈÄÅÂÖ¨Âëä‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.10/community/how_to_release#ÂèëÈÄÅÂÖ¨Âëä","content":" Â∞ÜÂèëÂ∏ÉÂÖ¨ÂëäÂèëÈÄÅÁªô dev@fury.apache.org Âπ∂‰∏îÊäÑÈÄÅÁªô announce@apache.org„ÄÇ  Ê†áÈ¢òÔºö  [ANNOUNCE] Release Apache Fury(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hi all, The Apache Fury(incubating) community is pleased to announce that Apache Fury(incubating) {release_version} has been released! Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The release notes are available here: https://github.com/apache/fury/releases/tag/v${release_version} For the complete list of changes: https://github.com/apache/fury/compare/v0.5.0...v${release_version} Apache Fury website: https://fury.apache.org/ Download Links: https://fury.apache.org/download Fury Resources: - Fury github repo: https://github.com/apache/fury - Issue: https://github.com/apache/fury/issues - Mailing list: dev@fury.apache.org We are looking to grow our community and welcome new contributors. If you are interested in contributing to Fury, please contact us on the mailing list or on GitHub. We will be happy to help you get started. ------------------ Best Regards, ${your_name}   Ëá≥Ê≠§ÔºåÊï¥‰∏™ÂèëÂ∏ÉÊµÅÁ®ãÁªìÊùü„ÄÇ ","version":"0.10","tagName":"h3"},{"title":"GraalVM ÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide","content":"","keywords":"","version":"0.10"},{"title":"GraalVM Native Image ‰ªãÁªç‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#graalvm-native-image-‰ªãÁªç","content":" GraalVM Native Image ËÉΩÂ§üÂ∞Ü Java Â∫îÁî®‰ª£Á†ÅÁºñËØëÊàê‰∏∫ÂéüÁîüÁöÑÊú¨Âú∞Â∫îÁî®Á®ãÂ∫è‰ª£Á†ÅÔºå‰ª•ÊûÑÂª∫Êõ¥Âø´„ÄÅÊõ¥Â∞è„ÄÅÊõ¥Á≤æÁÆÄÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ ÂÖ∂‰∏çËÉΩ‰ΩøÁî® JIT ÁºñËØëÂô®Â∞ÜÂ≠óËäÇÁ†ÅÁºñËØë‰∏∫Êú∫Âô®Á†ÅÔºåÂπ∂‰∏îÂú®Ê≤°ÊúâÈÖçÁΩÆÁõ∏ÂÖ≥ÂèçÂ∞ÑÊñá‰ª∂ÁöÑÂâçÊèê‰∏ã‰∏çÊîØÊåÅÂèçÂ∞ÑÔºåÂú®ÂæàÂ§öÊÉÖÂÜµ‰∏ã‰ΩøÁî®ËæÉ‰∏∫Â§çÊùÇ„ÄÇ  Apache Fury ÂØπ GraalVM Native Image ÊîØÊåÅÈùûÂ∏∏ÂÆåÂñÑ„ÄÇApache Fury Âú® Graalvm ÊûÑÂª∫Êó∂ËÉΩÂ§ü‰∏∫ Fury JIT framework Âíå MethodHandle/LambdaMetafactory ÁîüÊàêÊâÄÊúâÁöÑÂ∫èÂàóÂåñ‰ª£Á†Å„ÄÇÁÑ∂ÂêéÂú®ËøêË°åÊó∂‰ΩøÁî®Ëøô‰∫õÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂ∫èÂàóÂåñÔºåÊó†ÈúÄ‰ªª‰ΩïÈ¢ùÂ§ñÊàêÊú¨ÔºåÊÄßËÉΩÈùûÂ∏∏Âá∫Ëâ≤„ÄÇ  ‰∏∫‰∫ÜÂú® Graalvm Native Images ‰∏ä‰ΩøÁî® FuryÔºåÊÇ®ÂøÖÈ°ªÂ∞Ü Apache Fury ÂàõÂª∫‰∏∫ÈùôÊÄÅÁöÑÁ±ªÂ≠óÊÆµÔºåÂπ∂‰∏îÂú® enclosing class ÂàùÂßãÂåñÊó∂Èó¥ÊúüÈó¥ÂÆåÊàêÊâÄÊúâÁöÑÁ±ªÊ≥®ÂÜå„ÄÇ ÁÑ∂ÂêéÂú®resources/META-INF/native-image/$xxx/ ÁõÆÂΩï‰∏ãÊ∑ªÂä† native-image.properties ÈÖçÁΩÆÊñá‰ª∂„ÄÇÊåáÂØº GraalVM Âú®ÊûÑÂª∫ Native Images Êó∂ÂàùÂßãÂåñÈÖçÁΩÆÁöÑÁ±ª„ÄÇ  ‰æãÂ¶ÇÔºåËøôÈáåÊàë‰ª¨Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠Âä†ÂÖ• org.apache.fury.graalvm.Example Á±ªÔºö  Args = --initialize-at-build-time=org.apache.fury.graalvm.Example   ‰ΩøÁî® Apache Fury ÁöÑÂè¶‰∏Ä‰∏™Â•ΩÂ§ÑÊòØÔºåÊÇ®‰∏çÂøÖÈÖçÁΩÆÂèçÂ∞Ñ JSONÂíåÂ∫èÂàóÂåñ JSONÔºåËøôÈùûÂ∏∏‰πèÂë≥„ÄÅÁπÅÁêê‰∏î‰∏çÊñπ‰æø„ÄÇ‰ΩøÁî® Apache Fury Êó∂ÔºåÊÇ®Âè™ÈúÄ‰∏∫Ë¶ÅÂ∫èÂàóÂåñÁöÑÊØè‰∏™Á±ªÂûãË∞ÉÁî® org.apache.fury.Fury.register(Class&lt;?&gt;, boolean) Âç≥ÂèØ„ÄÇ  ËØ∑Ê≥®ÊÑèÔºåÁî±‰∫é GraalVM Native Image Âú®ÈïúÂÉèËøêË°åÊó∂‰∏çÊîØÊåÅ JITÔºåÂõ†Ê≠§ Apache Fury ÁöÑ asyncCompilationEnabled ÈÄâÈ°πÂ∞ÜÂú®‰ΩøÁî® GraalVM Native Image ÊûÑÂª∫Â∫îÁî®Êó∂Ëá™Âä®Á¶ÅÁî®„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Á∫øÁ®ã‰∏çÂÆâÂÖ®‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#Á∫øÁ®ã‰∏çÂÆâÂÖ®","content":" ExampleÔºö  import org.apache.fury.Fury; import org.apache.fury.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fury fury; static { fury = Fury.builder().build(); // register and generate serializer code. fury.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fury.serialize(record); Object o = fury.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   ‰πãÂêéÂú® native-image.properties ‰∏≠Âä†ÂÖ• org.apache.fury.graalvm.Example ÈÖçÁΩÆÔºö  Args = --initialize-at-build-time=org.apache.fury.graalvm.Example   ","version":"0.10","tagName":"h2"},{"title":"Á∫øÁ®ãÂÆâÂÖ®‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#Á∫øÁ®ãÂÆâÂÖ®","content":" import org.apache.fury.Fury; import org.apache.fury.ThreadLocalFury; import org.apache.fury.ThreadSafeFury; import org.apache.fury.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFury fury; static { fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().build(); // register and generate serializer code. f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fury.deserialize(fury.serialize(&quot;abc&quot;))); System.out.println(fury.deserialize(fury.serialize(List.of(1,2,3)))); System.out.println(fury.deserialize(fury.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fury.serialize(foo); Object o = fury.deserialize(bytes); System.out.println(o); } }   ‰πãÂêéÂú® native-image.properties ‰∏≠Âä†ÂÖ• org.apache.fury.graalvm.ThreadSafeExample ÈÖçÁΩÆÔºö  Args = --initialize-at-build-time=org.apache.fury.graalvm.ThreadSafeExample   ","version":"0.10","tagName":"h2"},{"title":"Ê°ÜÊû∂ÈõÜÊàê‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#Ê°ÜÊû∂ÈõÜÊàê","content":" ÂØπ‰∫éÊ°ÜÊû∂ÂºÄÂèë‰∫∫ÂëòÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥ÈõÜÊàê Apache Fury ËøõË°åÂ∫èÂàóÂåñ„ÄÇÊÇ®ÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºåËÆ©Áî®Êà∑ÂàóÂá∫‰ªñ‰ª¨ÊÉ≥Ë¶ÅÂ∫èÂàóÂåñÁöÑÊâÄÊúâÁ±ªÔºåÁÑ∂ÂêéÊÇ®ÂèØ‰ª•Âä†ËΩΩËøô‰∫õÁ±ªÂπ∂Ë∞ÉÁî® org.apache.fury.Fury.register(Class&lt;?&gt;, boolean) Âú®ÊÇ®ÁöÑ Fury ÈõÜÊàêÁ±ª‰∏≠Ê≥®ÂÜåËøô‰∫õÁ±ªÔºåÂπ∂ÈÖçÁΩÆËØ•Á±ªÂú® GraalVM Native Image ÊûÑÂª∫Êó∂ËøõË°åÂàùÂßãÂåñ„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#Âü∫ÂáÜÊµãËØï","content":" Âú®ËøôÈáåÔºåÊàë‰ª¨ÁªôÂá∫‰∫Ü Apache Fury Âíå Graalvm Â∫èÂàóÂåñ‰πãÈó¥ÁöÑ‰∏§‰∏™Á±ªÂü∫ÂáÜÊµãËØï„ÄÇ  Á¶ÅÁî® Apache Fury compression Êó∂Ôºö  StructÔºöFury ‰∏é 46x speed, 43% size JDK ËøõË°åÊØîËæÉ„ÄÇPojoÔºöFury ‰∏é 12x speed, 56% size JDKËøõË°åÊØîËæÉ„ÄÇ  ÂêØÁî® Apache Fury compression Êó∂Ôºö  StructÔºöFury ‰∏é 24x speed, 31% size JDKËøõË°åÊØîËæÉ„ÄÇPojoÔºöFury ‰∏é 12x speed, 48% size JDKËøõË°åÊØîËæÉ„ÄÇ  ÊúâÂÖ≥Âü∫ÂáÜÊµãËØï‰ª£Á†ÅÔºåËØ∑ÂèÇÈòÖ Benchmark.java„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"ÁªìÊûÑ‰ΩìÂü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#ÁªìÊûÑ‰ΩìÂü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Âü∫ÂáÜÊµãËØïÁªìÊûú‚Äã  ‰∏çÂºÄÂêØÂéãÁº©Êó∂ÊµãËØïÁªìÊûúÔºö  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Struct Compress number: false Fury size: 76.0 JDK size: 178.0 Fury serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fury is 45.70x speed of JDK Compare size: Fury is 0.43x size of JDK   ÂºÄÂêØÂéãÁº©Êó∂ÊµãËØïÁªìÊûúÔºö  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Struct Compress number: true Fury size: 55.0 JDK size: 178.0 Fury serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fury is 24.16x speed of JDK Compare size: Fury is 0.31x size of JDK   ","version":"0.10","tagName":"h3"},{"title":"Pojo Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/graalvm_guide#pojo-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Âü∫ÂáÜÊµãËØïÁªìÊûú‚Äã  ‰∏çÂºÄÂêØÂéãÁº©Êó∂ÊµãËØïÁªìÊûúÔºö  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Foo Compress number: false Fury size: 541.0 JDK size: 964.0 Fury serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fury is 12.19x speed of JDK Compare size: Fury is 0.56x size of JDK   ÂºÄÂêØÂéãÁº©Êó∂ÊµãËØïÁªìÊûúÔºö  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Foo Compress number: true Fury size: 459.0 JDK size: 964.0 Fury serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fury is 12.11x speed of JDK Compare size: Fury is 0.48x size of JDK  ","version":"0.10","tagName":"h3"},{"title":"Row format ÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/row_format_guide","content":"","keywords":"","version":"0.10"},{"title":"Row format protocol‚Äã","type":1,"pageTitle":"Row format ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/row_format_guide#row-format-protocol","content":" ","version":"0.10","tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Row format ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // Can be zero-copy read by python BinaryRow binaryRow = encoder.toRow(foo); // can be data from python Foo newFoo = encoder.fromRow(binaryRow); // zero-copy read List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // zero-copy read List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // zero-copy read 11th element of `readList&lt;Bar&gt; f4` BinaryRow barStruct = binaryArray4.getStruct(10); // zero-copy read 6th of f2 of 11th element of `readList&lt;Bar&gt; f4` barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // deserialize part of data. Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"0.10","tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Row format ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfury.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfury.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"0.10","tagName":"h3"},{"title":"Apache Arrow ÊîØÊåÅ‚Äã","type":1,"pageTitle":"Row format ÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/row_format_guide#apache-arrow-ÊîØÊåÅ","content":" Apache Fury Format ËøòÊîØÊåÅ‰ªé Arrow Table/RecordBatch Ëá™Âä®ËΩ¨Êç¢„ÄÇ  JavaÔºö  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   PythonÔºö  import pyfury encoder = pyfury.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++:  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"0.10","tagName":"h3"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÁöÑÁ±ªÂûãÊò†Â∞Ñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"0.10"},{"title":"Type Mapping‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÁöÑÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.10/docs/guide/xlang_type_mapping#type-mapping","content":" Fury Á±ªÂûã\tFury Á±ªÂûã ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfury.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfury.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfury.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfury.VarInt32\tType.varint32()\tfury::varint32_t\tfury.varint32\tfury::varint32 int64\t6\tlong/Long\tint/pyfury.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfury.VarInt64\tType.varint64()\tfury::varint64_t\tfury.varint64\tfury::varint64 sli_int64\t8\tlong/Long\tint/pyfury.SliInt64\tType.sliint64()\tfury::sliint64_t\tfury.sliint64\tfury::sliint64 float16\t9\tfloat/Float\tfloat/pyfury.Float16\tType.float16()\tfury::float16_t\tfury.float16\tfury::f16 float32\t10\tfloat/Float\tfloat/pyfury.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfury.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum list\t14\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t15\tSet\tset\t/\tset\tfury.Set\tSet map\t16\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t17\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t18\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t19\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t20\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t21\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t22\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t23\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t24\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t25\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t26\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t27\tfloat[]\tndarray(float16)\t/\tfury::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fury::f16&gt; float32_array\t28\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t29\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; tensor\t30\t/\t/\t/\t/\t/\t/ sparse tensor\t31\t/\t/\t/\t/\t/\t/ arrow record batch\t32\t/\t/\t/\t/\t/\t/ arrow table\t33\t/\t/\t/\t/\t/\t/  ","version":"0.10","tagName":"h2"},{"title":"Á±ªÂûã‰ø°ÊÅØÔºàÁõÆÂâçÂ∞öÊú™ÂÆûÁé∞Ôºâ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÁöÑÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.10/docs/guide/xlang_type_mapping#Á±ªÂûã‰ø°ÊÅØÁõÆÂâçÂ∞öÊú™ÂÆûÁé∞","content":" Áî±‰∫éËØ≠Ë®ÄÁ±ªÂûãÁ≥ªÁªü‰πãÈó¥ÁöÑÂ∑ÆÂºÇÔºåËøô‰∫õÁ±ªÂûãÊó†Ê≥ïÂú®ËØ≠Ë®Ä‰πãÈó¥‰∏ÄÂØπ‰∏ÄÂú∞Êò†Â∞Ñ„ÄÇ  Â¶ÇÊûúÁî®Êà∑ÁúãÂà∞‰∏ÄÁßçËØ≠Ë®Ä‰∏≠ÁöÑ‰∏ÄÁßçÁ±ªÂûãÂØπÂ∫î Apache Fury Á±ªÂûãÁ≥ªÁªü‰∏≠ÁöÑÂ§öÁßçÁ±ªÂûã„ÄÇ  ‰æãÂ¶ÇÔºöjava ‰∏≠ÁöÑ long Á±ªÂûãÂØπÂ∫î int64/varint64/sliint64 Á±ªÂûã„ÄÇÁ±ªÂûã‰∏∫ int64/varint64/sliint64 ËøôÊÑèÂë≥ÁùÄËØ•ËØ≠Ë®ÄÁº∫Â∞ëÊüê‰∫õÁ±ªÂûãÔºåÁî®Êà∑Âú®‰ΩøÁî® Fury Êó∂ÂøÖÈ°ªÊèê‰æõÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Á±ªÂûãÊ≥®Ëß£‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÁöÑÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.10/docs/guide/xlang_type_mapping#Á±ªÂûãÊ≥®Ëß£","content":" Â¶ÇÊûúÁ±ªÂûãÊòØÂè¶‰∏Ä‰∏™Á±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂèØ‰ª•‰∏∫Á±ªÂûãÁöÑÂ≠óÊÆµÊàñÊï¥‰∏™Á±ªÂûãÊèê‰æõ meta hints„ÄÇ Ëøô‰∫õ‰ø°ÊÅØ‰πüÂèØ‰ª•Áî®ÂÖ∂‰ªñËØ≠Ë®ÄÊèê‰æõÔºö  javaÔºö‰ΩøÁî®Ê≥®Ëß£ÔºõcppÔºö‰ΩøÁî®ÂÆèÂíåÊ®°ÊùøÔºõgolangÔºö‰ΩøÁî® struct tagÔºõpython: ‰ΩøÁî® typehintÔºõrustÔºö‰ΩøÁî®ÂÆè„ÄÇ  ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™‰æãÂ≠êÔºö  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"0.10","tagName":"h3"},{"title":"Á±ªÂûãÂåÖË£ÖÂô®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÁöÑÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.10/docs/guide/xlang_type_mapping#Á±ªÂûãÂåÖË£ÖÂô®","content":" Â¶ÇÊûúÁ±ªÂûã‰∏çÊòØÁ±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂøÖÈ°ªÁî® Fury Á±ªÂûãÊù•ÂåÖË£ÖËØ•Á±ªÂûãÔºå‰ª•‰º†ÈÄíÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ‰æãÂ¶ÇÔºöÂÅáËÆæ Apache Fury Java Êèê‰æõ‰∫Ü VarInt64 Á±ªÂûãÔºåÂΩìÁî®Êà∑Ë∞ÉÁî® fury.serialize(long_value) Êó∂ÔºåÈúÄË¶ÅÂÉè‰∏ãÈù¢ËøôÊ†∑Ë∞ÉÁî® Ë∞ÉÁî® fury.serialize(new VarInt64(long_value))„ÄÇ ","version":"0.10","tagName":"h2"},{"title":"Scala Â∫èÂàóÂåñÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/scala_guide","content":"","keywords":"","version":"0.10"},{"title":"ÂÆâË£Ö‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#ÂÆâË£Ö","content":" libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-core&quot; % &quot;0.7.1&quot;   ","version":"0.10","tagName":"h2"},{"title":"Fury ÂØπË±°ÂàõÂª∫‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#fury-ÂØπË±°ÂàõÂª∫","content":" ÂΩì‰ΩøÁî® Apache Fury ËøõË°å Scala Â∫èÂàóÂåñÊó∂ÔºåÊÇ®Â∫îËØ•Ëá≥Â∞ë‰ΩøÁî®‰ª•‰∏ãÈÄâÈ°πÂàõÂª∫ Fury ÂØπË±°Ôºö  val fury = Fury.builder() .withScalaOptimizationEnabled(true) .requireClassRegistration(true) .withRefTracking(true) .build()   Ê†πÊçÆÊÇ®Â∫èÂàóÂåñÁöÑÂØπË±°Á±ªÂûãÔºåÊÇ®ÂèØËÉΩÈúÄË¶ÅÊ≥®ÂÜå‰∏Ä‰∫õ Scala ÁöÑÂÜÖÈÉ®Á±ªÂûãÔºö  fury.register(Class.forName(&quot;scala.collection.generic.DefaultSerializationProxy&quot;)) fury.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   Â¶ÇÊûúË¶ÅÈÅøÂÖçÊ≠§Á±ªÊ≥®ÂÜåÔºåÂèØ‰ª•ÈÄöËøáÁ¶ÅÁî®Á±ª FuryBuilder#requireClassRegistration(false) Êù•ÂÆåÊàê„ÄÇ  ËØ∑Ê≥®ÊÑèÔºöÊ≠§ÈÄâÈ°πÂèØ‰ª•ÂèçÂ∫èÂàóÂåñÊú™Áü•ÁöÑÂØπË±°Á±ªÂûãÔºå‰ΩøÁî®Êõ¥ÁÅµÊ¥ª„ÄÇ‰ΩÜÂ¶ÇÊûúÁ±ªÂåÖÂê´‰ªª‰ΩïÁöÑÊÅ∂ÊÑè‰ª£Á†ÅÔºå‰ºöÊúâÂÆâÂÖ®È£éÈô©„ÄÇ  Âæ™ÁéØÂºïÁî®Âú® Scala ‰∏≠ÂæàÂ∏∏ËßÅÔºåReference tracking Â∫îËØ•Áî± FuryBuilder#withRefTracking(true) ÈÖçÁΩÆÈÄâÈ°πÂºÄÂêØ„ÄÇÂ¶ÇÊûú‰∏çÂêØÁî® Reference trackingÔºåÂàôÂú®Â∫èÂàóÂåñ Scala Enumeration Êó∂ÔºåÊüê‰∫õ Scala ÁâàÊú¨ÂèØËÉΩ‰ºöÂèëÁîü StackOverflowError ÈîôËØØ„ÄÇ  Ê≥®ÊÑèÔºöFury ÂÆû‰æãÂ∫îËØ•Âú®Â§ö‰∏™Â∫èÂàóÂåñ‰πãÈó¥ÂÖ±‰∫´ÔºåÂàõÂª∫ Fury ÂÆû‰æãÂºÄÈîÄÂæàÂ§ßÔºåÂ∫îËØ•Â∞ΩÈáèÂ§çÁî®„ÄÇ  Â¶ÇÊûúÊÇ®Âú®Â§ö‰∏™Á∫øÁ®ã‰∏≠‰ΩøÁî®ÂÖ±‰∫´ÁöÑ Fury ÂÆû‰æãÔºåÊÇ®Â∫îËØ•‰ΩøÁî® ThreadSafeFury ‰ª£Êõø FuryBuilder#buildThreadSafeFury()„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñ case ÂØπË±°‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñ-case-ÂØπË±°","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fury.deserialize(fury.serialize(p))) println(fury.deserializeJavaObject(fury.serializeJavaObject(p)))   ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñ pojo‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñ-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fury.deserialize(fury.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂØπË±°Âçï‰æã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñÂØπË±°Âçï‰æã","content":" object singleton { } val o1 = fury.deserialize(fury.serialize(singleton)) val o2 = fury.deserialize(fury.serialize(singleton)) println(o1 == o2)   ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñÈõÜÂêà‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñÈõÜÂêà","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fury.deserialize(fury.serialize(seq))) println(fury.deserialize(fury.serialize(list))) println(fury.deserialize(fury.serialize(map)))   ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÖÉÁªÑ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñÂÖÉÁªÑ","content":" val tuple = Tuple2(100, 10000L) println(fury.deserialize(fury.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fury.deserialize(fury.serialize(tuple)))   ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñÊûö‰∏æ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñÊûö‰∏æ","content":" ","version":"0.10","tagName":"h2"},{"title":"Scala3 Êûö‰∏æ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#scala3-Êûö‰∏æ","content":" enum Color { case Red, Green, Blue } println(fury.deserialize(fury.serialize(Color.Green)))   ","version":"0.10","tagName":"h3"},{"title":"Scala2 Êûö‰∏æ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#scala2-Êûö‰∏æ","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fury.deserialize(fury.serialize(ColorEnum.Green)))   ","version":"0.10","tagName":"h3"},{"title":"Â∫èÂàóÂåñ Option Á±ªÂûã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#Â∫èÂàóÂåñ-option-Á±ªÂûã","content":" val opt: Option[Long] = Some(100) println(fury.deserialize(fury.serialize(opt))) val opt1: Option[Long] = None println(fury.deserialize(fury.serialize(opt1)))   ","version":"0.10","tagName":"h2"},{"title":"ÊÄßËÉΩ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/scala_guide#ÊÄßËÉΩ","content":" pojo/bean/case/object Scala ÂØπ Apache Fury JIT ÁöÑÊîØÊåÅÂæàÂ•ΩÔºåÊÄßËÉΩ‰∏é Apache Fury Java ‰∏ÄÊ†∑‰ºòÂºÇ„ÄÇ  Scala ÈõÜÂêàÂíåÊ≥õÂûã‰∏çÈÅµÂæ™ Java ÈõÜÂêàÊ°ÜÊû∂ÔºåÂπ∂‰∏îÊú™‰∏éÂΩìÂâçÂèëË°åÁâà‰∏≠ÁöÑ Apache Fury JIT ÂÆåÂÖ®ÈõÜÊàê„ÄÇÊÄßËÉΩ‰∏ç‰ºöÂÉè Java ÁöÑ Fury collections Â∫èÂàóÂåñÈÇ£‰πàÂ•Ω„ÄÇ  scala ÈõÜÂêàÁöÑÊâßË°åÂ∞ÜË∞ÉÁî® Java Â∫èÂàóÂåñ API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable Âíå Fury ObjectStream ÂÆûÁé∞„ÄÇËôΩÁÑ∂ org.apache.fury.serializer.ObjectStreamSerializer ÊØî JDK ObjectOutputStream/ObjectInputStream Âø´ÂæàÂ§öÔºå‰ΩÜÂÆÉ‰ªçÁÑ∂‰∏çÁü•ÈÅìÂ¶Ç‰Ωï‰ΩøÁî® Scala ÈõÜÂêàÊ≥õÂûã„ÄÇ  Êú™Êù•Êàë‰ª¨ËÆ°Âàí‰∏∫ Scala Á±ªÂûãÊèê‰æõÊõ¥Â§ö‰ºòÂåñÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇÁúã #682ÔºÅ  Scala ÈõÜÂêàÂ∫èÂàóÂåñÂ∑≤Âú® #1073 ÂÆåÊàê ÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåËØ∑‰ΩøÁî® Apache Fury snapshot ÁâàÊú¨„ÄÇ ","version":"0.10","tagName":"h2"},{"title":"Java Â∫èÂàóÂåñÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"0.10"},{"title":"Java ÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#java-ÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ÂΩìÂè™ÈúÄË¶Å Java ÂØπË±°Â∫èÂàóÂåñÊó∂ÔºåÂÖ∂Áõ∏ÊØîË∑®ËØ≠Ë®ÄÁöÑÂõæÂ∫èÂàóÂåñÊã•ÊúâÊõ¥Â•ΩÁöÑÊÄßËÉΩ„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Âø´ÈÄüÂºÄÂßã","content":" Ê≥®ÊÑèÔºöFury ÂØπË±°ÂàõÂª∫ÁöÑ‰ª£‰ª∑ÂæàÈ´òÔºå Âõ†Ê≠§ Fury ÂØπË±°Â∫îËØ•Â∞ΩÂèØËÉΩË¢´Â§çÁî®ÔºåËÄå‰∏çÊòØÊØèÊ¨°ÈÉΩÈáçÊñ∞ÂàõÂª∫„ÄÇ  ÊÇ®Â∫îËØ•‰∏∫ Fury ÂàõÂª∫‰∏Ä‰∏™ÂÖ®Â±ÄÁöÑÈùôÊÄÅÂèòÈáèÔºåÊàñËÄÖÊúâÈôêÁöÑÁöÑ Fury ÂÆû‰æãÂØπË±°„ÄÇFuryÊú¨Ë∫´Âç†Áî®‰∏ÄÂÆöÂÜÖÂ≠òÔºåËØ∑‰∏çË¶ÅÂàõÂª∫‰∏ä‰∏á‰∏™FuryÂØπË±°  ‰ΩøÁî®ÂçïÁ∫øÁ®ãÁâàÊú¨ Fury:  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. Fury fury = Fury.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If class registration enabled, all custom types must be registered. fury.register(SomeClass.class); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   ‰ΩøÁî®Â§öÁ∫øÁ®ãÁâàÊú¨ FuryÔºö  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. ThreadSafeFury fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   Fury ÂØπË±°Â§çÁî®Á§∫‰æãÔºö  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { // reuse fury. private static final ThreadSafeFury fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   ","version":"0.10","tagName":"h2"},{"title":"FuryBuilder ÂèÇÊï∞ÈÄâÈ°π‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#furybuilder-ÂèÇÊï∞ÈÄâÈ°π","content":" ÂèÇÊï∞ÈÄâÈ°πÂêç\tÊèèËø∞\tÈªòËÆ§ÂÄºtimeRefIgnored\tÂêØÁî® reference tracking Êó∂ÔºåÊòØÂê¶ÂøΩÁï•Âú® TimeSerializers ‰∏≠Ê≥®ÂÜåÁöÑÊâÄÊúâÊó∂Èó¥Á±ªÂûãÂèäÂÖ∂Â≠êÁ±ªÁöÑÂºïÁî®Ë∑üË∏™„ÄÇÂ¶ÇÊûúÂøΩÁï•ÔºåÂàôÂèØ‰ª•ÈÄöËøáË∞ÉÁî® Fury#registerSerializer(Class, Serializer) Êù•ÂêØÁî®ÂØπÊØèÁßçÊó∂Èó¥Á±ªÂûãÁöÑÂºïÁî®Ë∑üË∏™„ÄÇ‰æãÂ¶ÇÔºåfury.registerSerializer(Date.class, new DateSerializer(fury, true))„ÄÇËØ∑Ê≥®ÊÑèÔºåÂêØÁî® ref tracking ÂäüËÉΩÂ∫îÂú®‰ªª‰ΩïÂåÖÂê´Êó∂Èó¥Â≠óÊÆµÁöÑÁ±ªÂûãÁöÑÂ∫èÂàóÂåñÁ®ãÂ∫èÁºñÁ†Å‰πãÂâçËøõË°å„ÄÇÂê¶ÂàôÔºåËøô‰∫õÂ≠óÊÆµ‰ªçÂ∞ÜË∑≥Ëøá reference tracking„ÄÇ\ttrue compressInt\tÂêØÁî®ÊàñÁ¶ÅÁî® int ÂéãÁº©ÔºåÂáèÂ∞èÊï∞ÊçÆ‰ΩìÁßØ„ÄÇ\ttrue compressLong\tÂêØÁî®ÊàñÁ¶ÅÁî® long ÂéãÁº©ÔºåÂáèÂ∞èÊï∞ÊçÆ‰ΩìÁßØ„ÄÇ\ttrue compressString\tÂêØÁî®ÊàñÁ¶ÅÁî® String ÂéãÁº©ÔºåÂáèÂ∞èÊï∞ÊçÆ‰ΩìÁßØ„ÄÇ\ttrue classLoader\tÂÖ≥ËÅîÂà∞ÂΩìÂâç Fury ÁöÑÁ±ªÂä†ËΩΩÂô®ÔºåÊØè‰∏™ Fury ‰ºöÂÖ≥ËÅî‰∏Ä‰∏™‰∏çÂèØÂèòÁöÑÁ±ªÂä†ËΩΩÂô®ÔºåÁî®‰∫éÁºìÂ≠òÁ±ªÂÖÉÊï∞ÊçÆ„ÄÇÂ¶ÇÊûúÈúÄË¶ÅÂàáÊç¢Á±ªÂä†ËΩΩÂô®ÔºåËØ∑‰ΩøÁî® LoaderBinding Êàñ ThreadSafeFury ËøõË°åÊõ¥Êñ∞„ÄÇ\tThread.currentThread().getContextClassLoader() compatibleMode\tÁ±ªÂûãÁöÑÂêëÂâç/ÂêëÂêéÂÖºÂÆπÊÄßÈÖçÁΩÆ„ÄÇ‰πü‰∏é checkClassVersion ÈÖçÁΩÆÁõ∏ÂÖ≥„ÄÇschema_consistentÔºö Á±ªÁöÑSchema‰ø°ÊÅØÂøÖÈ°ªÂú®Â∫èÂàóÂåñÂØπÁ≠âËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñÂØπÁ≠âËäÇÁÇπ‰πãÈó¥‰øùÊåÅ‰∏ÄËá¥„ÄÇCOMPATIBLEÔºö Â∫èÂàóÂåñÂØπÁ≠âËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñÂØπÁ≠âËäÇÁÇπ‰πãÈó¥ÁöÑÁ±ªÊ®°ÂºèÂèØ‰ª•‰∏çÂêå„ÄÇÂÆÉ‰ª¨ÂèØ‰ª•Áã¨Á´ãÊ∑ªÂä†/Âà†Èô§Â≠óÊÆµ„ÄÇ\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tÂÜ≥ÂÆöÊòØÂê¶Ê£ÄÊü•Á±ªÊ®°ÂºèÁöÑ‰∏ÄËá¥ÊÄß„ÄÇÂ¶ÇÊûúÂêØÁî®ÔºåFury Â∞ÜÂÜôÂÖ• classVersionHash ÂíåÂü∫‰∫éÂÖ∂Ê£ÄÊü•Á±ªÂûã‰∏ÄËá¥ÊÄß„ÄÇÂΩìÂêØÁî® CompatibleMode#COMPATIBLE Êó∂ÔºåÂÆÉÂ∞ÜËá™Âä®Á¶ÅÁî®„ÄÇÈô§ÈùûËÉΩÁ°Æ‰øùÁ±ª‰∏ç‰ºöÊºîÂåñÔºåÂê¶Âàô‰∏çÂª∫ËÆÆÁ¶ÅÁî®„ÄÇ\tfalse checkJdkClassSerializable\tÂêØÁî®ÊàñÁ¶ÅÁî® java.* ‰∏ãÁ±ªÁöÑ Serializable Êé•Âè£Ê£ÄÊü•„ÄÇÂ¶ÇÊûú java.* ‰∏ãÁöÑÁ±ª‰∏çÊòØ SerializableÔºåFury Â∞ÜÊäõÂá∫ UnsupportedOperationException„ÄÇ\ttrue registerGuavaTypes\tÊòØÂê¶È¢ÑÂÖàÊ≥®ÂÜå Guava Á±ªÂûãÔºåÂ¶Ç RegularImmutableMap/RegularImmutableList„ÄÇËøô‰∫õÁ±ªÂûã‰∏çÊòØÂÖ¨ÂÖ± APIÔºå‰ΩÜ‰ºº‰πéÈùûÂ∏∏Á®≥ÂÆö„ÄÇ\ttrue requireClassRegistration\tÁ¶ÅÁî®ÂèØËÉΩ‰ºöÂÖÅËÆ∏Êú™Áü•Á±ªË¢´ÂèçÂ∫èÂàóÂåñÔºå‰ªéËÄåÂ∏¶Êù•ÊΩúÂú®ÁöÑÂÆâÂÖ®È£éÈô©„ÄÇ\ttrue suppressClassRegistrationWarnings\tÊòØÂê¶ÊäëÂà∂Á±ªÊ≥®ÂÜåË≠¶Âëä„ÄÇËøô‰∫õË≠¶ÂëäÂèØÁî®‰∫éÂÆâÂÖ®ÂÆ°ËÆ°Ôºå‰ΩÜÂèØËÉΩ‰ºöËæÉÁêêÁ¢éÔºåÈªòËÆ§ÊÉÖÂÜµ‰∏ãÂ∞ÜÂêØÁî®Ê≠§ÊäëÂà∂ÂäüËÉΩ„ÄÇ\ttrue metaShareEnabled\tÊòØÂê¶Âê¶ÂºÄÂêØÂéüÂÖÉÊï∞ÊçÆÂÖ±‰∫´„ÄÇ\tfalse scopedMetaShareEnabled\tËåÉÂõ¥ÂÖÉÊï∞ÊçÆÂÖ±‰∫´‰æßÈáç‰∫éÂçï‰∏ÄÂ∫èÂàóÂåñÊµÅÁ®ã„ÄÇÂú®Ê≠§ËøáÁ®ã‰∏≠ÂàõÂª∫ÊàñËØÜÂà´ÁöÑÂÖÉÊï∞ÊçÆ‰∏∫ËØ•ËøáÁ®ãÁã¨ÊúâÔºå‰∏ç‰ºö‰∏éÂÖ∂‰ªñÂ∫èÂàóÂåñËøáÁ®ãÂÖ±‰∫´„ÄÇ\tfalse metaCompressor\tÂÖÉÊï∞ÊçÆÂéãÁº©Âô®„ÄÇËØ∑Ê≥®ÊÑèÔºå‰º†ÈÄíÁöÑÂÖÉÂéãÁº©Âô®Â∫îÊòØÁ∫øÁ®ãÂÆâÂÖ®ÁöÑ„ÄÇÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÂ∞Ü‰ΩøÁî®Âü∫‰∫é Deflater ÁöÑÂéãÁº©Âô® DeflaterMetaCompressor„ÄÇÁî®Êà∑ÂèØ‰ª•‰ΩøÁî®ÂÖ∂‰ªñÂéãÁº©Âô®ÔºåÂ¶Ç zstd ‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÂéãÁº©Áéá„ÄÇ\tDeflaterMetaCompressor deserializeNonexistentClass\tÂêØÁî®ÊàñÁ¶ÅÁî®ÂèçÂ∫èÂàóÂåñ/Ë∑≥ËΩ¨‰∏çÂ≠òÂú®Á±ªÁöÑÊï∞ÊçÆ„ÄÇ\ttrueÔºå Â¶ÇÊûúËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂ∞Ü‰ºöÂèò‰∏∫ false„ÄÇ codeGenEnabled\tÁ¶ÅÁî®ÂêéÔºåÂàùÂßãÂ∫èÂàóÂåñÈÄüÂ∫¶‰ºöÂä†Âø´Ôºå‰ΩÜÂêéÁª≠Â∫èÂàóÂåñÈÄüÂ∫¶‰ºöÂáèÊÖ¢„ÄÇ\ttrue asyncCompilationEnabled\tÂ¶ÇÊûúÂêØÁî®ÔºåÂ∫èÂàóÂåñ‰ºöÈ¶ñÂÖà‰ΩøÁî®Ëß£ÈáäÂô®Ê®°ÂºèÔºåÂπ∂Âú®Á±ªÁöÑÂºÇÊ≠•Â∫èÂàóÂåñ JIT ÂÆåÊàêÂêéÂàáÊç¢Âà∞ JIT Â∫èÂàóÂåñ„ÄÇ\tfalse scalaOptimizationEnabled\tÂêØÁî®ÊàñÁ¶ÅÁî®ÁâπÂÆö‰∫é Scala ÁöÑÂ∫èÂàóÂåñ‰ºòÂåñ„ÄÇ\tfalse copyRef\tÁ¶ÅÁî®ÂêéÔºåÂ§çÂà∂ÊÄßËÉΩ‰ºöÊõ¥Â•Ω„ÄÇ‰ΩÜ Fury Ê∑±Â∫¶Â§çÂà∂Â∞ÜÂøΩÁï•Âæ™ÁéØÂºïÁî®ÂíåÂÖ±‰∫´ÂºïÁî®„ÄÇÂØπË±°Âõæ‰∏≠ÁöÑÁõ∏ÂêåÂºïÁî®Â∞ÜÂú®‰∏ÄÊ¨° Fury#copy ‰∏≠Â§çÂà∂Âà∞‰∏çÂêåÁöÑÂØπË±°‰∏≠„ÄÇ\ttrue  ","version":"0.10","tagName":"h2"},{"title":"È´òÁ∫ßÁî®Ê≥ï‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#È´òÁ∫ßÁî®Ê≥ï","content":" ","version":"0.10","tagName":"h2"},{"title":"Fury ÂàõÂª∫‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#fury-ÂàõÂª∫","content":" ÂçïÁ∫øÁ®ã Fury ÂàõÂª∫:  Fury fury=Fury.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .build(); byte[]bytes=fury.serialize(object); System.out.println(fury.deserialize(bytes));   Â§öÁ∫øÁ®ã Fury ÂàõÂª∫:  ThreadSafeFury fury=Fury.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) // compress int for smaller size // .withIntCompressed(true) // compress long for smaller size // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .buildThreadSafeFury(); byte[]bytes=fury.serialize(object); System.out.println(fury.deserialize(bytes));   ","version":"0.10","tagName":"h3"},{"title":"ÈÖçÁΩÆFuryÁîüÊàêÊõ¥Â∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØÔºö‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#ÈÖçÁΩÆfuryÁîüÊàêÊõ¥Â∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØ","content":" FuryBuilder#withIntCompressed/FuryBuilder#withLongCompressed ÂèØÁî®‰∫éÂéãÁº© int/longÔºå‰ΩøÂÖ∂‰ΩìÁßØÊõ¥Â∞è„ÄÇÈÄöÂ∏∏ÂéãÁº© int Á±ªÂûãÂ∞±Ë∂≥Â§ü‰∫Ü„ÄÇ  Ëøô‰∏§‰∏™ÂéãÁº©Â±ûÊÄßÈªòËÆ§ÂêØÁî®„ÄÇÂ¶ÇÊûúÂ∫èÂàóÂåñÂ§ßÂ∞è‰∏çÈáçË¶ÅÔºåÊØîÂ¶Ç‰Ω†‰πãÂâç‰ΩøÁî®flatbuffersËøõË°åÂ∫èÂàóÂåñÔºåflatbuffers‰∏ç‰ºöÂéãÁº©‰ªª‰Ωï‰∏úË•øÔºåÈÇ£‰πàËøôÁßçÊÉÖÂÜµ‰∏ãÂª∫ËÆÆÂÖ≥Èó≠ÂéãÁº©„ÄÇÂ¶ÇÊûúÊï∞ÊçÆÈÉΩÊòØÊï∞Â≠óÔºåÂéãÁº©ÂèØËÉΩ‰ºöÂ∏¶Êù• 80%‰ª•‰∏äÁöÑÊÄßËÉΩÊçüËÄó„ÄÇ  ÂØπ‰∫é int ÂéãÁº©ÔºåFury ‰ΩøÁî® 1~5 Â≠óËäÇËøõË°åÁºñÁ†Å„ÄÇÊØè‰∏™Â≠óËäÇÁöÑÁ¨¨‰∏Ä‰ΩçË°®Á§∫ÊòØÂê¶Êúâ‰∏ã‰∏Ä‰∏™Â≠óËäÇ‰ΩçÔºåÂ¶ÇÊûú‰∏ã‰∏Ä‰∏™Â≠óËäÇ‰ΩçË¢´ËÆæÁΩÆÔºåÂàôÂ∞ÜËØªÂèñ‰∏ã‰∏Ä‰∏™Â≠óËäÇÔºåÁõ¥Âà∞‰∏ã‰∏Ä‰∏™Â≠óËäÇ‰ΩçÊú™Ë¢´ËÆæÁΩÆÊó∂ÂÅúÊ≠¢„ÄÇ  ÂØπ‰∫é long ÂéãÁº©ÔºåFury ÊîØÊåÅ‰∏§ÁßçÁºñÁ†ÅÊñπÂºèÔºö  Fury SLIÔºàSmall long as intÔºâÁºñÁ†ÅÔºàÈªòËÆ§‰ΩøÁî®ÔºâÔºö Â¶ÇÊûú long Âú® [-1073741824, 1073741823] ËåÉÂõ¥ÂÜÖÔºåÂàôÁºñÁ†Å‰∏∫ 4 Â≠óËäÇ intÔºö| little-endian: ((int) value) &lt;&lt; 1 |Âê¶ÂàôÂÜôÊàê 9 Â≠óËäÇÔºö | 0b1 | little-endian 8 bit long | Fury PVLÔºàÊ∏êËøõÂèØÂèòÈïøÔºâÁºñÁ†ÅÔºö ÊØè‰∏™Â≠óËäÇÁöÑÁ¨¨‰∏Ä‰ΩçË°®Á§∫ÊòØÂê¶Êúâ‰∏ã‰∏Ä‰∏™Â≠óËäÇ„ÄÇÂ¶ÇÊûúÁ¨¨‰∏Ä‰ΩçË¢´ËÆæÁΩÆÔºåÂàôÂ∞ÜËØªÂèñ‰∏ã‰∏Ä‰∏™Â≠óËäÇ„ÄÇ Áõ¥Âà∞‰∏ã‰∏ÄÂ≠óËäÇÁöÑÁ¨¨‰∏Ä‰ΩçÊú™ËÆæÁΩÆ„ÄÇË¥üÊï∞Â∞ÜÈÄöËøá (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ËΩ¨Êç¢‰∏∫Ê≠£Êï∞Ôºå‰ª•ÂáèÂ∞ëÂ∞èË¥üÊï∞ÁöÑÁºñÁ†ÅÁ©∫Èó¥Âç†Áî®„ÄÇ  Â¶ÇÊûú‰∏Ä‰∏™Êï∞Â≠óÊòØ Long Á±ªÂûãÔºåÂ§ßÂ§ö‰∏çËÉΩÁî®Êõ¥Â∞èÁöÑÂ≠óËäÇË°®Á§∫ÔºåÂéãÁº©ÊïàÊûúÂ∞±‰∏çÂ§üÂ•Ω„ÄÇ ‰∏éÂç†Áî®ÁöÑÊÄßËÉΩÂºÄÈîÄÁõ∏ÊØîÔºåËøôÊòØ‰∏çÂÄºÂæóÁöÑ„ÄÇÂ¶ÇÊûúÊÇ®ÂèëÁé∞LongÁ±ªÂûãÂéãÁº©Âπ∂Ê≤°ÊúâÂ∏¶Êù•Â§öÂ∞ëÂ•ΩÂ§ÑÔºå‰πüËÆ∏ÊÇ®Â∫îËØ•Â∞ùËØïÂÖ≥Èó≠LongÁ±ªÂûãÂéãÁº©Ôºå‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÂØπË±°Ê∑±Êã∑Ë¥ù‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#ÂØπË±°Ê∑±Êã∑Ë¥ù","content":" Ê∑±Â∫¶Êã∑Ë¥ùÁ§∫‰æã:  Fury fury=Fury.builder() ... .withRefCopy(true).build(); SomeClass a=xxx; SomeClass copied=fury.copy(a)   ‰Ωø Fury Ê∑±Â∫¶Â§çÂà∂ÂøΩÁï•Âæ™ÁéØÂºïÁî®ÂíåÂÖ±‰∫´ÂºïÁî®ÔºåÊ≠§ÈÖçÁΩÆ‰ºöÂ∞ÜÂØπË±°Âõæ‰∏≠ÁöÑÁõ∏ÂêåÂºïÁî®Âú®‰∏ÄÊ¨° Fury#copy ‰πãÂêé‰ºöË¢´Â§çÂà∂Âà∞‰∏çÂêåÁöÑÂØπË±°‰∏≠„ÄÇ  Fury fury=Fury.builder() ... .withRefCopy(false).build(); SomeClass a=xxx; SomeClass copied=fury.copy(a)   ","version":"0.10","tagName":"h3"},{"title":"ÂÆûÁé∞Ëá™ÂÆö‰πâÁöÑÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#ÂÆûÁé∞Ëá™ÂÆö‰πâÁöÑÂ∫èÂàóÂåñÂô®","content":" Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØËÉΩÂ∏åÊúõ‰∏∫ÊÇ®ÁöÑËá™ÂÆö‰πâÁ±ªÂûãÂÆûÁé∞‰∏Ä‰∏™Â∫èÂàóÂåñÂô®ÔºåÁâπÂà´ÊòØÊüê‰∫õÈÄöËøá JDK writeObject/writeReplace/readObject/readResolve ÂÆûÁé∞Â∫èÂàóÂåñÁöÑÁ±ªÔºåJDKÂ∫èÂàóÂåñÁöÑÊÄßËÉΩÂíåÁ©∫Èó¥ÊïàÁéáÂæà‰Ωé„ÄÇÊØîÂ¶ÇËØ¥ÔºåÂ¶ÇÊûúÊÇ®‰∏çÊÉ≥‰∏ãÈù¢ÁöÑ Foo#writeObject Ë¢´Ë∞ÉÁî®Ôºå‰Ω†ÂèØ‰ª•ÂÆûÁé∞Á±ªÂûã‰∏ãÈù¢ÁöÑ FooSerializer Ôºö  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fury fury) { super(fury, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Ê≥®ÂÜåÂ∫èÂàóÂåñÂô®:  Fury fury=getFury(); fury.registerSerializer(Foo.class,new FooSerializer(fury));   ","version":"0.10","tagName":"h3"},{"title":"ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå","content":" ÂèØ‰ª•‰ΩøÁî® FuryBuilder#requireClassRegistration Êù•Á¶ÅÁî®Á±ªÊ≥®ÂÜåÔºåËøôÂ∞ÜÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÁöÑÂØπË±°Ôºå‰ΩøÁî®Êõ¥ÁÅµÊ¥ª„ÄÇ‰ΩÜÂ¶ÇÊûúÁ±ª‰∏≠ÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂ∞±‰ºöÂá∫Áé∞ÂÆâÂÖ®ÊºèÊ¥û„ÄÇ  Èô§ÈùûËÉΩÁ°Æ‰øùËøêË°åÁéØÂ¢ÉÂíåÂ§ñÈÉ®‰∫§‰∫íÁéØÂ¢ÉÂÆâÂÖ®ÔºåÂê¶ÂàôËØ∑ÂãøÁ¶ÅÁî®Á±ªÊ≥®ÂÜåÊ£ÄÊü•„ÄÇ  Â¶ÇÊûúÁ¶ÅÁî®Ê≠§ÈÄâÈ°πÔºåÂú®ÂèçÂ∫èÂàóÂåñÊú™Áü•/‰∏çÂèØ‰ø°‰ªªÁöÑÁ±ªÂûãÊó∂ÔºåÂèØËÉΩ‰ºöÊâßË°åinit/equals/hashCode‰∏≠ÁöÑÊÅ∂ÊÑè‰ª£Á†Å„ÄÇ Á¶ÅÁî®„ÄÇ  Á±ªÊ≥®ÂÜå‰∏ç‰ªÖÂèØ‰ª•Èôç‰ΩéÂÆâÂÖ®È£éÈô©ÔºåËøòÂèØ‰ª•ÈÅøÂÖçÁ±ªÂêçÂ∫èÂàóÂåñÊàêÊú¨„ÄÇ  ÊÇ®ÂèØ‰ª•‰ΩøÁî® Fury#register API Êù•Ê≥®ÂÜåÁ±ª„ÄÇ  ËØ∑Ê≥®ÊÑèÔºöÁ±ªÊ≥®ÂÜåÈ°∫Â∫èÂæàÈáçË¶ÅÔºåÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÂØπÔºåÂ∫îÂÖ∑ÊúâÁõ∏ÂêåÁöÑÊ≥®ÂÜåÈ°∫Â∫è„ÄÇ  Fury fury=xxx; fury.register(SomeClass.class); fury.register(SomeClass1.class,200);   Â¶ÇÊûúË∞ÉÁî® FuryBuilder#requireClassRegistration(false) Êù•Á¶ÅÁî®Á±ªÊ≥®ÂÜåÊ£ÄÊü•„ÄÅ ÂèØ‰ª•ÈÄöËøá ClassResolver#setClassChecker ËÆæÁΩÆ org.apache.fury.resolver.ClassChecker Êù•ÊéßÂà∂Âì™‰∫õÁ±ªÊòØÂÖÅËÆ∏Â∫èÂàóÂåñ„ÄÇ‰æãÂ¶ÇÔºåÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÂÖÅËÆ∏‰ª• org.example.* ÂºÄÂ§¥ÁöÑÁ±ªÔºö  Fury fury=xxx; fury.getClassResolver().setClassChecker((classResolver,className)-&gt;className.startsWith(&quot;org.example.&quot;));   AllowListChecker checker=new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFury fury=new ThreadLocalFury(classLoader-&gt;{ Fury f=Fury.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Aapche Fury ËøòÊèê‰æõ‰∫Ü‰∏Ä‰∏™ org.apache.fury.resolver.AllowListCheckerÔºåÂÆÉÊòØ‰∏Ä‰∏™Âü∫‰∫éÂÖÅËÆ∏/Á¶ÅÊ≠¢ÂàóË°®ÁöÑÊ£ÄÊü•Âô®ÔºåÁî®‰∫éÁÆÄÂåñÁ±ªÊ£ÄÊü•Êú∫Âà∂ÁöÑÂÆöÂà∂„ÄÇÊÇ®ÂèØ‰ª•‰ΩøÁî®Ê≠§Ê£ÄÊü•Âô®ÊàñËá™Ë°åÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊ£ÄÊü•Âô®„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂô®Ê≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñÂô®Ê≥®ÂÜå","content":" ÊÇ®ËøòÂèØ‰ª•ÈÄöËøá Fury#registerSerializer API ‰∏∫Á±ªÊ≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®„ÄÇÊàñËÄÖ‰∏∫Á±ªÂÆûÁé∞ java.io.Externalizable„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ","content":" import org.apache.fury.*; import org.apache.fury.config.*; import org.apache.fury.serializers.BufferObject; import org.apache.fury.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Note that fury instance should be reused instead of creation every time. static Fury fury = Fury.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fury.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fury.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fury.deserialize(bytes, buffers)); } }   ","version":"0.10","tagName":"h3"},{"title":"Meta ÂÖ±‰∫´‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#meta-ÂÖ±‰∫´","content":" Apache Fury ÊîØÊåÅÂú®Âêå‰∏Ä‰∏™‰∏ä‰∏ãÊñáÔºà‰æãÂ¶ÇÔºöTCP ConnectionÔºâ‰∏≠ÁöÑÂ§ö‰∏™Â∫èÂàó‰∏≠ÂÖ±‰∫´Á±ªÂûãÂÖÉÊï∞ÊçÆÔºà‰æãÂ¶ÇÔºöÁ±ªÂêçÁß∞ÔºåÂ≠óÊÆµÂêçÁß∞ÔºåÂ≠óÊÆµÁ±ªÂûã‰ø°ÊÅØ Á≠âÔºâÔºåËøô‰∫õ‰ø°ÊÅØÂ∞ÜÂú®‰∏ä‰∏ãÊñá‰∏≠Á¨¨‰∏ÄÊ¨°Â∫èÂàóÂåñÊó∂ÂèëÈÄÅÁªô ÂØπÁ´Ø„ÄÇÊ†πÊçÆËøô‰∫õÂÖÉÊï∞ÊçÆÔºåÂØπÁ´ØÊñπÂèØÈáçÂª∫Áõ∏ÂêåÁöÑÂèçÂ∫èÂàóÂåñÂô®Ôºå‰ªéËÄåÈÅøÂÖç‰∏∫ÂêéÁª≠Â∫èÂàóÂåñ‰º†ËæìÂÖÉÊï∞ÊçÆÔºåÂáèÂ∞ëÁΩëÁªúÊµÅÈáèÂéãÂäõÔºåÂπ∂ÊîØÊåÅÁ±ªÂûãÂêëÂâç/ÂêëÂêéÂÖºÂÆπ„ÄÇ  // Fury.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // share meta across serialization. // .withMetaContextShare(true) // Not thread-safe fury. MetaContext context=xxx; fury.getSerializationContext().setMetaContext(context); byte[]bytes=fury.serialize(o); // Not thread-safe fury. MetaContext context=xxx; fury.getSerializationContext().setMetaContext(context); fury.deserialize(bytes) // Thread-safe fury fury.setClassLoader(beanA.getClass().getClassLoader()); byte[]serialized=fury.execute( f-&gt;{ f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // thread-safe fury fury.setClassLoader(beanA.getClass().getClassLoader()); Object newObj=fury.execute( f-&gt;{ f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"0.10","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª","content":" Apache Fury ÊîØÊåÅÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ªÔºåÈÄöËøáFuryBuilder#deserializeNonexistentClass(true) ÈÄâÈ°πÂºÄÂêØ„ÄÇÂΩìÊ≠§ÈÄâÈ°πÂºÄÂêØÁöÑÊó∂ÂÄôÔºåÂêåÊó∂‰πü‰ºöÂºÄÂêØÂÖÉÊï∞ÊçÆÂÖ±‰∫´„ÄÇApache Fury ‰ºöÂ∞ÜËØ•Á±ªÂûãÁöÑÂèçÂ∫èÂàóÂåñÊï∞ÊçÆÂ≠òÂÇ®Âú® lazy Map Â≠êÁ±ª‰∏≠„ÄÇÈÄöËøá‰ΩøÁî® Fury ÂÆûÁé∞ÁöÑ lazy MapÔºåÂèØ‰ª•ÈÅøÂÖçÂú®ÂèçÂ∫èÂàóÂåñËøáÁ®ã‰∏≠Â°´ÂÖÖ map Êó∂ map ÂÜÖÈÉ®ËäÇÁÇπÁöÑrebalanceÊù•‰∏ãÔºå‰ªéËÄåËøõ‰∏ÄÊ≠•ÊèêÈ´òÊÄßËÉΩ„ÄÇÂ¶ÇÊûúËøô‰∫õÊï∞ÊçÆË¢´ÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™ËøõÁ®ãÔºåËÄåËØ•ËøõÁ®ã‰∏≠Â≠òÂú®ËØ•Á±ªÔºåÈÇ£‰πàÊï∞ÊçÆÂ∞ÜË¢´ÂèçÂ∫èÂàóÂåñ‰∏∫ËØ•Á±ªÂûãÁöÑÂØπË±°ÔºåËÄå‰∏ç‰ºö‰∏¢Â§±‰ªª‰Ωï‰ø°ÊÅØ„ÄÇ  Â¶ÇÊûúÊú™ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºåÊñ∞Á±ªÊï∞ÊçÆÂ∞ÜË¢´Ë∑≥ËøáÔºåÂπ∂ËøîÂõû‰∏Ä‰∏™ NonexistentSkipClass ÁöÑstub ÂØπË±°„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂ∫ìËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñÂ∫ìËøÅÁßª","content":" ","version":"0.10","tagName":"h2"},{"title":"JDK ËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#jdk-ËøÅÁßª","content":" Â¶ÇÊûúÊÇ®‰πãÂâç‰ΩøÁî® JDK Â∫èÂàóÂåñÔºåÂπ∂‰∏îÊ≤°ÊúâÂêåÊó∂ÂçáÁ∫ß client Âíå server„ÄÇËøôÂú®Á∫ø‰∏äÂ∫îÁî®ÂæàÂ∏∏ËßÅÔºåApache Fury Êèê‰æõ‰∫Ü‰∏Ä‰∏™ org.apache.fury.serializer.JavaSerializer.serializedByJDK Â∑•ÂÖ∑ÊñπÊ≥ïÊù•Ê£ÄÊü•‰∫åËøõÂà∂Êñá‰ª∂ÊòØÂê¶Áî± JDK Â∫èÂàóÂåñÁîüÊàê„ÄÇÊÇ®ÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÊ®°Âºè‰ΩøÂ∑≤ÊúâÁöÑÂ∫èÂàóÂåñÂÖ∑ÊúâÊé¢ÊµãËøêË°åÂçèËÆÆÁöÑËÉΩÂäõ„ÄÅÁÑ∂Âêé‰ª•ÂºÇÊ≠•ÊªöÂä®ÂçáÁ∫ßÁöÑÊñπÂºèÂ∞ÜÂ∫èÂàóÂåñÂô®ÈÄêÊ≠•ÂçáÁ∫ßËá≥ Apache FuryÔºö  if(JavaSerializer.serializedByJDK(bytes)){ ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); }else{ return fury.deserialize(bytes); }   ","version":"0.10","tagName":"h3"},{"title":"Apache Fury Êõ¥Êñ∞‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#apache-fury-Êõ¥Êñ∞","content":" ÂΩìÂâçÂè™‰øùËØÅÂ∞èÁâàÊú¨‰πãÈó¥ÁöÑÂÖºÂÆπÊÄß„ÄÇ‰æãÂ¶ÇÔºöÊÇ®‰ΩøÁî®ÁöÑ Fury ÁâàÊú¨‰∏∫ 0.9.0ÔºåÂΩìÂçáÁ∫ßÂà∞ Fury 0.8.1 ÁâàÊú¨ÔºåÂèØ‰ª•Á°Æ‰øù‰∫åËøõÂà∂ÂçèËÆÆÁöÑÂÖºÂÆπÊÄß„ÄÇ‰ΩÜÊòØÔºåÂ¶ÇÊûúÊõ¥Êñ∞Âà∞ Fury 0.9.0 ÁâàÊú¨Ôºå‰∫åËøõÂà∂ÂçèËÆÆÂÖºÂÆπÊÄßËÉΩÂäõ‰∏çËÉΩÂæóÂà∞‰øùËØÅ„ÄÇÊàë‰ª¨ËÆ°ÂàíÂú®1.0.0ÁâàÊú¨ÂºÄÂßãÊèê‰æõÂ§ßÁâàÊú¨ÂÜÖÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"Â∏∏ËßÅÈóÆÈ¢òÊéíÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Â∏∏ËßÅÈóÆÈ¢òÊéíÊü•","content":" ","version":"0.10","tagName":"h2"},{"title":"Á±ª‰∏ç‰∏ÄËá¥ÂíåÁ±ªÁâàÊú¨Ê£ÄÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#Á±ª‰∏ç‰∏ÄËá¥ÂíåÁ±ªÁâàÊú¨Ê£ÄÊü•","content":" Â¶ÇÊûúÊÇ®Âú®ÂàõÂª∫ fury Êó∂Êú™Â∞Ü CompatibleMode ËÆæÁΩÆ‰∏∫ org.apache.fury.config.CompatibleMode.COMPATIBLE ËÄåÂá∫Áé∞Â•áÊÄ™ÁöÑÂ∫èÂàóÂåñÈîôËØØÔºåÂèØËÉΩÊòØÁî±‰∫éÂ∫èÂàóÂåñÂØπÂíåÂèçÂ∫èÂàóÂåñÂØπ‰πãÈó¥ÁöÑÁ±ª‰∏ç‰∏ÄËá¥ÈÄ†ÊàêÁöÑ„ÄÇ  Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØ‰ª•Ë∞ÉÁî® FuryBuilder#withClassVersionCheck Êù•ÂàõÂª∫ Fury ‰ª•È™åËØÅÂÆÉÔºåÂ¶ÇÊûúÂèçÂ∫èÂàóÂåñÊó∂ÊäõÂá∫org.apache.fury.exception.ClassNotCompatibleExceptionÔºåÂàôË°®ÊòéÁ±ªÊòØ‰∏ç‰∏ÄËá¥ÁöÑÔºåÊÇ®Â∫îËØ•ÈÄöËøáFuryBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE) ÂàõÂª∫ Fury ÂØπË±°„ÄÇ  CompatibleMode.COMPATIBLE ‰ºöÂ∏¶Êù•Êõ¥Â§öÁöÑÊÄßËÉΩÂíåÁ©∫Èó¥‰ª£‰ª∑ÔºåÂ¶ÇÊûúÊÇ®ÁöÑÁ±ªÂú®Â∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñ‰πãÈó¥‰øùÊåÅ‰∏ÄËá¥ÔºåËØ∑‰∏çË¶ÅËÆæÁΩÆÊ≠§ÈÄâÈ°π„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"‰ΩøÁî®ÈîôËØØÁöÑ API ÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/java_object_graph_guide#‰ΩøÁî®ÈîôËØØÁöÑ-api-ÂèçÂ∫èÂàóÂåñ","content":" Â¶ÇÊûúÊÇ®Ë∞ÉÁî® Fury#serialize Êù•Â∫èÂàóÂåñÂØπË±°ÔºåÂàôÂ∫îË∞ÉÁî® Fury#deserialize Êù•ÂèçÂ∫èÂàóÂåñÂØπË±°ÔºåËÄå‰∏çÊòØ‰ΩøÁî® Fury#deserializeJavaObject„ÄÇ  Â¶ÇÊûúË∞ÉÁî® Fury#serializeJavaObject Êù•Â∫èÂàóÂåñÂØπË±°ÔºåÂàôÂ∫îË∞ÉÁî® Fury#deserializeJavaObject Êù•ËøõË°åÂèçÂ∫èÂàóÂåñ„ÄÇËÄå‰∏çÊòØ‰ΩøÁî®Fury#deserializeJavaObjectAndClass ÊàñËÄÖ Fury#deserialize„ÄÇ  Â¶ÇÊûúË∞ÉÁî® Fury#serializeJavaObjectAndClass Êù•Â∫èÂàóÂåñÂØπË±°ÔºåÂàôÂ∫î Ë∞ÉÁî® Fury#deserializeJavaObjectAndClass ËøõË°åÂèçÂ∫èÂàóÂåñÔºåËÄå‰∏çÊòØ‰ΩøÁî®Fury#deserializeJavaObject ÊàñËÄÖ Fury#deserialize„ÄÇ ","version":"0.10","tagName":"h3"},{"title":"Apache Fury ‰ªãÁªç","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/introduction/","content":"","keywords":"","version":"0.10"},{"title":"ÂçèËÆÆ‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#ÂçèËÆÆ","content":" ‰∏çÂêåÁöÑÂú∫ÊôØÊúâ‰∏çÂêåÁöÑÂ∫èÂàóÂåñË¶ÅÊ±Ç„ÄÇApache Fury ‰∏∫Ëøô‰∫õÈúÄÊ±ÇËÆæËÆ°Âπ∂ÂÆûÁé∞‰∫ÜÂ§ö‰∏™‰∫åËøõÂà∂ÂçèËÆÆÔºö  Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂçèËÆÆÔºö Ë∑®ËØ≠Ë®ÄËá™Âä®Â∫èÂàóÂåñ‰ªª‰ΩïÂØπË±°ÔºåÊó†ÈúÄ IDL ÂÆö‰πâ„ÄÅSchemaÁºñËØëÂíåÂØπË±°ÂçèËÆÆËΩ¨Êç¢ÔºõÊîØÊåÅÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÔºåÊó†ÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØÔºõÂéüÁîüÊîØÊåÅÂØπË±°Â§öÊÄÅ„ÄÇ ÂéüÁîü java/python ÂØπË±°ÂõæÂçèËÆÆÔºöÂü∫‰∫éÂçï‰∏ÄËØ≠Ë®ÄÁöÑÂÆåÊï¥Á±ªÂûãÁ≥ªÁªüËøõË°åÈ´òÂ∫¶‰ºòÂåñÔºõË°åÊ†ºÂºèÂçèËÆÆÔºöÁºìÂ≠òÂèãÂ•ΩÁöÑ‰∫åËøõÂà∂ÈöèÊú∫ËÆøÈóÆÊ†ºÂºèÔºåÊîØÊåÅË∑≥ËøáÂ∫èÂàóÂåñÂíåÈÉ®ÂàÜÂ∫èÂàóÂåñÔºåÂπ∂‰∏îÂèØ‰ª•Ëá™Âä®ËΩ¨Êç¢‰∏∫ÂàóÊ†ºÂºè„ÄÇ  Âü∫‰∫é fury Áé∞ÊúâÁöÑ buffer„ÄÅencoding„ÄÅmeta„ÄÅcodegen ÂíåÂÖ∂‰ªñÂäüËÉΩÔºåÂèØ‰ª•ËΩªÊùæÊ∑ªÂä†Êñ∞ÂçèËÆÆ„ÄÇÊâÄÊúâËøô‰∫õÂçèËÆÆÈÉΩÂÖ±‰∫´Áõ∏ÂêåÁöÑ‰ª£Á†ÅÂ∫ìÔºåÂπ∂‰∏î‰∏Ä‰∏™ÂçèËÆÆÁöÑ‰ºòÂåñÂèØ‰ª•Ë¢´Âè¶‰∏Ä‰∏™ÂçèËÆÆÈáçÁî®„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#ÂÖºÂÆπÊÄß","content":" ","version":"0.10","tagName":"h2"},{"title":"SchemaÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#schemaÂÖºÂÆπÊÄß","content":" Apache Fury java ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÁ±ªÊû∂ÊûÑÂêëÂâç/ÂêëÂêéÂÖºÂÆπ„ÄÇÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂèØ‰ª•Áã¨Á´ãÊ∑ªÂä†/Âà†Èô§Â≠óÊÆµ„ÄÇ  Êàë‰ª¨ËÆ°ÂàíÂú®ÂÖÉÊï∞ÊçÆÂéãÁº©ÂÆåÊàêÂêéÊîØÊåÅË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñSchemaÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"‰∫åËøõÂà∂ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#‰∫åËøõÂà∂ÂÖºÂÆπÊÄß","content":" Êàë‰ª¨‰ªçÂú®ÊîπËøõÊàë‰ª¨ÁöÑÂçèËÆÆÔºåÁõÆÂâçÊó†Ê≥ïÁ°Æ‰øù fury ÁâàÊú¨‰πãÈó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇÂ¶ÇÊûúÊÇ®Â∞ÜÊù•Ë¶ÅÂçáÁ∫ß furyÔºåËØ∑ shade fury„ÄÇ  Âú® fury 1.0 ‰πãÂâçÂ∞ÜÁ°Æ‰øù‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.10","tagName":"h3"},{"title":"ÂÆâÂÖ®‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#ÂÆâÂÖ®","content":" ÈùôÊÄÅÂ∫èÂàóÂåñÔºàÂ¶ÇË°åÊ†ºÂºèÔºâÊú¨Ë¥®‰∏äÊòØÂÆâÂÖ®ÁöÑ„ÄÇ‰ΩÜÂä®ÊÄÅÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÂèçÂ∫èÂàóÂåñÊú™Ê≥®ÂÜåÁöÑÁ±ªÂûãÔºåËøôÂèØËÉΩ‰ºöÂ∏¶Êù•ÂÆâÂÖ®È£éÈô©„ÄÇ  ‰æãÂ¶ÇÔºöÂèçÂ∫èÂàóÂåñÂèØËÉΩ‰ºöË∞ÉÁî® init constructor Êàñ equals/ hashCode ÊñπÊ≥ïÔºåÂ¶ÇÊûúÊñπÊ≥ï‰Ωì‰∏≠ÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÁ≥ªÁªüÂ∞ÜÂ§Ñ‰∫éÂç±Èô©‰πã‰∏≠„ÄÇ  Apache Fury Êèê‰æõ‰∫Ü‰∏Ä‰∏™Á±ªÊ≥®ÂÜåÈÄâÈ°πÔºåÂπ∂ÈªòËÆ§ÂºÄÂêØËØ•ÈÄâÈ°πÔºåÂÆÉÂè™ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÂèó‰ø°‰ªªÁöÑÊ≥®ÂÜåÁ±ªÂûãÊàñÂÜÖÁΩÆÁ±ªÂûã„ÄÇ‰∏çË¶ÅÁ¶ÅÁî®Á±ªÊ≥®ÂÜåÊàñÁ±ªÊ≥®ÂÜåÊ£ÄÊü•ÔºåÈô§ÈùûÊÇ®ÂèØ‰ª•Á°Æ‰øùÊÇ®ÁöÑÁéØÂ¢ÉÁ°ÆÂÆûÊòØÂÆâÂÖ®ÁöÑ„ÄÇÂ¶ÇÊûúÊÇ®Á¶ÅÁî®‰∫Ü class Ê≥®ÂÜåÈÄâÈ°πÔºå‰Ω†ÈúÄË¶ÅËá™Ë°åË¥üË¥£Â∫èÂàóÂåñÁöÑÂÆâÂÖ®ÊÄß„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Ë∑ØÁ∫øÂõæ‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#Ë∑ØÁ∫øÂõæ","content":" ÂÖÉÂéãÁº©„ÄÅËá™Âä®ÂÖÉÂÖ±‰∫´ÂíåË∑®ËØ≠Ë®ÄÂÖºÂÆπÊÄßÔºõÁî®‰∫é c++/golang ÁöÑ AOT Ê°ÜÊû∂ÔºåÁî®‰∫éÈùôÊÄÅÁîüÊàê‰ª£Á†ÅÔºõC++/Rust ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÔºõGolang/Rust/NodeJS Ë°åÂ≠òÊ†ºÂºèÊîØÊåÅÔºõProtoBuffer ÂÖºÂÆπÊÄßÊîØÊåÅÔºõÁâπÂæÅÂíåÊ®°ÂûãÂ∫èÂàóÂåñÂçèËÆÆÔºõ‰∏çÊñ≠ÊîπËøõÊàë‰ª¨ÁöÑÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩÔºå‰ª•Êõ¥Âø´ÊîØÊåÅ‰ªª‰ΩïÊñ∞ÁöÑÂçèËÆÆ„ÄÇ  ","version":"0.10","tagName":"h2"},{"title":"Â¶Ç‰ΩïË¥°ÁåÆ‚Äã","type":1,"pageTitle":"Apache Fury ‰ªãÁªç","url":"/zh-CN/docs/0.10/docs/introduction/#Â¶Ç‰ΩïË¥°ÁåÆ","content":" ËØ∑ÈòÖËØªË¥°ÁåÆÊåáÂçó‰ª•Ëé∑ÂèñÊúâÂÖ≥Â¶Ç‰ΩïË¥°ÁåÆÁöÑËØ¥Êòé„ÄÇ ","version":"0.10","tagName":"h2"},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/introduction/benchmark","content":"","keywords":"","version":"0.10"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.10/docs/introduction/benchmark#java-Â∫èÂàóÂåñ","content":"         ","version":"0.10","tagName":"h3"},{"title":"Java ÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.10/docs/introduction/benchmark#java-ÂèçÂ∫èÂàóÂåñ","content":"         ÊúâÂÖ≥Á±ªÂûãÂêëÂâç/ÂêëÂêéÂÖºÂÆπÊÄß„ÄÅÂ†ÜÂ§ñÊîØÊåÅ„ÄÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÁöÑÊõ¥Â§ö benchmark ÊµãËØïÔºåËØ∑ÂèÇËßÅbenchmarks  ","version":"0.10","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.10/docs/introduction/benchmark#javascript","content":"   ËØ•Êù°ÂΩ¢Âõæ‰ΩøÁî®ÁöÑÊï∞ÊçÆÂåÖÊã¨‰∏Ä‰∏™ÂÖ∑ÊúâÂ§öÁßçÂ≠óÊÆµÁ±ªÂûãÁöÑÂ§çÊùÇÂØπË±°ÔºåJSON Êï∞ÊçÆÁöÑÂ§ßÂ∞è‰∏∫ 3KB„ÄÇ  ËØ∑ÂèÇÈòÖbenchmarks benchmark ÊµãËØï‰ª£Á†Å„ÄÇ ","version":"0.10","tagName":"h3"},{"title":"Features","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/introduction/features","content":"Features Â§öÁßçËØ≠Ë®ÄÔºöJava/Python/C++/Golang/Javascript/Rust„ÄÇÈõ∂Êã∑Ë¥ùÔºöÁ±ª‰ººpickle5ÔºåÊîØÊåÅÂ†ÜÂ§ñËØª/ÂÜôÁöÑË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ„ÄÇÈ´òÊÄßËÉΩÔºöÈ´òÂ∫¶ÂèØÊâ©Â±ïÁöÑ JIT Ê°ÜÊû∂ÔºåÂèØÂú®ËøêË°åÊó∂‰ª•ÂºÇÊ≠•Â§öÁ∫øÁ®ãÊñπÂºèÁîüÊàêÂ∫èÂàóÂåñÁ®ãÂ∫è‰ª£Á†ÅÔºå‰ª•Âä†Âø´Â∫èÂàóÂåñÈÄüÂ∫¶ÔºåÈÄöËøá‰ª•‰∏ãÊñπÂºèÊèêÂçá 20-170 ÂÄçÁöÑÈÄüÂ∫¶Ôºö ÂáèÂ∞ëÂú®ÁîüÊàê‰ª£Á†Å‰∏≠ÂÜÖËÅîÂèòÈáèÂáèÂ∞ëÂÜÖÂ≠òËÆøÈóÆÔºõÈÄöËøáÂú®ÁîüÊàêÁöÑ‰ª£Á†Å‰∏≠ÂÜÖËÅîË∞ÉÁî®Êù•ÂáèÂ∞ëËôöÊãüÊñπÊ≥ïË∞ÉÁî®ÔºõÂáèÂ∞ëÊù°‰ª∂ÂàÜÊîØÔºõÂáèÂ∞ëÂìàÂ∏åÊü•ÊâæÔºõ ‰∫åËøõÂà∂ÂçèËÆÆÔºöÂØπË±°Âõæ„ÄÅË°åÊ†ºÂºèÁ≠â„ÄÇ Èô§‰∫ÜË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‰πãÂ§ñÔºåFury ËøòÊîØÊåÅ‰ª•‰∏ãÂäüËÉΩÔºö Áõ¥Êé•ÊõøÊç¢ Java Â∫èÂàóÂåñÊ°ÜÊû∂ÔºåÂ¶Ç JDK/Kryo/HessianÔºåÊó†ÈúÄ‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºå‰ΩÜÈÄüÂ∫¶ÊèêÈ´ò 100 ÂÄç„ÄÇÂÆÉÂèØ‰ª•Â§ßÂ§ßÊèêÈ´ò RPC Ë∞ÉÁî®ÊÄßËÉΩ„ÄÅÊï∞ÊçÆ‰º†ËæìÂíåÂØπË±°ÊåÅ‰πÖÂåñÁöÑÊïàÁéáÔºõJDK Â∫èÂàóÂåñ 100% ÂÖºÂÆπÔºåÂéüÁîüÊîØÊåÅ java Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ writeObject/readObject/writeReplace/readResolve/readObjectNoDataÔºõÊîØÊåÅ golang ÁöÑÂÖ±‰∫´ÂíåÂæ™ÁéØÂºïÁî®ÂØπË±°Â∫èÂàóÂåñÔºõÊîØÊåÅ golang ÁöÑËá™Âä®ÂØπË±°Â∫èÂàóÂåñ„ÄÇ","keywords":"","version":"0.10"},{"title":"ÂÆâË£Ö Apache Fury","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/start/install","content":"","keywords":"","version":"0.10"},{"title":"Fury Java ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fury","url":"/zh-CN/docs/0.10/docs/start/install#fury-java-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä†ÂØπ Apache Fury ÁöÑ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-core&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- row/arrow format support --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-format&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt; --&gt;   ","version":"0.10","tagName":"h3"},{"title":"Fury Scala ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fury","url":"/zh-CN/docs/0.10/docs/start/install#fury-scala-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 2.13 ÁöÑ Fury scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-scala_2.13&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 3 ÁöÑ Fury scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-scala_3&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 2.13 ÁöÑ Fury scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-scala_2.13&quot; % &quot;0.10.3&quot;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 3 ÁöÑ Fury scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-scala_3&quot; % &quot;0.10.3&quot;   ","version":"0.10","tagName":"h3"},{"title":"Fury Kotlin ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fury","url":"/zh-CN/docs/0.10/docs/start/install#fury-kotlin-ÂÆâË£Ö","content":" To add a dependency on Fury kotlin with maven, use the following:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-kotlin&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;  ","version":"0.10","tagName":"h2"},{"title":"Fury Row Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/specification/fury_row_format_spec","content":"","keywords":"","version":"0.10"},{"title":"Row Format‚Äã","type":1,"pageTitle":"Fury Row Format","url":"/zh-CN/docs/0.10/specification/fury_row_format_spec#row-format","content":" Coming soon ","version":"0.10","tagName":"h2"},{"title":"Apache Fury ‰ΩøÁî®","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/start/usage","content":"","keywords":"","version":"0.10"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#java-Â∫èÂàóÂåñ","content":" import java.util.List; import java.util.Arrays; import io.fury.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. Fury fury = Fury.builder().withLanguage(Language.JAVA) // Allow to deserialize objects unknown types, // more flexible but less secure. // .requireClassRegistration(false) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If secure mode enabled, all custom types must be registered. fury.register(SomeClass.class); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   ","version":"0.10","tagName":"h2"},{"title":"ScalaÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#scalaÂ∫èÂàóÂåñ","content":" import org.apache.fury.Fury import org.apache.fury.serializer.scala.ScalaSerializers case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fury: Fury = Fury.builder().withScalaOptimizationEnabled(true).build() // Register optimized fury serializers for scala ScalaSerializers.registerSerializers(fury) fury.register(classOf[Person]) fury.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fury.deserialize(fury.serialize(p))) println(fury.deserialize(fury.serialize(Point(1, 2, 3)))) } } ## KotlinÂ∫èÂàóÂåñ ```kotlin import org.apache.fury.Fury import org.apache.fury.ThreadSafeFury import org.apache.fury.serializer.kotlin.KotlinSerializers data class Person(val name: String, val id: Long, val github: String) data class Point(val x : Int, val y : Int, val z : Int) fun main(args: Array&lt;String&gt;) { // Ê≥®ÊÑè: ‰∏ãÈù¢ÁöÑFuryÂàùÂßãÂåñ‰ª£Á†ÅÂ∫îËØ•Âè™ÊâßË°å‰∏ÄÊ¨°ÔºåËÄå‰∏çÊòØÂú®ÊØèÊ¨°Â∫èÂàóÂåñÂâçÈÉΩËøêË°å val fury: ThreadSafeFury = Fury.builder().requireClassRegistration(true).buildThreadSafeFury() KotlinSerializers.registerSerializers(fury) fury.register(Person::class.java) fury.register(Point::class.java) val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fury.deserialize(fury.serialize(p))) println(fury.deserialize(fury.serialize(Point(1, 2, 3)))) }   ","version":"0.10","tagName":"h2"},{"title":"Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ","content":" ","version":"0.10","tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#java","content":" import com.google.common.collect.ImmutableMap; import io.fury.*; import java.util.Map; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ImmutableMap.of(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;io.fury.examples.ReferenceExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fury.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); ; } }   ","version":"0.10","tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#python","content":" from typing import Dict import pyfury class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fury = pyfury.Fury(ref_tracking=True) fury.register_class(SomeClass, &quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fury.serialize(obj) # bytes can be data serialized by other languages. print(fury.deserialize(data))   ","version":"0.10","tagName":"h3"},{"title":"Golangs‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#golangs","content":" package main import ( &quot;fmt&quot; furygo &quot;github.com/apache/fury/go/fury&quot; ) func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fury := furygo.NewFury(true) if err := fury.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fury.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   ","version":"0.10","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#javascript","content":" import Fury, { Type } from &quot;@furyjs/fury&quot;; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@furyjs/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const input = serialize({ foo: &quot;hello fury&quot; }); const result = deserialize(input); console.log(result);   ","version":"0.10","tagName":"h3"},{"title":"Rust‚Äã","type":1,"pageTitle":"Apache Fury ‰ΩøÁî®","url":"/zh-CN/docs/0.10/docs/start/usage#rust","content":" use fury::{from_buffer, to_buffer, Fury}; #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Animal { name: String, category: String, } #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.bar&quot;)] struct Person { name: String, age: u32, pets: Vec&lt;Animal&gt;, } fn main() { let penson = Person { name: &quot;hello&quot;.to_string(), age: 12, pets: vec![ Animal { name: &quot;world1&quot;.to_string(), category: &quot;cat&quot;.to_string(), }, Animal { name: &quot;world2&quot;.to_string(), category: &quot;dog&quot;.to_string(), }, ], }; let bin = to_buffer(&amp;penson); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(obj, penson); }  ","version":"0.10","tagName":"h3"},{"title":"Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/community/","content":"","keywords":"","version":"0.11"},{"title":"ÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#ÈÇÆ‰ª∂ÂàóË°®","content":" ÈÇÆ‰ª∂ÂàóË°®\tÊèèËø∞\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÊ¥ªÂä®dev@fory.apache.org\tÂºÄÂèëÁõ∏ÂÖ≥ËÆ®ËÆ∫\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä® commits@fory.apache.org\t‰ªìÂ∫ìÁöÑÊâÄÊúâ commits\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂè™ËØªÁöÑÈÇÆ‰ª∂ÂàóË°®\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä®  Âú®Â∞ùËØïÂèëÈÄÅÈÇÆ‰ª∂‰πãÂâçÔºåËØ∑Á°Æ‰øùËÆ¢ÈòÖ‰∏äËø∞ÁöÑÈÇÆ‰ª∂ÂàóË°®„ÄÇ  Â¶ÇÊûúÊÇ®Ê≤°ÊúâËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®ÔºåÊÇ®ÁöÑÈÇÆ‰ª∂Â∞ÜË¢´ÊãíÁªùÊàñ‰∏ç‰ºöÊî∂Âà∞ÂõûÂ§ç„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®","content":" Ë¶ÅÂèëÈÄÅÈÇÆ‰ª∂Ëá≥ÈÇÆ‰ª∂ÂàóË°®ÔºåËØ∑ÂÖàÈÄöËøá‰ª•‰∏ãÊñπÂºèËÆ¢ÈòÖÔºö  ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ listname-subscribe@fory.apache.orgÔºåÂπ∂Áõ∏Â∫îÊõøÊç¢ listnameÔºõÂõûÂ§çÊÇ®Â∞ÜÊî∂Âà∞ÁöÑÁ°ÆËÆ§ÁîµÂ≠êÈÇÆ‰ª∂Ôºå‰øùÊåÅÈÇÆ‰ª∂‰∏ªÈ¢òË°åÂÆåÊï¥ÔºõÁÑ∂ÂêéÊÇ®Â∞ÜÊî∂Âà∞‰∏ÄÂ∞ÅÊ¨¢ËøéÁöÑÁîµÂ≠êÈÇÆ‰ª∂ÔºåËÆ¢ÈòÖÊàêÂäü„ÄÇ  Âú®ËÆ®ËÆ∫ÁîµÂ≠êÈÇÆ‰ª∂‰∏≠ÁöÑ‰ª£Á†ÅÁâáÊÆµÊó∂ÔºåËØ∑Á°Æ‰øùÔºö  ÊÇ®‰∏çË¶ÅÈìæÊé•Âà∞Â§ñÈÉ®ÊúçÂä°‰∏≠ÁöÑÊñá‰ª∂ÔºåÂõ†‰∏∫Ê≠§Á±ªÊñá‰ª∂ÂèØËÉΩ‰ºöÊõ¥Êîπ„ÄÅË¢´Âà†Èô§ÊàñÈìæÊé•ÂèØËÉΩ‰ºö‰∏≠Êñ≠Ôºå‰ªéËÄå‰ΩøÂ≠òÊ°£ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Á∫øÁ®ãÂèòÂæóÊó†Áî®ÔºõÊÇ®Á≤òË¥¥ÊñáÊú¨ËÄå‰∏çÊòØÊñáÊú¨Â±èÂπïÊà™ÂõæÔºõÁ≤òË¥¥‰ª£Á†ÅÊó∂‰øùÊåÅÊ†ºÂºèÔºå‰ª•‰øùÊåÅ‰ª£Á†ÅÂèØËØªÔºõÊúâË∂≥Â§üÁöÑÂØºÂÖ•ËØ≠Âè•‰ª•ÈÅøÂÖç‰∫ßÁîü‰ª£Á†ÅÊ≠ß‰πâ„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Slack‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#slack","content":" ÊÇ®ÂèØ‰ª•Âä†ÂÖ•Slack ‰∏äÁöÑ Apache Fory‚Ñ¢ Á§æÂå∫„ÄÇ  ËøôÈáåÊúâ‰∏Ä‰∫õÁ§æÂå∫ËßÑÂàôÔºö  ‰øùÊåÅÂ∞äÈáçÂíåÂèãÂñÑÔºõÊâÄÊúâÈáçË¶ÅÁöÑÂÜ≥ÂÆöÂíåÁªìËÆ∫ÈÉΩÂøÖÈ°ªÂèçÊò†Âà∞ÈÇÆ‰ª∂ÂàóË°®‰∏≠„ÄÇ ‚ÄúÂ¶ÇÊûúËøôÊ≤°ÊúâÂú®ÈÇÆ‰ª∂ÂàóË°®‰∏≠ÊúâÁõ∏ÂÖ≥ÁöÑËÆ®ËÆ∫ËÆ∞ÂΩïÔºåÂàô‰ª£Ë°®ÂÆÉ‰∏çÁîüÊïà‚Äù ÔºõThe Apache WayÔºõ‰ΩøÁî® Slack Á∫øÁ®ãÊù•Èò≤Ê≠¢Âπ∂Ë°åÂØπËØùÊ∑πÊ≤°ÂΩìÂâçÁöÑÂØπËØùÈ¢ëÈÅìÔºõËØ∑‰∏çË¶ÅÁõ¥Êé•ÂêëÈÇÆ‰ª∂ÂàóË°®ÂèëÈÄÅ Bug fix„ÄÅIssue ÂàÜÈÖçÂíå Code Review Ê∂àÊÅØ„ÄÇËøô‰∫õÂÜÖÂÆπÂ∫îËØ•Ë¢´Á§æÂå∫Ë¥°ÁåÆËÄÖËá™ÊÑøÂ§ÑÁêÜÂπ∂ÂàÜÈÖç„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Issue Ë∑üË∏™‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#issue-Ë∑üË∏™","content":" Êàë‰ª¨‰ΩøÁî® GitHub Issues Êù•Ë∑üË∏™ÊâÄÊúâ IssuesÔºö  ‰ª£Á†ÅÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory/issuesÁΩëÁ´ôÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory-site/issues  ÊÇ®ÈúÄË¶ÅÊúâ‰∏Ä‰∏™ GitHub Â∏êÊà∑ ÊâçËÉΩÂàõÂª∫ÈóÆÈ¢ò„ÄÇ Â¶ÇÊûúÊÇ®Ê≤°Êúâ GitHub Â∏êÊà∑ÔºåÊÇ®ÂèØ‰ª•ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ dev@fory.apache.org„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Êä•Âëä Bug‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#Êä•Âëä-bug","content":" ÊÇ®Âú®Êä•Âëä Bug ‰πãÂâçÔºåÂ∫îËØ•Ôºö  È™åËØÅËØ• Bug Á°ÆÂÆûÂ≠òÂú®ÔºõÊêúÁ¥¢ Issue List ‰ª•Á°Æ‰øù‰∏çÂ≠òÂú®Áõ∏ÂÖ≥ Bug„ÄÇÂú® Issue List ‰∏≠ÂàõÂª∫ bug Êä•Âëä„ÄÇÂ¶ÇÊûúÂèØËÉΩÁöÑËØùÔºåÊ∑±ÂÖ•Á†îÁ©∂ Apache Fory‚Ñ¢ ÁöÑÊ∫ê‰ª£Á†ÅÔºåÂπ∂ÈíàÂØπÊÇ®Êä•ÂëäÁöÑ Bug Êèê‰∫§Ë°•‰∏ÅÔºåËøôÊúâÂä©‰∫éÂø´ÈÄü‰øÆÂ§ç Bug„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û","content":" Apache Fory‚Ñ¢ ÊòØ Apache ËΩØ‰ª∂Âü∫Èáë‰ºö ÁöÑ‰∏Ä‰∏™È°πÁõÆÔºåÈÅµÂæ™ ASF ÊºèÊ¥ûÂ§ÑÁêÜÊµÅÁ®ã„ÄÇ  Ë¶ÅÊä•ÂëäÊÇ®ÂèëÁé∞ÁöÑÊñ∞ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÔºåËØ∑ÈÅµÂæ™ ASF ÊºèÊ¥ûÊä•ÂëäÊµÅÁ®ãÔºåËØ•ÊµÅÁ®ãËß£Èáä‰∫ÜÂ¶Ç‰ΩïÁßÅ‰∏ãÂêëÁ§æÂå∫Áª¥Êä§ËÄÖÂèëÈÄÅËØ¶ÁªÜÁöÑÊºèÊ¥û‰ø°ÊÅØ„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"New Feature‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#new-feature","content":" Ê¨¢ËøéÊÇ®Â¢ûÂº∫ÂäüËÉΩÊàñÊñ∞ÂäüËÉΩÂª∫ËÆÆ„ÄÇÊèêÊ°àË∂äÂÖ∑‰Ωì„ÄÅË∂äÂêàÁêÜÔºåÊÇ®Âú® Apache Fory‚Ñ¢ Á§æÂå∫ÁöÑÂΩ±ÂìçÂäõÂ∞±Ë∂äÂ§ß„ÄÇÂÆÉÊúâÂèØËÉΩÂú®‰πãÂêéÁâàÊú¨ÂèëÂ∏É„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"È°πÁõÆÊ∫ê‰ª£Á†Å‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/0.11/community/#È°πÁõÆÊ∫ê‰ª£Á†Å","content":" Apache Fory‚Ñ¢ Core Â≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/foryApache Fory‚Ñ¢ ÁΩëÁ´ôÂ≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/fory-site ","version":"0.11","tagName":"h3"},{"title":"Fury Java Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec","content":"","keywords":"","version":"0.10"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#spec-overview","content":" Fury Java Serialization is an automatic object serialization framework that supports reference and polymorphism. Fury will convert an object from/to fury java serialization binary format. Fury has two core concepts for java serialization:  Fury Java Binary formatFramework to convert object to/from Fury Java Binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fury flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  Here is the overall format:  | fury header | object ref meta | object class meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fury will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.10","tagName":"h2"},{"title":"Fury header‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#fury-header","content":" Fury header consists starts one byte:  | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | optional 4 bytes | +---------------+-------+-------+--------+-------+------------------------------------+ | reserved bits | oob | xlang | endian | null | unsigned int for meta start offset |   null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fury java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.10","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fury will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fury doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a class), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  ","version":"0.10","tagName":"h2"},{"title":"Class Meta‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#class-meta","content":" Fury supports to register class by an optional id, the registration can be used for security check and class identification. If a class is registered, it will have a user-provided or an auto-growing unsigned int i.e. class_id.  Depending on whether meta share mode and registration is enabled for current class, Fury will write class meta differently.  ","version":"0.10","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#schema-consistent","content":" If schema consistent mode is enabled globally or enabled for current class, class meta will be written as follows:  If class is registered, it will be written as a fury unsigned varint: class_id &lt;&lt; 1.If class is not registered: If class is not an array, fury will write one byte 0bxxxxxxx1 first, then write class name. The first little bit is 1, which is different from first bit 0 of encoded class id. Fury can use this information to determine whether to read class by class id for deserialization. If class is not registered and class is an array, fury will write one byte dimensions &lt;&lt; 1 | 1 first, then write component class subsequently. This can reduce array class name cost if component class is or will be serialized.Class will be written as two enumerated fury unsigned by default: package name and class name. If meta share mode is enabled, class will be written as an unsigned varint which points to index in MetaContext.  ","version":"0.10","tagName":"h3"},{"title":"Schema evolution‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#schema-evolution","content":" If schema evolution mode is enabled globally or enabled for current class, class meta will be written as follows:  If meta share mode is not enabled, class meta will be written as schema consistent mode. Additionally, field meta such as field type and name will be written with the field value using a key-value like layout.If meta share mode is enabled, class meta will be written as a meta-share encoded binary if class hasn't been written before, otherwise an unsigned varint id which references to previous written class meta will be written.  ","version":"0.10","tagName":"h3"},{"title":"Meta share‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#meta-share","content":" This mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure doesn't lost shared meta. Meta streamline will be supported in the future for enclosed meta sharing which doesn't cross multiple serializations of different objects.  For Schema consistent mode, class will be encoded as an enumerated string by full class name. Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes global meta header | 1~2 bytes | variable bytes | variable bytes | variable bytes | +-------------------------------+-------------|--------------------+-------------------+----------------+ | 50 bits hash + 14 bits header | type header | current class meta | parent class meta | ... |   Class meta are encoded from parent class to leaf class, only class with serializable fields will be encoded.  ","version":"0.10","tagName":"h2"},{"title":"Global meta header‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#global-meta-header","content":" Meta header is a 64 bits number value encoded in little endian order.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  ","version":"0.10","tagName":"h3"},{"title":"Type header‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#type-header","content":" Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. If current class doesn't has parent class, or parent class doesn't have fields to serialize, or we're in a context which serialize fields of current class only(ObjectStreamSerializer#SlotInfo is an example), num classes will be 1.Other 4 bits are preserved to future extensions.If num classes are greater than or equal to 0b1111, write num_classes - 0b1111 as varuint next.  ","version":"0.10","tagName":"h3"},{"title":"Single layer class meta‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#single-layer-class-meta","content":" | unsigned varint | meta string | meta string | field info: variable bytes | variable bytes | ... | +----------------------------+-----------------------+---------------------+-------------------------------+-----------------+-----+ | num fields + register flag | header + package name | header + class name | header + type id + field name | next field info | ... |   num fields: encode num fields &lt;&lt; 1 | register flag(1 when class registered) as unsigned varint. If class is registered, then an unsigned varint class id will be written next, package and class name will be omitted.If current class is schema consistent, then num field will be 0 to flag it.If current class isn't schema consistent, then num field will be the number of compatible fields. For example, users can use tag id to mark some field as compatible field in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields. Package name encoding(omitted when class is registered): encoding algorithm: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIALHeader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Class name encoding(omitted when class is registered): encoding algorithm: UTF8/LOWER_UPPER_DIGIT_SPECIAL/FIRST_TO_LOWER_SPECIAL/ALL_TO_LOWER_SPECIALheader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Field info: header(8 bits): 3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag. Users can use annotation to provide those info. 2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be 11. size of field name: The 3 bits size: 0~7 will be used to indicate length 1~7, the value 6 the size read more bytes, the encoding will encode size - 7 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.polymorphism: when set to 1, the actual type of field will be the declared field type even the type if not final. type id: For registered type-consistent classes, it will be the registered class id.Otherwise it will be encoded as OBJECT_ID if it isn't final and FINAL_OBJECT_ID if it's final. The meta for such types is written separately instead of inlining here is to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too. Field name: If type id is set, type id will be used instead. Otherwise meta string encoding length and data will be written instead.  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fury field comparator. In this way, fury can compute statistics for field names or types and using a more compact encoding.  ","version":"0.10","tagName":"h3"},{"title":"Other layers class meta‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#other-layers-class-meta","content":" Same encoding algorithm as the previous layer except:  header + package name: Header: If package name has been written before: varint index + sharing flag(set) will be writtenIf package name hasn't been written before: If meta string encoding is LOWER_SPECIAL and the length of encoded string &lt;= 64, then header will be6 bits size + encoding flag(set) + sharing flag(unset).Otherwise, header will be 3 bits unset + 3 bits encoding flags + encoding flag(unset) + sharing flag(unset)  ","version":"0.10","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as class name and field names.  ","version":"0.10","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._$|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z[c1,c2] except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z[c1,c2]\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z[c1,c2]\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  For package name encoding, c1,c2 should be ._; For field/type name encoding, c1,c2 should be _$;Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.10","tagName":"h3"},{"title":"Shared meta string‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#shared-meta-string","content":" The shared meta string format consists of header and encoded string binary. Header of encoded string binary will be inlined in shared meta header.  Header is written using little endian order, Fury can read this flag first to determine how to deserialize the data.  Write by data‚Äã  If string hasn't been written before, the data will be written as follows:  | unsigned varint: string binary size + 1 bit: not written before | 56 bits: unique hash | 3 bits encoding flags + string binary |   If string binary size is less than 16 bytes, the hash will be omitted to save spaces. Unique hash can be omitted too if caller pass a flag to disable it. In such cases, the format will be:  | unsigned varint: string binary size + 1 bit: not written before | 3 bits encoding flags + string binary |   Write by ref‚Äã  If string has been written before, the data will be written as follows:  | unsigned varint: written string id + 1 bit: written before |   ","version":"0.10","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#value-format","content":" ","version":"0.10","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#basic-types","content":" Bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  Byte‚Äã  size: 1 byteformat: write as pure byte.  Short‚Äã  size: 2 bytebyte order: little endian order  Char‚Äã  size: 2 bytebyte order: little endian order  Unsigned int‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  Signed int‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encoding it as an unsigned int.  Unsigned long‚Äã  size: 1~9 byteFury PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  Signed long‚Äã  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  Float‚Äã  size: 4 byteformat: convert float to 4 bytes int by Float.floatToRawIntBits, then write as binary by little endian order.  Double‚Äã  size: 8 byteformat: convert double to 8 bytes int by Double.doubleToRawLongBits, then write as binary by little endian order.  ","version":"0.10","tagName":"h3"},{"title":"String‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#string","content":" Format:  | header: size &lt;&lt; 2 | 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned var long. The little 2 bits is used for encoding: 0 for latin, 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fury detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fury use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fury will use utf-8 to decode the data. But currently fury doesn't enable utf-8 encoding by default for java. Cross-language string serialization of fury uses utf-8 by default.  ","version":"0.10","tagName":"h3"},{"title":"Collection‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#collection","content":" All collection serializers must extend AbstractCollectionSerializer.  Format:  length(unsigned varint) | collection header | elements header | elements data   Collection header‚Äã  For ArrayList/LinkedArrayList/HashSet/LinkedHashSet, this will be empty.For TreeSet, this will be ComparatorFor subclass of ArrayList, this may be extra object field info.  Elements header‚Äã  In most cases, all collection elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the collection has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the collection element types are not declared type, use the 3rd bit 0b100 of the header to flag it.If the collection element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom class field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element class info.  CollectionSerializer#write/read can be taken as an example.  ","version":"0.10","tagName":"h3"},{"title":"Array‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#array","content":" Primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types.  Object array‚Äã  Object array is serialized using the collection format. Object component type will be taken as collection element generic type.  ","version":"0.10","tagName":"h3"},{"title":"Map‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#map","content":" All Map serializers must extend AbstractMapSerializer.  Format:  | length(unsigned varint) | map header | key value pairs data |   Map header‚Äã  For HashMap/LinkedHashMap, this will be empty.For TreeMap, this will be ComparatorFor other Map, this may be extra object field info.  Map Key-Value data‚Äã  Map iteration is too expensive, Fury won't compute the header like for collection before since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide header in advance. Otherwise Fury will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fury will serialize map chunk by chunk, every chunk has 127 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fury can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  ","version":"0.10","tagName":"h3"},{"title":"Enum‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.10","tagName":"h3"},{"title":"Object‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#object","content":" Object means object of pojo/struct/bean/record type. Object will be serialized by writing its fields data in fury order.  Depending on schema compatibility, objects will have different formats.  Field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.boxed primitive fields: same order as primitive fieldsfinal fields: same type together, then sorted by field name lexicographically.collection fields: same order as final fieldsmap fields: same order as final fieldsother fields: same order as final fields  Schema consistent‚Äã  Object fields will be serialized one by one using following format:  Primitive field value: | var bytes | +----------------+ | value data | +----------------+ Boxed field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | class meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | class meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For this object type itself, schema consistent mode will write class by id/name, but schema evolution mode will write class field names, types and other meta too, see Class meta.Class meta of final custom type needs to be written too, because peers may not have this class defined.  ","version":"0.10","tagName":"h3"},{"title":"Class‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#class","content":" Class will be serialized using class meta format.  ","version":"0.10","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_java_serialization_spec#implementation-guidelines","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches. ","version":"0.10","tagName":"h2"},{"title":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/community/how_to_join_community","content":"","keywords":"","version":"0.11"},{"title":"Apache Fory‚Ñ¢ Ë¥°ÁåÆÊåáÂçó‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#apache-fory-Ë¥°ÁåÆÊåáÂçó","content":" Apache Fory‚Ñ¢ Âõ¢ÈòüÈÄöÂ∏∏Âú® github ‰∏äËøõË°åÂºÄÂèëÂíå issue Áª¥Êä§ÔºåËØ∑ÊâìÂºÄ¬†Github ÁΩëÁ´ôÔºåÁÇπÂáªÂè≥‰∏äËßí¬†Sign up¬†ÊåâÈíÆÔºåÊ≥®ÂÜå‰∏Ä‰∏™Ëá™Â∑±ÁöÑË¥¶Âè∑ÔºåÂºÄÂêØ‰Ω†ÂºÄÊ∫ê‰πãÊóÖÁöÑÁ¨¨‰∏ÄÊ≠•„ÄÇ  Âú®¬†Apache Fory‚Ñ¢ ‰ªìÂ∫ì‰∏≠ÔºåÊàë‰ª¨Êúâ‰∏Ä‰ªΩÈù¢ÂêëÊâÄÊúâÂºÄÊ∫êË¥°ÁåÆËÄÖÁöÑÊåáÂçóÔºå‰ªãÁªç‰∫ÜÊúâÂÖ≥ÁâàÊú¨ÁÆ°ÁêÜ„ÄÅÂàÜÊîØÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåËØ∑Ëä±Âá†ÂàÜÈíüÊó∂Èó¥ÈòÖËØª‰∫ÜËß£‰∏Ä‰∏ã„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™-pull-request","content":" ","version":"0.11","tagName":"h2"},{"title":"Step0ÔºöÂÆâË£Ö Git‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step0ÂÆâË£Ö-git","content":" Git ÊòØ‰∏ÄÁßçÁâàÊú¨ÊéßÂà∂Á≥ªÁªüÔºåÁî®‰∫éË∑üË∏™ÂíåÁÆ°ÁêÜËΩØ‰ª∂ÂºÄÂèëÈ°πÁõÆ‰∏≠ÁöÑ‰ª£Á†ÅÂèòÊõ¥„ÄÇÂÆÉÂ∏ÆÂä©ÂºÄÂèëËÄÖËÆ∞ÂΩïÂíåÁÆ°ÁêÜ‰ª£Á†ÅÁöÑÂéÜÂè≤ËÆ∞ÂΩïÔºåÊñπ‰æøÂõ¢ÈòüÂçè‰Ωú„ÄÅ‰ª£Á†ÅÁâàÊú¨ÊéßÂà∂„ÄÅÂêàÂπ∂‰ª£Á†ÅÁ≠âÊìç‰Ωú„ÄÇÈÄöËøá GitÔºåÊÇ®ÂèØ‰ª•ËøΩË∏™ÊØè‰∏™Êñá‰ª∂ÁöÑÊØè‰∏™ÁâàÊú¨ÔºåÂπ∂ËΩªÊùæÂú∞Âú®‰∏çÂêåÁâàÊú¨‰πãÈó¥ËøõË°åÂàáÊç¢ÂíåÊØîËæÉ„ÄÇGit ËøòÊèê‰æõ‰∫ÜÂàÜÊîØÁÆ°ÁêÜÂäüËÉΩÔºå‰ΩøÂæóÂèØ‰ª•ÂêåÊó∂ËøõË°åÂ§ö‰∏™Âπ∂Ë°åÂºÄÂèë‰ªªÂä°„ÄÇ  ËÆøÈóÆ Git ÂÆòÊñπÁΩëÁ´ôÔºöhttps://git-scm.com‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨ÁöÑ Git ÂÆâË£ÖÁ®ãÂ∫è„ÄÇËøêË°å‰∏ãËΩΩÁöÑÂÆâË£ÖÁ®ãÂ∫èÔºåÊåâÁÖßÂÆâË£ÖÂêëÂØºÁöÑÊèêÁ§∫ËøõË°åÂÆâË£Ö„ÄÇÂÆâË£ÖÂÆåÊàêÂêéÔºå‰Ω†ÂèØ‰ª•ÈÄöËøáÂëΩ‰ª§Ë°å‰ΩøÁî®¬†git version¬†ÂëΩ‰ª§Á°ÆËÆ§ÂÆâË£ÖÊàêÂäü„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Step1ÔºöFork È°πÁõÆ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step1fork-È°πÁõÆ","content":" È¶ñÂÖàÈúÄË¶Å fork Ëøô‰∏™È°πÁõÆÔºåËøõÂÖ•ForyÈ°πÁõÆÈ°µÈù¢ÔºåÁÇπÂáªÂè≥‰∏äËßíÁöÑ Fork ÊåâÈíÆ‰Ω†ÁöÑ github Â∏êÂè∑‰∏≠‰ºöÂá∫Áé∞ xxxx(‰Ω†ÁöÑ github Áî®Êà∑Âêç)/fory Ëøô‰∏™È°πÁõÆÂú®Êú¨Âú∞ÁîµËÑë‰∏ä‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§: ÂæóÂà∞‰∏Ä‰∏™ fory Êñá‰ª∂Â§π  // ssh git clone git@github.com:xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git // https git clone https://github.com/xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git   ","version":"0.11","tagName":"h3"},{"title":"Step2ÔºöËé∑ÂèñÈ°πÁõÆ‰ª£Á†Å‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step2Ëé∑ÂèñÈ°πÁõÆ‰ª£Á†Å","content":" ËøõÂÖ• fory Êñá‰ª∂Â§πÔºåÊ∑ªÂä† fory ÁöÑËøúÁ®ãÂú∞ÂùÄ  git remote add upstream https://github.com/apache/fory.git   ","version":"0.11","tagName":"h3"},{"title":"Step3ÔºöÂàõÂª∫ÂàÜÊîØ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step3ÂàõÂª∫ÂàÜÊîØ","content":" Â•Ω‰∫ÜÔºåÁé∞Âú®ÂèØ‰ª•ÂºÄÂßãË¥°ÁåÆÊàë‰ª¨ÁöÑ‰ª£Á†Å‰∫Ü„ÄÇfory ÈªòËÆ§ÂàÜÊîØ‰∏∫ main ÂàÜÊîØ„ÄÇÊó†ËÆ∫ÊòØÂäüËÉΩÂºÄÂèë„ÄÅbug ‰øÆÂ§ç„ÄÅÊñáÊ°£ÁºñÂÜôÔºåÈÉΩËØ∑Êñ∞Âª∫Á´ã‰∏Ä‰∏™ÂàÜÊîØÔºåÂÜçÂêàÂπ∂Âà∞ main ÂàÜÊîØ‰∏ä„ÄÇ‰ΩøÁî®‰ª•‰∏ã‰ª£Á†ÅÂàõÂª∫ÂàÜÊîØÔºö  // ÂàõÂª∫ÂäüËÉΩÂºÄÂèëÂàÜÊîØ git checkout -b feat/xxxx // ÂàõÂª∫ÈóÆÈ¢ò‰øÆÂ§çÂºÄÂèëÂàÜÊîØ git checkout -b fix/xxxx // ÂàõÂª∫ÊñáÊ°£„ÄÅdemoÂàÜÊîØ git checkout -b docs/add-java-demo   ÂÅáËÆæÊàë‰ª¨ÂàõÂª∫‰∫ÜÊñáÊ°£‰øÆÊîπÂàÜÊîØ¬†docs/add-java-demo  ÂÅáËÆæÊàë‰ª¨Â∑≤ÁªèÊ∑ªÂä†‰∫Ü‰∏Ä‰∫õ‰ª£Á†ÅÔºåÊèê‰∫§Âà∞‰ª£Á†ÅÂ∫ì git add . git commit -a -m &quot;docs: add java demo and related docs&quot; „ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Step4ÔºöÂêàÂπ∂‰øÆÊîπ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step4ÂêàÂπ∂‰øÆÊîπ","content":" ÂàáÊç¢ÂõûËá™Â∑±ÁöÑÂºÄÂèëÂàÜÊîØ:  git checkout docs/add-java-demo   ÊääÊõ¥Êñ∞‰ª£Á†ÅÊèê‰∫§Âà∞Ëá™Â∑±ÁöÑÂàÜÊîØ‰∏≠:  git push origin docs/add-java-demo   ","version":"0.11","tagName":"h3"},{"title":"Step5ÔºöÊèê‰∫§ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#step5Êèê‰∫§-pull-request","content":" ‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑ github ‰ª£Á†Å‰ªìÂ∫ìÈ°µÈù¢ÁÇπÂáª¬†Compare &amp; pull request¬†ÊåâÈíÆ„ÄÇÊàñÈÄöËøá¬†contribute¬†ÊåâÈíÆÂàõÂª∫„ÄÇ  Â°´ÂÜôËøôÊòØ‰ªÄ‰πàÁ±ªÂûãÁöÑ‰øÆÊîπÂ°´ÂÜôÂÖ≥ËÅîÁöÑ issueËã•ÊúâÂ§çÊùÇÂèòÊõ¥ÔºåËØ∑ËØ¥ÊòéËÉåÊôØÂíåËß£ÂÜ≥ÊñπÊ°à  Áõ∏ÂÖ≥‰ø°ÊÅØÂ°´ÂÜôÂÆåÊàêÂêéÔºåÁÇπÂáª Create pull request Êèê‰∫§„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ËΩªÊùæÊ≠•ÂÖ• Apache Fory‚Ñ¢ ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#ËΩªÊùæÊ≠•ÂÖ•-apache-fory-ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ","content":" &quot;good first issue&quot; ÊòØ‰∏Ä‰∏™Âú®ÂºÄÊ∫êÁ§æÂå∫Â∏∏ËßÅÁöÑÊ†áÁ≠æÔºåËøô‰∏™Ê†áÁ≠æÁöÑÁõÆÁöÑÊòØÂ∏ÆÂä©Êñ∞Ë¥°ÁåÆËÄÖÊâæÂà∞ÈÄÇÂêàÂÖ•Èó®ÁöÑÈóÆÈ¢ò„ÄÇ  Apache Fory‚Ñ¢ ÁöÑÂÖ•Èó®ÈóÆÈ¢òÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá¬†issue ÂàóË°®Êü•Áúã„ÄÇ  Â¶ÇÊûú‰Ω†ÂΩìÂâçÊúâÊó∂Èó¥ÂíåÊÑèÊÑøÂèÇ‰∏éÂà∞Á§æÂå∫Ë¥°ÁåÆÔºåÂèØ‰ª•Âú® issue ÈáåÁúã‰∏ÄÁúã¬†good first issueÔºåÈÄâÊã©‰∏Ä‰∏™ÊÑüÂÖ¥Ë∂£„ÄÅÈÄÇÂêàËá™Â∑±ÁöÑËÆ§È¢Ü„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Êã•Êä± Apache Fory‚Ñ¢ Á§æÂå∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/0.11/community/how_to_join_community#Êã•Êä±-apache-fory-Á§æÂå∫","content":" Âú®‰Ω†‰∏∫ Apache Fory‚Ñ¢ Ë¥°ÁåÆ‰ª£Á†Å‰πã‰ΩôÔºåÊàë‰ª¨ÈºìÂä±‰Ω†ÂèÇ‰∏éÂÖ∂‰ªñËÆ©Á§æÂå∫Êõ¥Âä†ÁπÅËç£ÁöÑ‰∫ãÊÉÖÔºåÊØîÂ¶ÇÔºö  ‰∏∫È°πÁõÆÁöÑÂèëÂ±ï„ÄÅÂäüËÉΩËßÑÂàí Á≠âÊèêÂª∫ËÆÆ„ÄÇÂàõ‰ΩúÊñáÁ´†„ÄÅËßÜÈ¢ëÔºåÂºÄÂäûËÆ≤Â∫ßÊù•ÂÆ£‰º† Apache Fory‚Ñ¢Êí∞ÂÜôÊé®ÂπøËÆ°ÂàíÔºåÂêåÂõ¢Èòü‰∏ÄÂêåÊâßË°å„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"0.10"},{"title":"Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide#Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ","version":"0.10","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã","content":" Apache FuryÂèØ‰ª•Ëá™Âä®Â∫èÂàóÂåñÁºñÁ®ãËØ≠Ë®ÄÁöÑÂ∏∏ËßÅÊï∞ÊçÆÁ±ªÂûãÔºöprimitive numeric types, string, binary, array, list, map Á≠â„ÄÇ  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fury.serialize(list); // bytes can be data serialized by other languages. fury.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fury.serialize(map); // bytes can be data serialized by other languages. fury.deserialize(bytes); } }   Python  import pyfury import numpy as np fury = pyfury.Fury() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fury.serialize(object_list) # bytes can be data serialized by other languages. new_list = fury.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fury.serialize(object_map) # bytes can be data serialized by other languages. new_map = fury.deserialize(data) print(new_map)   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fury := furygo.NewFury() bytes, err := fury.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fury.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury from &quot;@furyjs/fury&quot;; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@furyjs/hps&quot;; const fury = new Fury({ hps }); const input = fury.serialize(&quot;hello fury&quot;); const result = fury.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fury::{from_buffer, to_buffer, Fury}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"0.10","tagName":"h3"},{"title":"Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã","content":" Â∫èÂàóÂåñÁî®Êà∑ÂÆö‰πâÁöÑÁ±ªÂûãÈúÄË¶Å‰ΩøÁî®Ê≥®ÂÜå API Ê≥®ÂÜåËá™ÂÆö‰πâÁ±ªÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåËØ≠Ë®Ä‰∏≠Âª∫Á´ãÁ±ªÂûã‰πãÈó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fury.examples.Example2&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); fury.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fury.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfury, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfury.Int8Type, pyfury.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfury.Int8Type, pyfury.Int32Type] = None f5: pyfury.Int8Type = None f6: pyfury.Int16Type = None f7: pyfury.Int32Type = None # int type will be taken as `pyfury.Int64Type`. # use `pyfury.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfury.Float32Type = None # float type will be taken as `pyfury.Float64Type` f10: float = None f11: pyfury.Int16ArrayType = None f12: List[pyfury.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfury.Fury() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fury.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fury := furygo.NewFury() if err := fury.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fury.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fury.MaxInt8 obj.F6 = fury.MaxInt16 obj.F7 = fury.MaxInt32 obj.F8 = fury.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fury.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury, { Type, InternalSerializerType } from &quot;@furyjs/fury&quot;; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@furyjs/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const input = serialize({ foo: &quot;hello fury&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fury::{from_buffer, to_buffer, Fury}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"0.10","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®","content":" ÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÂèØËá™Âä®Â∫èÂàóÂåñÔºå‰∏ç‰ºöÂá∫Áé∞ÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØ„ÄÇ  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fury.examples.ReferenceExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fury.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); } }   Python  from typing import Dict import pyfury class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fury = pyfury.Fury(ref_tracking=True) fury.register_class(SomeClass, type_tag=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fury.serialize(obj) # bytes can be data serialized by other languages. print(fury.deserialize(data))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fury := furygo.NewFury(true) if err := fury.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fury.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury, { Type } from '@furyjs/fury'; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@furyjs/hps'; const description = Type.object('example.foo', { foo: Type.string(), bar: Type.object('example.foo'), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const data: any = { foo: 'hello fury', }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   JavaScriptReference cannot be implemented because of rust ownership restrictions  ","version":"0.10","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñÊåáÂçó","url":"/zh-CN/docs/0.10/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fury.*; import org.apache.fury.config.*; import org.apache.fury.serializers.BufferObject; import org.apache.fury.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fury.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fury.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fury.deserialize(bytes, buffers)); } }   Python  import array import pyfury import numpy as np fury = pyfury.Fury() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fury.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fury.deserialize(data, buffers=buffers))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { fury := furygo.NewFury() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fury.NewByteBuffer(nil) var bufferObjects []fury.BufferObject fury.Serialize(buf, list, func(o fury.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fury.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fury.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"0.10","tagName":"h3"},{"title":"Fury Xlang Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec","content":"","keywords":"","version":"0.10"},{"title":"Cross-language Serialization Specification‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#cross-language-serialization-specification","content":" Format Version History: Version 0.1 - serialization spec formalized  Fury xlang serialization is an automatic object serialization framework that supports reference and polymorphism. Fury will convert an object from/to fury xlang serialization binary format. Fury has two core concepts for xlang serialization:  Fury xlang binary formatFramework implemented in different languages to convert object to/from Fury xlang binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fury flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  ","version":"0.10","tagName":"h2"},{"title":"Type Systems‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type-systems","content":" ","version":"0.10","tagName":"h2"},{"title":"Data Types‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#data-types","content":" bool: a boolean value (true or false).int8: a 8-bit signed integer.int16: a 16-bit signed integer.int32: a 32-bit signed integer.var_int32: a 32-bit signed integer which use fury var_int32 encoding.int64: a 64-bit signed integer.var_int64: a 64-bit signed integer which use fury PVL encoding.sli_int64: a 64-bit signed integer which use fury SLI encoding.float16: a 16-bit floating point number.float32: a 32-bit floating point number.float64: a 64-bit floating point number including NaN and Infinity.string: a text string encoded using Latin1/UTF16/UTF-8 encoding.enum: a data type consisting of a set of named values. Rust enum with non-predefined field values are not supported as an enum.named_enum: an enum whose value will be serialized as the registered name.struct: a morphic(final) type serialized by Fury Struct serializer. i.e. it doesn't have subclasses. Suppose we're deserializing List&lt;SomeClass&gt;, we can save dynamic serializer dispatch since SomeClass is morphic(final).compatible_struct: a morphic(final) type serialized by Fury compatible Struct serializer.named_struct: a struct whose type mapping will be encoded as a name.named_compatible_struct: a compatible_struct whose type mapping will be encoded as a name.ext: a type which will be serialized by a customized serializer.named_ext: an ext type whose type mapping will be encoded as a name.list: a sequence of objects.set: an unordered set of unique elements.map: a map of key-value pairs. Mutable types such as list/map/set/array/tensor/arrow are not allowed as key of map.duration: an absolute length of time, independent of any calendar/timezone, as a count of nanoseconds.timestamp: a point in time, independent of any calendar/timezone, as a count of nanoseconds. The count is relative to an epoch at UTC midnight on January 1, 1970.local_date: a naive date without timezone. The count is days relative to an epoch at UTC midnight on Jan 1, 1970.decimal: exact decimal value represented as an integer value in two's complement.binary: an variable-length array of bytes.array: only allow 1d numeric components. Other arrays will be taken as List. The implementation should support the interoperability between array and list. bool_array: one dimensional int16 array.int8_array: one dimensional int8 array.int16_array: one dimensional int16 array.int32_array: one dimensional int32 array.int64_array: one dimensional int64 array.float16_array: one dimensional half_float_16 array.float32_array: one dimensional float32 array.float64_array: one dimensional float64 array. tensor: multidimensional array which every sub-array have same size and type.arrow record batch: an arrow record batch object.arrow table: an arrow table object.  Note:  Unsigned int/long are not added here, since not every language support those types.  ","version":"0.10","tagName":"h3"},{"title":"Polymorphisms‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#polymorphisms","content":" For polymorphism, if one non-final class is registered, and only one subclass is registered, then we can take all elements in List/Map have same type, thus reduce runtime check cost.  Collection/Array polymorphism are not fully supported, since some languages such as golang have only one collection type. If users want to get exactly the type he passed, he must pass that type when deserializing or annotate that type to the field of struct.  ","version":"0.10","tagName":"h3"},{"title":"Type disambiguation‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type-disambiguation","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages. When deserializing, Fury use the target data structure type and the data type in the data jointly to determine how to deserialize and populate the target data structure. For example:  class Foo { int[] intArray; Object[] objects; List&lt;Object&gt; objectList; } class Foo2 { int[] intArray; List&lt;Object&gt; objects; List&lt;Object&gt; objectList; }   intArray has an int32_array type. But both objects and objectList fields in the serialize data have list data type. When deserializing, the implementation will create an Object array for objects, but create a ArrayListfor objectList to populate its elements. And the serialized data of Foo can be deserialized into Foo2 too.  Users can also provide meta hints for fields of a type, or the type whole. Here is an example in java which use annotation to provide such information.  @FuryObject(fieldsNullable = false, trackingRef = false) class Foo { @FuryField(trackingRef = false) int[] intArray; @FuryField(polymorphic = true) Object object; @FuryField(tagId = 1, nullable = true) List&lt;Object&gt; objectList; }   Such information can be provided in other languages too:  cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  ","version":"0.10","tagName":"h3"},{"title":"Type ID‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type-id","content":" All internal data types are expressed using an ID in range 0~64. Users can use 0~4096 for representing their types.  ","version":"0.10","tagName":"h3"},{"title":"Type mapping‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type-mapping","content":" See Type mapping  ","version":"0.10","tagName":"h3"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#spec-overview","content":" Here is the overall format:  | fury header | object ref meta | object type meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fury will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.10","tagName":"h2"},{"title":"Fury header‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#fury-header","content":" Fury header consists starts one byte:  | 2 bytes | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | 1 byte | optional 4 bytes | +--------------+---------------+-------+-------+--------+-------+------------+------------------------------------+ | magic number | reserved bits | oob | xlang | endian | null | language | unsigned int for meta start offset |   magic number: used to identify fury serialization protocol, current version use 0x62d4.null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fury java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.language: the language when serializing objects, such as JAVA, PYTHON, GO, etc. Fury can use this flag to determine whether spend more time on serialization to make the deserialization faster for dynamic languages.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.10","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fury will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fury doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a type), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  For languages which doesn't support reference such as rust, reference tracking must be disabled for correct deserialization by fury rust implementation.  For languages whose object values are not null by default:  In rust, Fury takes Option:None as a null valueIn c++, Fury takes std::nullopt as a null valueIn golang, Fury takes null interface/pointer as a null value  If one want to deserialize in languages like Java/Python/JavaScript, he should mark the type with all fields not-null by default, or using schema-evolution mode to carry the not-null fields info in the data.  ","version":"0.10","tagName":"h2"},{"title":"Type Meta‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type-meta","content":" For every type to be serialized, it have a type id to indicate its type.  basic types: the type idenum: Type.ENUM + registered idType.NAMED_ENUM + registered namespace+typename list: Type.Listset: Type.SETmap: Type.MAPext: Type.EXT + registered idType.NAMED_EXT + registered namespace+typename struct: Type.STRUCT + struct metaType.NAMED_STRUCT + struct meta  Every type must be registered with an ID or name first. The registration can be used for security check and type identification.  Struct is a special type, depending whether schema compatibility is enabled, Fury will write struct meta differently.  ","version":"0.10","tagName":"h2"},{"title":"Struct Schema consistent‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#struct-schema-consistent","content":" If schema consistent mode is enabled globally when creating fury, type meta will be written as a fury unsigned varint of type_id. Schema evolution related meta will be ignored.If schema evolution mode is enabled globally when creating fury, and current class is configured to use schema consistent mode like struct vs table in flatbuffers: Type meta will be add to captured_type_defs: captured_type_defs[type def stub] = map size ahead when registering type.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.  ","version":"0.10","tagName":"h3"},{"title":"Struct Schema evolution‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#struct-schema-evolution","content":" If schema evolution mode is enabled globally when creating fury, and enabled for current type, type meta will be written using one of the following mode. Which mode to use is configured when creating fury.  Normal mode(meta share not enabled): If type meta hasn't been written before, add type defto captured_type_defs: captured_type_defs[type def] = map size.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.After finished the serialization of the object graph, fury will start to write captured_type_defs: Firstly, set current to meta start offset of fury header Then write captured_type_defs one by one: buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs)) for type_meta in writting_type_defs: if not type_meta.is_stub(): type_meta.write_type_def(buffer) writing_type_defs = copy(schema_consistent_type_def_stubs) Meta share mode: the writing steps are same as the normal mode, but captured_type_defs will be shared across multiple serializations of different objects. For example, suppose we have a batch to serialize: captured_type_defs = {} stream = ... # add `Type1` to `captured_type_defs` and write `Type1` fury.serialize(stream, [Type1()]) # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before. fury.serialize(stream, [Type1(), Type2()]) # `Type1` and `Type2` are written before, no need to write meta. fury.serialize(stream, [Type1(), Type2()]) Streaming mode(streaming mode doesn't support meta share): If type meta hasn't been written before, the data will be written as: | unsigned varint: 0b11111111 | type def | If type meta has been written before, the data will be written as: | unsigned varint: written index &lt;&lt; 1 | written index is the id in captured_type_defs. With this mode, meta start offset can be omitted.  The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure in meta share mode doesn't lost shared meta.  Type Def‚Äã  Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | +----------------------+--------------------+-------------------+ | global binary header | meta header | fields meta |   For languages which support inheritance, if parent class and subclass has fields with same name, using field in subclass.  Global binary header‚Äã  50 bits hash + 1bit compress flag + write fields meta + 12 bits meta size. Right is the lower bits.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  Meta header‚Äã  Meta header is a 8 bits number value.  Lowest 5 digits 0b00000~0b11110 are used to record num fields. 0b11111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. Note that num_fields is the number of compatible fields. Users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields.The 6th bit: 0 for registered by id, 1 for registered by name.Remaining 2 bits are reserved for future extension.  Fields meta‚Äã  Format:  | field info: variable bytes | variable bytes | ... | +---------------------------------+-----------------+-----+ | header + type info + field name | next field info | ... |   Field Header‚Äã  Field Header is 8 bits, annotation can be used to provide more specific info. If annotation not exists, fury will infer those info automatically.  The format for field header is:  2 bits field name encoding + 4 bits size + nullability flag + ref tracking flag   Detailed spec:  2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, field name will be written by an unsigned varint tag id, and 2 bits encoding will be 11. size of field name: The 4 bits size: 0~14 will be used to indicate length 1~15, the value 15 indicates to read more bytes, the encoding will encode size - 15 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.  Field Type Info‚Äã  Field type info is written as unsigned int8. Detailed id spec is:  For struct registered by id, it will be Type.STRUCT.For struct registered by name, it will be Type.NAMED_STRUCT.For enum registered by id, it will be Type.ENUM.For enum registered by name, it will be Type.NAMED_ENUM.For ext type registered by id, it will be Type.EXT.For ext type registered by name, it will be Type.NAMED_EXT.For list/set type, it will be written as Type.LIST/SET, then write element type recursively.For 1D primitive array type, it will be written as Type.XXX_ARRAY.For multi-dimensional primitive array type with same size on each dim, it will be written as Type.TENSOR.For other array type, it will be written as Type.LIST, then write element type recursively.For map type, it will be written as Type.MAP, then write key and value type recursively.For other types supported by fury directly, it will be fury type id for that type.For other types not determined at compile time, write Type.UNKNOWN instead. For such types, actual type will be written when serializing such field values.  Polymorphism spec:  struct/named_struct/ext/named_ext are taken as polymorphic, the meta for those types are written separately instead of inlining here to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too.enum is taken as morphic, if deserialization doesn't have this field, or the type is not enum, enum value will be skipped.list/map/set are taken as morphic, when serializing values of those type, the concrete types won't be written again.Other types that fury supported are taken as morphic too.  List/Set/Map nested type spec:  list: | list type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |set: | set type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |map: | set type id | key type info | value type info | Key type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |Value type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |  Field Name‚Äã  If tag id is set, tag id will be used instead. Otherwise meta string of field name will be written instead.  Field order‚Äã  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fury fields sort algorithms. In this way, fury can compute statistics for field names or types and using a more compact encoding.  ","version":"0.10","tagName":"h3"},{"title":"Extended Type Meta with Inheritance support‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#extended-type-meta-with-inheritance-support","content":" If one want to support inheritance for struct, one can implement following spec.  ","version":"0.10","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#schema-consistent","content":" Fields are serialized from parent type to leaf type. Fields are sorted using fury struct fields sort algorithms.  ","version":"0.10","tagName":"h3"},{"title":"Schema Evolution‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#schema-evolution","content":" Meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | variable bytes | variable bytes | +----------------------+----------------+----------------+--------------------+--------------------+ | global binary header | meta header | fields meta | parent meta header | parent fields meta |   Meta header‚Äã  Meta header is a 64 bits number value encoded in little endian order.  Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. If current type doesn't has parent type, or parent type doesn't have fields to serialize, or we're in a context which serialize fields of current type only, num classes will be 1.The 5th bit is used to indicate whether this type needs schema evolution.Other 56 bits are used to store the unique hash of flags + all layers type meta.  Single layer type meta‚Äã  | unsigned varint | var uint | field info: variable bytes | variable bytes | ... | +-----------------+----------+-------------------------------+-----------------+-----+ | num_fields | type id | header + type id + field name | next field info | ... |   Other layers type meta‚Äã  Same encoding algorithm as the previous layer.  ","version":"0.10","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as field names.  ","version":"0.10","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.10","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#value-format","content":" ","version":"0.10","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#basic-types","content":" bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  int8‚Äã  size: 1 byteformat: write as pure byte.  int16‚Äã  size: 2 bytebyte order: raw bytes of little endian order  unsigned int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  unsigned varint32‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  signed int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  signed varint32‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encode it as an unsigned varint.  unsigned int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  unsigned varint64‚Äã  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [0, 2147483647], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  signed int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  signed varint64‚Äã  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  float32‚Äã  size: 4 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;single format&quot; bit layout, preserving Not-a-Number (NaN) values, then write as binary by little endian order.  float64‚Äã  size: 8 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;double format&quot; bit layout, preserving Not-a-Number (NaN) values. then write as binary by little endian order.  ","version":"0.10","tagName":"h3"},{"title":"string‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#string","content":" Format:  | unsigned varint64: size &lt;&lt; 2 `bitor` 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned varint64. The little 2 bits is used for encoding: 0 for latin1(ISO-8859-1), 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fury detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fury use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fury will use utf-8 to decode the data. Cross-language string serialization of fury uses utf-8 by default.  ","version":"0.10","tagName":"h3"},{"title":"list‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#list","content":" Format:  | unsigned varint64: length | 1 byte elements header | elements data |   elements header‚Äã  In most cases, all elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the elements have null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the element types are not the declared type, use the 3rd bit 0b100 of the header to flag it.If the element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom type field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element type info.  fury = ... buffer = ... elems = ... if element_type_is_same: if not is_declared_type: fury.write_type(buffer, elem_type) elem_serializer = get_serializer(...) if track_ref: for elem in elems: if not ref_resolver.write_ref_or_null(buffer, elem): elem_serializer.write(buffer, elem) elif has_null: for elem in elems: if elem is None: buffer.write_byte(null_flag) else: buffer.write_byte(not_null_flag) elem_serializer.write(buffer, elem) else: for elem in elems: elem_serializer.write(buffer, elem) else: if track_ref: for elem in elems: fury.write_ref(buffer, elem) elif has_null: for elem in elems: fury.write_nullable(buffer, elem) else: for elem in elems: fury.write_value(buffer, elem)   CollectionSerializer#writeElementscan be taken as an example.  ","version":"0.10","tagName":"h3"},{"title":"array‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#array","content":" primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types or mark it as list type.  Tensor‚Äã  Tensor is a special primitive multi-dimensional array which all dimensions have same size and type. The serialization format is:  | num_dims(unsigned varint) | shape[0](unsigned varint) | shape[...] | shape[N] | element type | data |   The data is continuous to reduce copy and may zero-copy in some cases.  object array‚Äã  Object array is serialized using the list format. Object component type will be taken as list element generic type.  ","version":"0.10","tagName":"h3"},{"title":"map‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#map","content":" Map uses a chunk by chunk based Format:  | length(unsigned varint) | key value chunk data | ... | key value chunk data |   map key-value chunk data‚Äã  Map iteration is too expensive, Fury won't compute the header like for list since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide the header in advance. Otherwise Fury will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fury will serialize the map chunk by chunk, every chunk has 255 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fury can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. For languages such as golang, this can be computed in advance for non-interface types most times. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Why serialize chunk by chunk?‚Äã  When fury will use first key-value pair to predict header optimistically, it can't know how many pairs have same meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at least X bytes to take up a place for later to update the number which has same elements, X is the num_bytes for encoding varint encoding of map size.  And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust, which object are not reference by default.  Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share meta.  The implementation can accumulate read count with map size to decide whether to read more chunks.  ","version":"0.10","tagName":"h3"},{"title":"enum‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.10","tagName":"h3"},{"title":"decimal‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#decimal","content":" Not supported for now.  ","version":"0.10","tagName":"h3"},{"title":"struct‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#struct","content":" Struct means object of class/pojo/struct/bean/record type. Struct will be serialized by writing its fields data in fury order.  Depending on schema compatibility, structs will have different formats.  field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.when same size, sort by type idwhen same size and type id, sort by snake case field nametypes: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64 nullable primitive fields: same order as primitive fieldsmorphic fields: same type together, then sorted by field name lexicographically using snake case style.unknown fields: same sort algorithms as morphic fieldslist fields: same sort algorithms as morphic fieldsset fields: same sort algorithms as morphic fieldsmap fields: same sort algorithms as morphic fields  Field order‚Äã  Fields in a struct are sorted in a ascending order by:  primitive fields first: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64, sorted by type id.nullable primitive fieldsmorphic types except list/set/mapunknown typeslist typesset typesmap types  If two fields have same type, then sort by snake_case styled field name.  schema consistent‚Äã  Object will be written as:  | 4 byte | variable bytes | +---------------+------------------+ | type hash | field values |   Type hash is used to check the type schema consistency across languages. Type hash will be the first 32 bits of 56 bits value of the type meta.  Object fields will be serialized one by one using following format:  not null primitive field value: | var bytes | +----------------+ | value data | +----------------+ nullable primitive field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | type meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | type meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For the object type, schema consistent mode will write type by id only, but schema evolution mode will write type consisting of field names, types and other meta too, see Type meta.Type meta of final custom type needs to be written too, because peers may not have this type defined.  ","version":"0.10","tagName":"h3"},{"title":"Type‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#type","content":" Type will be serialized using type meta format.  ","version":"0.10","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#implementation-guidelines","content":" ","version":"0.10","tagName":"h2"},{"title":"How to reduce memory read/write code‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#how-to-reduce-memory-readwrite-code","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches.  ","version":"0.10","tagName":"h3"},{"title":"Fast deserialization for static languages without runtime codegen support‚Äã","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/0.10/specification/fury_xlang_serialization_spec#fast-deserialization-for-static-languages-without-runtime-codegen-support","content":" For type evolution, the serializer will encode the type meta into the serialized data. The deserializer will compare this meta with class meta in the current process, and use the diff to determine how to deserialize the data.  For java/javascript/python, we can use the diff to generate serializer code at runtime and load it as class/function for deserialization. In this way, the type evolution will be as fast as type consist mode.  For C++/Rust, we can't generate the serializer code at runtime. So we need to generate the code at compile-time using meta programming. But at that time, we don't know the type schema in other processes, so we can't generate the serializer code for such inconsistent types. We may need to generate the code which has a loop and compare field name one by one to decide whether to deserialize and assign the field or skip the field value.  One fast way is that we can optimize the string comparison into jump instructions:  Assume the current type has n fields, and the peer type has n1 fields.Generate an auto growing field id from 0 for every sorted field in the current type at the compile time.Compare the received type meta with current type, generate same id if the field name is same, otherwise generate an auto growing id starting from n, cache this meta at runtime.Iterate the fields of received type meta, use a switch to compare the field id to deserialize data and assign/skip field value. Continuous field id will be optimized into jump in switch block, so it will very fast.  Here is an example, suppose process A has a class Foo with version 1 defined as Foo1, process B has a class Foowith version 2 defined as Foo2:  // class Foo with version 1 class Foo1 { int32_t v1; // id 0 std::string v2; // id 1 }; // class Foo with version 2 class Foo2 { // id 0, but will have id 2 in process A bool v0; // id 1, but will have id 0 in process A int32_t v1; // id 2, but will have id 3 in process A int64_t long_value; // id 3, but will have id 1 in process A std::string v2; // id 4, but will have id 4 in process A std::vector&lt;std::string&gt; list; };   When process A received serialized Foo2 from process B, here is how it deserialize the data:  Foo1 foo1 = ...; const std::vector&lt;fury::FieldInfo&gt; &amp;field_infos = type_meta.field_infos; for (const auto &amp;field_info : field_infos) { switch (field_info.field_id) { case 0: foo1.v1 = buffer.read_varint32(); break; case 1: foo1.v2 = fury.read_string(); break; default: fury.skip_data(field_info); } }  ","version":"0.10","tagName":"h3"},{"title":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/community/how_to_verify","content":"","keywords":"","version":"0.11"},{"title":"‰∏ãËΩΩ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/community/how_to_verify#‰∏ãËΩΩ-apache-fory","content":" # If there is svn locally, you can clone to the local svn co https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/ # You can download the material file directly wget https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/xxx.xxx   ","version":"0.11","tagName":"h2"},{"title":"È™åËØÅ checksums Âíå signatures‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/community/how_to_verify#È™åËØÅ-checksums-Âíå-signatures","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÂÆâË£Ö gpgÔºö  apt-get install gnupg # or yum install gnupg # or brew install gnupg   ‰πãÂêéÔºåÂØºÂÖ• Apache Fory release manager ÁöÑÂÖ¨Èí•Ôºö  curl https://downloads.apache.org/incubator/fory/KEYS &gt; KEYS # Download KEYS gpg --import KEYS # Import KEYS to local # Then, trust the public key: gpg --edit-key &lt;KEY-used-in-this-version&gt; # Edit the key(mentioned in vote email) # It will enter the interactive mode, use the following command to trust the key: gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; gpg&gt; trust pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: ultimate validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please note that the shown key validity is not necessarily correct unless you restart the program.   Êé•‰∏ãÊù•È™åËØÅÁ≠æÂêçÔºö  for i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done   Â¶ÇÊûúÂá∫Áé∞Â¶Ç‰∏ãÂÜÖÂÆπÔºåÂàôË°®Á§∫Á≠æÂêçÊ≠£Á°ÆÔºö  apache-fory-incubating-0.5.0-src.tar.gz gpg: Signature made Wed 17 Apr 2024 11:49:45 PM CST using RSA key ID 5E580BA4 gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Good signature from &quot;chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt;&quot;   ÁÑ∂ÂêéÈ™åËØÅ checksumÔºö  for i in *.tar.gz; do echo $i; sha512sum --check $i.sha512; done   ÂÆÉÂ∫îËØ•ËæìÂá∫Â¶Ç‰∏ãÂÜÖÂÆπÔºö  apache-fory-incubating-0.5.0-src.tar.gz apache-fory-incubating-0.5.0-src.tar.gz: OK   ","version":"0.11","tagName":"h2"},{"title":"Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/community/how_to_verify#Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂","content":" Ëß£ÂéãÁº© apache-fory-${release_version}-${rc_version}-src.tar.gz Âπ∂Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  Ê≠§Â≠òÂÇ®Â∫ì LICENSE Âíå NOTICE Êñá‰ª∂ÊòØÊ≠£Á°ÆÁöÑÔºõÂ¶ÇÊúâÂøÖË¶ÅÔºåÊâÄÊúâÊñá‰ª∂ÈÉΩÊúâ ASF ËÆ∏ÂèØËØÅÊ†áÂ§¥ÔºõÈ°πÁõÆÊûÑÂª∫ÈÄöËøá„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Ê£ÄÊü• fory-java ÁöÑ Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/community/how_to_verify#Ê£ÄÊü•-fory-java-ÁöÑ-maven-artifacts","content":" ‰∏ãËΩΩ Apache ForyÔºöhttps://repository.apache.org/content/repositories/orgapachefory-${maven_artifact_number}/.  ÊÇ®ÂèØ‰ª•Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  JAR ÁöÑ Checksum ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ checksum Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR ÁöÑ signature ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ signature Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR Âú®Êú¨Âú∞ÊòØÂèØÈáçÂ§çÁöÑ„ÄÇËøôÊÑèÂë≥ÁùÄÊÇ®ÂèØ‰ª•Âú®ËÆ°ÁÆóÊú∫‰∏äÊûÑÂª∫ JARÔºåÂπ∂È™åËØÅ checksum Âíå‰∏éÈ°πÁõÆÁªëÂÆöÁöÑÁõ∏Âêå„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"ÂºÄÂèëÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/development","content":"","keywords":"","version":"0.11"},{"title":"Êú¨Âú∞ÊûÑÂª∫ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#Êú¨Âú∞ÊûÑÂª∫-apache-fory","content":" ‰ªé Github ‰ª£Á†ÅÂ∫ì ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Java‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-java","content":" cd java mvn clean compile -DskipTests   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  java 1.8+maven 3.6.3+  ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Python‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  python 3.6+  ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ C++‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==14.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fory/encoder:fory_encoder   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ GoLang‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  go 1.13+  ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Rust‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-rust","content":" cd rust # build cargo build # run test cargo test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ JavaScript‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/0.11/docs/guide/development#ÊûÑÂª∫-apache-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  node 14+npm 8+ ","version":"0.11","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂèëÂ∏É","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/community/how_to_release","content":"","keywords":"","version":"0.11"},{"title":"‰ªãÁªç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#‰ªãÁªç","content":" Ê∫ê‰ª£Á†ÅÂèëÂ∏ÉÊòØ Apache ÊúÄÈáçËßÜ‰ª•ÂèäÊúÄÈáçË¶ÅÁöÑÈÉ®ÂàÜ„ÄÇ  ËØ∑Ê≥®ÊÑèËÆ∏ÂèØËØÅÂíåÂèëÂ∏ÉÁöÑËΩØ‰ª∂Á≠æÂêçÈóÆÈ¢ò„ÄÇÂèëÂ∏ÉËΩØ‰ª∂ÊòØ‰∏Ä‰ª∂‰∏•ËÇÉÁöÑ‰∫ãÊÉÖÔºåÂπ∂‰ºö‰∫ßÁîüÁõ∏Â∫îÁöÑÊ≥ïÂæãÂêéÊûú„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"release manager Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#release-manager-Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É","content":" ","version":"0.11","tagName":"h2"},{"title":"ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÁéØÂ¢ÉË¶ÅÊ±Ç","content":" Ê≠§ÂèëÂ∏ÉËøáÁ®ãÂú® Ubuntu Á≥ªÁªü‰∏≠ËøêË°åÔºåÈúÄË¶Å‰ª•‰∏ãÂá†‰∏™ÁéØÂ¢É‰æùËµñÔºö  JDK 1.8+Apache Maven 3.x+Python 3.8GnuPG 2.xGitSVNÔºàApache Âü∫Èáë‰ºö‰ΩøÁî® svn Êù•ÊâòÁÆ°È°πÁõÆÂèëÂ∏ÉÔºâËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÔºöÂ¶ÇÊûúÊÇ®Âú®‰∏çÂêåÁöÑÁõÆÂΩï‰∏ãÈÖçÁΩÆ‰∫Ü gpg ÂØÜÈí•ÔºåËØ∑ÊâßË°å export GNUPGHOME=$(xxx) ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂáÜÂ§á GPG ÂØÜÈí•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂáÜÂ§á-gpg-ÂØÜÈí•","content":" Â¶ÇÊûúÊÇ®ÊòØÁ¨¨‰∏ÄÊ¨°‰Ωú‰∏∫ËΩØ‰ª∂ÂèëÂ∏ÉËÄÖÔºåÊÇ®ÈúÄË¶ÅÂáÜÂ§á‰∏Ä‰∏™ GPG ÂØÜÈí•„ÄÇ  ÊÇ®ÂèØ‰ª•ÂèÇËÄÉËøôÈáåÁöÑÂø´ÈÄüÂºÄÂßãËé∑Âèñ‰∏Ä‰∏™ GPG ÂØÜÈí•ÊàñËÄÖËé∑ÂèñÊõ¥Â§öÁõ∏ÂÖ≥‰ø°ÊÅØ„ÄÇ  ÂÆâË£Ö GPG‚Äã  sudo apt install gnupg2   ÁîüÊàê GPG ÂØÜÈí•‚Äã  ËØ∑‰ΩøÁî®ÊÇ®ÁöÑ Apache ÂêçÂ≠óÂíåÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁîüÊàê GPG ÂØÜÈí•Ôºö  $ gpg --full-gen-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 # input 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 # input 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n years Key is valid for? (0) 0 # input 0 Key does not expire at all Is this correct? (y/N) y # input y GnuPG needs to construct a user ID to identify your key. Real name: Chaokun Yang # input your name Email address: chaokunyang@apache.org # input your email Comment: CODE SIGNING KEY # input some annotations, optional You selected this USER-ID: &quot;Chaokun &lt;chaokunyang@apache.org&gt;&quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. # Input the security key ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Please enter this passphrase ‚îÇ ‚îÇ ‚îÇ ‚îÇ Passphrase: _______________________________ ‚îÇ ‚îÇ ‚îÇ ‚îÇ &lt;OK&gt; &lt;Cancel&gt; ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò # key generation will be done after your inputting the key with the following output gpg: key E49B00F626B marked as ultimately trusted gpg: revocation certificate stored as '/Users/chaokunyang/.gnupg/openpgp-revocs.d/1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4.rev' public and secret key created and signed. pub rsa4096 2022-07-12 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] Chaokun &lt;chaokunyang@apache.org&gt; sub rsa4096 2022-07-12 [E]   ‰∏ä‰º†ÂÖ¨Èí•Ëá≥ GPG ÂØÜÈí•ÊúçÂä°Âô®‚Äã  È¶ñÂÖàÔºåÂàóÂá∫ÊÇ®ÊâÄÂàõÂª∫ÁöÑ GPG ÂØÜÈí•Ôºö  gpg --list-keys   ÊâßË°åÁõ∏ÂÖ≥ÂëΩ‰ª§‰πãÂêéÔºåÊÇ®Â∞ÜÁúãÂà∞Â¶Ç‰∏ãËæìÂá∫Ôºö  -------------------------------------------------- pub rsa4096 2024-03-27 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; sub rsa4096 2024-03-27 [E]   ÁÑ∂ÂêéÔºåÂ∞ÜÊÇ®ÁöÑÂØÜÈí• ID ÂèëÈÄÅÂà∞ÂØÜÈí•ÊúçÂä°Âô®Ôºö  gpg --keyserver keys.openpgp.org --send-key &lt;key-id&gt; # e.g., 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4   ÂÖ∂‰∏≠Ôºåkeys.openpgp.org ÊòØ‰∏Ä‰∏™ÈöèÊú∫ÈÄâÊã©ÁöÑÂØÜÈí•ÊúçÂä°Âô®ÔºåÂèØ‰ª•‰ΩøÁî® keyserver.ubuntu.com Êàñ‰ªª‰ΩïÂÖ∂‰ªñÂäüËÉΩÂÆåÂ§áÁöÑÂØÜÈí•ÊúçÂä°Âô®„ÄÇ  Ê£ÄÊü•ÂØÜÈí•ÊòØÂê¶ÂàõÂª∫ÊàêÂäü‚Äã  ‰∏ä‰º†Â§ßÁ∫¶ÈúÄË¶Å‰∏ÄÂàÜÈíüÔºõ‰πãÂêéÔºåÊÇ®ÂèØ‰ª•ÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂Âú®Áõ∏Â∫îÁöÑÂØÜÈí•ÊúçÂä°Âô®‰∏äÊ£ÄÊü•„ÄÇ  Â∞ÜÂØÜÈí•‰∏ä‰º†Âà∞ÂØÜÈí•ÊúçÂä°Âô®ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØ‰∏∫‰∫ÜÂä†ÂÖ•‰∏Ä‰∏™ÂèØ‰ø°ÁöÑ‰ø°‰ªªÁΩëÁªú„ÄÇ  Â∞Ü GPG ÂÖ¨Èí•Ê∑ªÂä†Âà∞È°πÁõÆ KEYS Êñá‰ª∂‰∏≠‚Äã  ÂèëÂ∏ÉÂàÜÊîØÁöÑ svn ‰ªìÂ∫ìÊòØÔºöhttps://dist.apache.org/repos/dist/release/incubator/fory  ËØ∑Âú®ÂèëÂ∏ÉÂàÜÊîØÁöÑ KEYS ‰∏≠Ê∑ªÂä†ÂÖ¨Èí•Ôºö  svn co https://dist.apache.org/repos/dist/release/incubator/fory fory-dist # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. cd fory-dist (gpg --list-sigs YOUR_NAME@apache.org &amp;&amp; gpg --export --armor YOUR_NAME@apache.org) &gt;&gt; KEYS # Append your key to the KEYS file svn add . # It is not needed if the KEYS document exists before. svn ci -m &quot;add gpg key for YOUR_NAME&quot; # Later on, if you are asked to enter a username and password, just use your apache username and password.   Â∞Ü GPG ÂÖ¨Èí•‰∏ä‰º†Âà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑‚Äã  ËæìÂÖ• https://github.com/settings/keys ‰ª•Ê∑ªÂä†ÊÇ®ÁöÑ GPG ÂØÜÈí•„ÄÇÂ¶ÇÊûúÊ∑ªÂä†ÂêéÂèëÁé∞‚ÄúÊú™È™åËØÅ‚ÄùÂ≠óÊ†∑ÔºåËØ∑Â∞Ü GPG ÂØÜÈí•‰∏≠‰ΩøÁî®ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁªëÂÆöÂà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑Ôºàhttps://github.com/settings/emailsÔºâ„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Âª∂‰º∏ÈòÖËØª‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Âª∂‰º∏ÈòÖËØª","content":" Âª∫ËÆÆÊÇ®Âú®ÂèëÂ∏É‰πãÂâçÈòÖËØª‰ª•‰∏ãÊñáÊ°£Ôºå‰∫ÜËß£ÊúâÂÖ≥ Apache Âü∫Èáë‰ºöÂèëÂ∏ÉËΩØ‰ª∂ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºå‰ΩÜËøô‰∏çÊòØÂøÖÈ°ªÁöÑÔºö  ÂèëÂ∏ÉÊîøÁ≠ñÔºöhttps://www.apache.org/legal/release-policy.htmlÂ≠µÂåñÂô®ÂèëÂ∏ÉÔºöhttp://incubator.apache.org/guides/releasemanagement.htmlTLP ÁâàÊú¨Ôºöhttps://infra.apache.org/release-distributionÂèëÂ∏ÉÊ†áÂøóÔºöhttps://infra.apache.org/release-signing.htmlÂèëÂ∏ÉÂèëÂ∏ÉÔºöhttps://infra.apache.org/release-publishing.htmlÂèëÂ∏É‰∏ãËΩΩÈ°µÈù¢Ôºöhttps://infra.apache.org/release-download-pages.htmlÂèëÂ∏É maven artifactsÔºöhttps://infra.apache.org/publishing-maven-artifacts.html  ","version":"0.11","tagName":"h3"},{"title":"ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫","content":" ÈÄöËøáÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥‰ª•‰∏ãÂú∞ÂùÄÂèëËµ∑ÊúâÂÖ≥‰∏ã‰∏Ä‰∏™ÁâàÊú¨ÁöÑËÆ®ËÆ∫Ôºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [DISCUSS] Release Apache Fory(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community, This is a call for a discussion to release Apache Fory(incubating) version ${release_version}. The change lists about this release: https://github.com/apache/fory/compare/v0.4.1...v0.5.0 Please leave your comments here about this release plan. We will bump the version in repo and start the release process after the discussion. Thanks, ${name}   ","version":"0.11","tagName":"h2"},{"title":"ÂáÜÂ§áÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂáÜÂ§áÂèëÂ∏É","content":" Â¶ÇÊûúËÆ®ËÆ∫ÁªìÊûú‰∏≠Ê≤°ÊúâÂá∫Áé∞ÂèçÂØπÂ£∞Èü≥ÔºåÊÇ®ÈúÄË¶ÅÂÅö‰∏Ä‰∫õÂèëÂ∏ÉÁâàÊú¨ÁöÑÂáÜÂ§áÂ∑•‰Ωú„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Github ÂàÜÊîØÂíåÊ†áÁ≠æ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#github-ÂàÜÊîØÂíåÊ†áÁ≠æ","content":" ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ releases-0.5.0ÈÄöËøáÊâßË°åÂëΩ‰ª§Â∞ÜÁâàÊú¨ $version ÂçáÁ∫ßÂà∞ python ci/release.py bump_version -l all -version $versionÊâßË°å git commit Âπ∂Â∞ÜÂàÜÊîØÊé®ÈÄÅÂà∞ git@github.com:apache/fory.gitÈÄöËøá git tag v0.5.0-rc1 ÂàõÂª∫‰∏Ä‰∏™Êñ∞Ê†áÁ≠æÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂Êé®ÈÄÅÂà∞ git@github.com:apache/fory.git  ","version":"0.11","tagName":"h3"},{"title":"ÊûÑÂª∫ artifacts Âπ∂‰∏ä‰º†Âà∞ SVN dist/dev ‰ªìÂ∫ì‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÊûÑÂª∫-artifacts-Âπ∂‰∏ä‰º†Âà∞-svn-distdev-‰ªìÂ∫ì","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÈÄöËøá python ci/release.py build -v $version ÊûÑÂª∫È¢ÑÂèëÂ∏É artifacts„ÄÇ  ÁÑ∂ÂêéÊÇ®ÈúÄË¶ÅÊääÂÆÉ‰∏ä‰º†Âà∞ svn dist repo„ÄÇdev ÂàÜÊîØÁöÑ dist ‰ªìÂ∫ìÂú∞ÂùÄÊòØÔºöhttps://dist.apache.org/repos/dist/dev/incubator/fory  # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. svn co https://dist.apache.org/repos/dist/dev/incubator/fory fory-dist-dev   ÁÑ∂ÂêéÔºå‰∏ä‰º†È°πÁõÆÔºö  cd fory-dist-dev # create a directory named by version mkdir ${release_version}-${rc_version} # copy source code and signature package to the versioned directory cp ${repo_dir}/dist/* ${release_version}-${rc_version} # check svn status svn status # add to svn svn add ${release_version}-${rc_version} # check svn status svn status # commit to SVN remote server svn commit -m &quot;Prepare for fory ${release_version}-${rc_version}&quot;   ËÆøÈóÆ https://dist.apache.org/repos/dist/dev/incubator/fory/ ‰ª•Ê£ÄÊü• artifacts ÊòØÂê¶Ê≠£Á°Æ‰∏ä‰º†„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊüê‰∫õÊñá‰ª∂ÊòØÊÑèÂ§ñÂá∫Áé∞ÊàñËÄÖÂèëÁîüÊüê‰∫õÈîôËØØÔºåÂàôÈúÄË¶ÅÂà†Èô§Áõ∏ÂÖ≥ÂÜÖÂÆπÂπ∂ÊâßË°å svn deleteÔºåÁÑ∂ÂêéÈáçÂ§ç‰∏äËø∞‰∏ä‰º†ËøáÁ®ã„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÊäïÁ•®","content":" ‰Ωú‰∏∫‰∏Ä‰∏™Â≠µÂåñÈ°πÁõÆÔºåÊñ∞ÁâàÊú¨ÂèëÂ∏ÉÈúÄË¶Å Apache Fory Á§æÂå∫ÂíåÂ≠µÂåñÂô®Á§æÂå∫ÁöÑÊäïÁ•®„ÄÇ  release_versionÔºöFory ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0„ÄÇrelease_candidate_versionÔºöÊäïÁ•®ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1„ÄÇmaven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001. ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂèØ‰ª•ÈÄöËøáÊêúÁ¥¢ ‚Äúfory‚Äù Êù•ÊâæÂà∞ maven_artifact_number https://repository.apache.org/#stagingRepositories.  ","version":"0.11","tagName":"h2"},{"title":"Fory Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#fory-Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ Fory CommunityÔºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community: This is a call for vote to release Apache Fory(Incubating) version release-0.5.0-rc3. Apache Fory(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The change lists about this release: https://github.com/apache/fory/compare/v0.4.1...v0.5.0-rc3 The release candidates: https://dist.apache.org/repos/dist/dev/incubator/fory/0.5.0-rc3/ The maven staging for this release: https://repository.apache.org/content/repositories/orgapachefory-1003 Git tag for the release: https://github.com/apache/fory/releases/tag/v0.5.0-rc3 Git commit for the release: https://github.com/apache/fory/commit/fae06330edd049bb960536e978a45b97bca66faf The artifacts signed with PGP key [5E580BA4], corresponding to [chaokunyang@apache.org], that can be found in keys file: https://downloads.apache.org/incubator/fory/KEYS The vote will be open for at least 72 hours until the necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about Fory, please see https://fory.apache.org/ *Valid check is a requirement for a vote. *Checklist for reference: [ ] Download Fory is valid. [ ] Checksums and PGP signatures are valid. [ ] Source code distributions have correct names matching the current release. [ ] LICENSE and NOTICE files are correct. [ ] All files have license headers if necessary. [ ] No compiled archives bundled in source archive. [ ] Can compile from source. More detail checklist please refer: https://cwiki.apache.org/confluence/display/INCUBATOR/Incubator+Release+Checklist How to Build and Test, please refer to: https://github.com/apache/fory/blob/main/docs/guide/DEVELOPMENT.md Thanks, Chaokun Yang   Âú®Ëá≥Â∞ëËé∑Âæó 3 + 1 ‰∏îÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™ Fory Podling PMC ÊàêÂëòÂíåÊèê‰∫§ËÄÖÔºâÂπ∂Ê≤°ÊúâÊî∂Âà∞Âê¶ÂÜ≥Á•®‰πãÂêéÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community, The vote to release Apache Fory(Incubating) v${release_version}-${rc_version} has passed. The vote PASSED with 3 binding +1 and 0 -1 vote: Binding votes: - xxx - yyy - zzz Vote thread: ${vote_thread_url} Thanks, ${name}   ","version":"0.11","tagName":"h3"},{"title":"Â≠µÂåñÂô®Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Â≠µÂåñÂô®Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥Ôºögeneral@incubator.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello everyone, This is a call for the vote to release Apache Fory(Incubating) v${release_version}-${rc_version}. The Apache Fory community has voted and approved the release of Apache Fory(incubating) v${release_version}-${rc_version}. We now kindly request the IPMC members review and vote for this release. Apache Fory(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. Fory community vote thread: ${community_vote_thread_url} Vote result thread: ${community_vote_result_thread_url} The release candidate: https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/ This release has been signed with a PGP available here: https://downloads.apache.org/incubator/fory/KEYS Git tag for the release: https://github.com/apache/fory/releases/tag/v${release_version}-${rc_version}/ Git commit for the release: https://github.com/apache/fory/commit/$xxx Maven staging repo: https://repository.apache.org/content/repositories/orgapachefory-${maven_artifact_number}/ How to Build and Test, please refer to: https://github.com/apache/fory/blob/main/docs/guide/DEVELOPMENT.md Please download, verify, and test. The VOTE will pass after 3 binding approve. [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about apache fory, please see https://fory.apache.org/ Checklist for reference: [ ] Download links are valid. [ ] Checksums and signatures. [ ] LICENSE/NOTICE files exist [ ] No unexpected binary files [ ] All source files have ASF headers [ ] Can compile from source Thanks, ${name}   Ëá≥Â∞ë 72 Â∞èÊó∂ÂêéÔºåËá≥Â∞ëÊúâ 3 + 1 ÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™Â≠µÂåñÂô® PMC ÊàêÂëòÔºâ‰∏îÊ≤°ÊúâÂê¶ÂÜ≥Á•®ÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hi Incubator PMC, The vote to release Apache Fory(incubating) v${release_version}-${rc_version} has passed with 4 +1 binding and 3 +1 non-binding votes, no +0 or -1 votes. Binding votesÔºö - xxx - yyy - zzz Non-Binding votes: - aaa Vote thread: ${incubator_vote_thread_url} Thanks for reviewing and voting for our release candidate. We will proceed with publishing the approved artifacts and sending out the announcement soon.   ","version":"0.11","tagName":"h3"},{"title":"Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÔºåËØ∑ÂçïÂáª‚ÄúÂà†Èô§‚Äù‰ª•Âà†Èô§ÊöÇÂ≠òÁöÑ Maven artifacts„ÄÇ  Ëß£ÂÜ≥ÊèêÂá∫ÁöÑÈóÆÈ¢òÔºåÁÑ∂ÂêéÂÜçÊ¨°ÊèêÂá∫ rc_version ÁöÑÊñ∞ÊäïÁ•®„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂÆòÊñπÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂÆòÊñπÂèëÂ∏É","content":" ","version":"0.11","tagName":"h2"},{"title":"Â∞Ü artifacts ÂèëÂ∏ÉÂà∞ SVN ÂèëÂ∏ÉÁõÆÂΩï‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Â∞Ü-artifacts-ÂèëÂ∏ÉÂà∞-svn-ÂèëÂ∏ÉÁõÆÂΩï","content":" release_versionÔºöFory ÁöÑÂèëÂ∏ÉÁâàÊú¨ÔºåÂ¶Ç 0.5.0release_candidate_versionÔºöÊäïÁ•®ÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1  svn mv https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version} https://dist.apache.org/repos/dist/release/incubator/fory/${release_version} -m &quot;Release fory ${release_version}&quot;   ","version":"0.11","tagName":"h3"},{"title":"Êõ¥Êîπ Fory ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#Êõ¥Êîπ-fory-ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•","content":" Êèê‰∫§ PR Âà∞ https://github.com/apache/fory-site ‰ªìÂ∫ìÊõ¥Êñ∞ Fory ÁâàÊú¨Ôºå‰∏ãËΩΩÈ°µÈù¢  ","version":"0.11","tagName":"h3"},{"title":"ÂèëÂ∏É Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂèëÂ∏É-maven-artifacts","content":" maven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001„ÄÇÊâìÂºÄhttps://repository.apache.org/#stagingRepositories.ÊâæÂà∞ artifacts orgapachefory-${maven_artifact_number}ÔºåÁÇπÂáª‚ÄúÂèëÂ∏É‚Äù„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂèëÈÄÅÂÖ¨Âëä‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/0.11/community/how_to_release#ÂèëÈÄÅÂÖ¨Âëä","content":" Â∞ÜÂèëÂ∏ÉÂÖ¨ÂëäÂèëÈÄÅÁªô dev@fory.apache.org Âπ∂‰∏îÊäÑÈÄÅÁªô announce@apache.org„ÄÇ  Ê†áÈ¢òÔºö  [ANNOUNCE] Release Apache Fory(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hi all, The Apache Fory(incubating) community is pleased to announce that Apache Fory(incubating) {release_version} has been released! Apache Fory(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The release notes are available here: https://github.com/apache/fory/releases/tag/v${release_version} For the complete list of changes: https://github.com/apache/fory/compare/v0.5.0...v${release_version} Apache Fory website: https://fory.apache.org/ Download Links: https://fory.apache.org/download Fory Resources: - Fory github repo: https://github.com/apache/fory - Issue: https://github.com/apache/fory/issues - Mailing list: dev@fory.apache.org We are looking to grow our community and welcome new contributors. If you are interested in contributing to Fory, please contact us on the mailing list or on GitHub. We will be happy to help you get started. ------------------ Best Regards, ${your_name}   Ëá≥Ê≠§ÔºåÊï¥‰∏™ÂèëÂ∏ÉÊµÅÁ®ãÁªìÊùü„ÄÇ ","version":"0.11","tagName":"h3"},{"title":"GraalVM Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide","content":"","keywords":"","version":"0.11"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#graalvm-native-image","content":" GraalVM ÁöÑ native image ËÉΩÂ∞Ü Java ‰ª£Á†ÅÊèêÂâçÁºñËØë‰∏∫Êú¨Âú∞‰ª£Á†ÅÔºå‰ªéËÄåÊûÑÂª∫Êõ¥Âø´„ÄÅÊõ¥Â∞è„ÄÅÊõ¥Á≤æÁÆÄÁöÑÂ∫îÁî®„ÄÇ Native image ‰∏çÂåÖÂê´ JIT ÁºñËØëÂô®ÔºåÊó†Ê≥ïÂú®ËøêË°åÊó∂Â∞ÜÂ≠óËäÇÁ†ÅÁºñËØë‰∏∫Êú∫Âô®Á†ÅÔºå‰πü‰∏çÊîØÊåÅÂèçÂ∞ÑÔºåÈô§ÈùûÈÖçÁΩÆÂèçÂ∞ÑÂÖÉÊï∞ÊçÆÊñá‰ª∂„ÄÇ  Apache Fory‚Ñ¢ Âú®GraalVM native image ‰∏ãËøêË°åËâØÂ•Ω„ÄÇFory ‰ºöÂú® graalvm ÊûÑÂª∫Èò∂ÊÆµ‰∏∫ Fory JIT framework Âíå MethodHandle/LambdaMetafactory ÁîüÊàêÊâÄÊúâÂ∫èÂàóÂåñÂô®‰ª£Á†ÅÔºåËøêË°åÊó∂Áõ¥Êé•‰ΩøÁî®Ëøô‰∫õÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂ∫èÂàóÂåñÔºåÊó†ÈúÄÈ¢ùÂ§ñÂºÄÈîÄÔºåÊÄßËÉΩ‰ºòÂºÇ„ÄÇ  Âú® graalvm native image ‰∏ã‰ΩøÁî® Fory Êó∂ÔºåÂøÖÈ°ªÂ∞Ü Fory ÂàõÂª∫‰∏∫Á±ªÁöÑÈùôÊÄÅÂ≠óÊÆµÔºåÂπ∂Âú®Á±ªÂàùÂßãÂåñÊó∂Ê≥®ÂÜåÊâÄÊúâÁ±ªÂûã„ÄÇÁÑ∂ÂêéÂú® resources/META-INF/native-image/$xxx/native-image.properties ‰∏ãÈÖçÁΩÆ native-image.propertiesÔºåÂëäÁü• graalvm Âú® native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñËØ•Á±ª„ÄÇ‰æãÂ¶ÇÔºåÈÖçÁΩÆ org.apache.fory.graalvm.Example Á±ªÂú®ÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ‰ΩøÁî® fory ÁöÑÂè¶‰∏Ä‰∏™Â•ΩÂ§ÑÊòØÊó†ÈúÄÈÖçÁΩÆÁπÅÁêêÁöÑ reflection json Âíå serialization json„ÄÇÂè™ÈúÄÂØπÊØè‰∏™ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÂûãË∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) Âç≥ÂèØ„ÄÇ  Ê≥®ÊÑèÔºöFory ÁöÑ asyncCompilationEnabled ÈÄâÈ°πÂú® graalvm native image ‰∏ã‰ºöËá™Âä®Á¶ÅÁî®ÔºåÂõ†‰∏∫ native image ËøêË°åÊó∂‰∏çÊîØÊåÅ JIT„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#ÈùûÁ∫øÁ®ãÂÆâÂÖ®-fory","content":" Á§∫‰æãÔºö  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ fory.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.Example ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"0.11","tagName":"h2"},{"title":"Á∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#Á∫øÁ®ãÂÆâÂÖ®-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.ThreadSafeExample ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"0.11","tagName":"h2"},{"title":"Ê°ÜÊû∂ÈõÜÊàê‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#Ê°ÜÊû∂ÈõÜÊàê","content":" ÂØπ‰∫éÊ°ÜÊû∂ÂºÄÂèëËÄÖÔºåÂ¶ÇÊûúÂ∏åÊúõÈõÜÊàê fory ‰Ωú‰∏∫Â∫èÂàóÂåñÊñπÊ°àÔºåÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºåËÆ©Áî®Êà∑ÂàóÂá∫ÊâÄÊúâÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÔºåÁÑ∂ÂêéÂä†ËΩΩËøô‰∫õÁ±ªÂπ∂Âú® Fory ÈõÜÊàêÁ±ª‰∏≠Ë∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) ËøõË°åÊ≥®ÂÜåÔºåÂπ∂ÈÖçÁΩÆËØ•Á±ªÂú® graalvm native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñ„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#benchmark","content":" ËøôÈáåÁªôÂá∫ Fory ‰∏é Graalvm Serialization ÁöÑ‰∏§‰∏™Á±ªÁöÑÂü∫ÂáÜÊµãËØï„ÄÇ  Fory Êú™ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 46x ÈÄüÂ∫¶Ôºå43% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå56% Â§ßÂ∞è  Fory ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 24x ÈÄüÂ∫¶Ôºå31% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå48% Â§ßÂ∞è  Âü∫ÂáÜÊµãËØï‰ª£Á†ÅËßÅ [Benchmark.java]„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Struct Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#struct-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"0.11","tagName":"h3"},{"title":"Pojo Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/graalvm_guide#pojo-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"0.11","tagName":"h3"},{"title":"Scala Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/scala_guide","content":"","keywords":"","version":"0.11"},{"title":"ÂÆâË£Ö‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#ÂÆâË£Ö","content":" Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 2 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.11.2&quot;   Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 3 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.11.2&quot;   ","version":"0.11","tagName":"h2"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Âø´ÈÄüÂºÄÂßã","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"0.11","tagName":"h2"},{"title":"Fory ÂÆû‰æãÂàõÂª∫‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#fory-ÂÆû‰æãÂàõÂª∫","content":" Âú®‰ΩøÁî® fory ËøõË°å Scala Â∫èÂàóÂåñÊó∂ÔºåÂª∫ËÆÆËá≥Â∞ë‰ª•Â¶Ç‰∏ãÊñπÂºèÂàõÂª∫ fory ÂÆû‰æãÔºö  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory)   Ê†πÊçÆ‰Ω†ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÂØπË±°Á±ªÂûãÔºåÂèØËÉΩËøòÈúÄË¶ÅÊ≥®ÂÜå‰∏Ä‰∫õ Scala ÂÜÖÈÉ®Á±ªÂûãÔºö  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   Â¶ÇÊûú‰Ω†Â∏åÊúõÈÅøÂÖçÊâãÂä®Ê≥®ÂÜåËøô‰∫õÁ±ªÂûãÔºåÂèØ‰ª•ÈÄöËøá ForyBuilder#requireClassRegistration(false) ÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂäüËÉΩ„ÄÇ Ê≥®ÊÑèÔºöÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂêéÔºåÂèØ‰ª•ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÁöÑÂØπË±°ÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ¶ÇÊûúÂèçÂ∫èÂàóÂåñÁöÑÁ±ªÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ  Scala ‰∏≠Âæ™ÁéØÂºïÁî®ËæÉ‰∏∫Â∏∏ËßÅÔºåÂª∫ËÆÆÈÄöËøá ForyBuilder#withRefTracking(true) ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºàReference trackingÔºâ„ÄÇÂ¶ÇÊûúÊú™ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂú®Êüê‰∫õ Scala ÁâàÊú¨‰∏ãÂ∫èÂàóÂåñ Scala Enumeration Êó∂ÔºåÂèØËÉΩ‰ºöÂá∫Áé∞ StackOverflowError„ÄÇ  Ê≥®ÊÑèÔºöfory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÊìç‰ΩúÈó¥Â§çÁî®Ôºåfory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ß„ÄÇ  Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂú®Â§öÁ∫øÁ®ãÁéØÂ¢É‰∏ãÂÖ±‰∫´ fory ÂÆû‰æãÔºåÂ∫îÈÄöËøá ForyBuilder#buildThreadSafeFory() ÂàõÂª∫ ThreadSafeFory ÂÆû‰æã„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñ case class‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-case-class","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñ pojo‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñ object Âçï‰æãÂØπË±°‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-object-Âçï‰æãÂØπË±°","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñÈõÜÂêàÔºàCollectionÔºâ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñÈõÜÂêàcollection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Tuple‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-tuple","content":" val tuple = Tuple2(100, 10000L) println(fory.deserialize(fory.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fory.deserialize(fory.serialize(tuple)))   ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-enum","content":" ","version":"0.11","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"0.11","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"0.11","tagName":"h3"},{"title":"Â∫èÂàóÂåñ Option‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#Â∫èÂàóÂåñ-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))   ","version":"0.11","tagName":"h2"},{"title":"ÊÄßËÉΩ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/scala_guide#ÊÄßËÉΩ","content":" pojo/bean/case/object Scala ÂØπ Apache Fory JIT ÁöÑÊîØÊåÅÂæàÂ•ΩÔºåÊÄßËÉΩ‰∏é Apache Fory Java ‰∏ÄÊ†∑‰ºòÂºÇ„ÄÇ  Scala ÈõÜÂêàÂíåÊ≥õÂûã‰∏çÈÅµÂæ™ Java ÈõÜÂêàÊ°ÜÊû∂ÔºåÂπ∂‰∏îÊú™‰∏éÂΩìÂâçÂèëË°åÁâà‰∏≠ÁöÑ Apache Fory JIT ÂÆåÂÖ®ÈõÜÊàê„ÄÇÊÄßËÉΩ‰∏ç‰ºöÂÉè Java ÁöÑ Fory collections Â∫èÂàóÂåñÈÇ£‰πàÂ•Ω„ÄÇ  scala ÈõÜÂêàÁöÑÊâßË°åÂ∞ÜË∞ÉÁî® Java Â∫èÂàóÂåñ API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable Âíå Fory ObjectStream ÂÆûÁé∞„ÄÇËôΩÁÑ∂ org.apache.fory.serializer.ObjectStreamSerializer ÊØî JDK ObjectOutputStream/ObjectInputStream Âø´ÂæàÂ§öÔºå‰ΩÜÂÆÉ‰ªçÁÑ∂‰∏çÁü•ÈÅìÂ¶Ç‰Ωï‰ΩøÁî® Scala ÈõÜÂêàÊ≥õÂûã„ÄÇ  Êú™Êù•Êàë‰ª¨ËÆ°Âàí‰∏∫ Scala Á±ªÂûãÊèê‰æõÊõ¥Â§ö‰ºòÂåñÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇÁúã #682ÔºÅ  Scala ÈõÜÂêàÂ∫èÂàóÂåñÂ∑≤Âú® #1073 ÂÆåÊàê ÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåËØ∑‰ΩøÁî® Apache Fory snapshot ÁâàÊú¨„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"Ë°åÂ≠òÊ†ºÂºè","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide","content":"","keywords":"","version":"0.11"},{"title":"Java‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // ÂèØË¢´ python Èõ∂Êã∑Ë¥ùËØªÂèñ BinaryRow binaryRow = encoder.toRow(foo); // ‰πüÂèØ‰ª•ÊòØ python ÁîüÊàêÁöÑÊï∞ÊçÆ Foo newFoo = encoder.fromRow(binaryRow); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` ÁöÑÁ¨¨ 11 ‰∏™ÂÖÉÁ¥† BinaryRow barStruct = binaryArray4.getStruct(10); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` Á¨¨ 11 ‰∏™ÂÖÉÁ¥†ÁöÑ f2 ÁöÑÁ¨¨ 6 ‰∏™ÂÖÉÁ¥† barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // Âè™ÂèçÂ∫èÂàóÂåñÈÉ®ÂàÜÊï∞ÊçÆ Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"0.11","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"0.11","tagName":"h2"},{"title":"Apache Arrow ÊîØÊåÅ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#apache-arrow-ÊîØÊåÅ","content":" Fory Format ‰πüÊîØÊåÅ‰∏é Arrow Table/RecordBatch ÁöÑËá™Âä®ËΩ¨Êç¢„ÄÇ  Java Á§∫‰æãÔºö  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"0.11","tagName":"h3"},{"title":"ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã","content":" Fury Áé∞Â∑≤ÊîØÊåÅ Java interface Á±ªÂûãÂíåÂ≠êÁ±ªÔºàextendsÔºâÁ±ªÂûãÁöÑË°åÊ†ºÂºèÊò†Â∞ÑÔºåÂ∏¶Êù•Êõ¥Âä®ÊÄÅÂíåÁÅµÊ¥ªÁöÑÊï∞ÊçÆ schema„ÄÇ  Áõ∏ÂÖ≥Â¢ûÂº∫ËßÅ #2243„ÄÅ#2250„ÄÅ#2256„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Á§∫‰æãÔºöÊé•Âè£Á±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#Á§∫‰æãÊé•Âè£Á±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // ‰ΩøÁî® RowEncoder ‰ª•Êé•Âè£Á±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"0.11","tagName":"h3"},{"title":"Á§∫‰æãÔºöÁªßÊâøÁ±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/0.11/docs/guide/row_format_guide#Á§∫‰æãÁªßÊâøÁ±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // ‰ΩøÁî® RowEncoder ‰ª•Áà∂Á±ªÁ±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python Á§∫‰æãÔºö  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++ Á§∫‰æãÔºö  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"0.11","tagName":"h3"},{"title":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"0.11"},{"title":"Á±ªÂûãÊò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_type_mapping#Á±ªÂûãÊò†Â∞Ñ","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"0.11","tagName":"h2"},{"title":"Á±ªÂûã‰ø°ÊÅØÔºàÂΩìÂâçÊú™ÂÆûÁé∞Ôºâ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_type_mapping#Á±ªÂûã‰ø°ÊÅØÂΩìÂâçÊú™ÂÆûÁé∞","content":" Áî±‰∫éÂêÑËØ≠Ë®ÄÁöÑÁ±ªÂûãÁ≥ªÁªüÂ≠òÂú®Â∑ÆÂºÇÔºåÊüê‰∫õÁ±ªÂûãÊó†Ê≥ïÂÅöÂà∞‰∏Ä‰∏ÄÊò†Â∞Ñ„ÄÇ  Â¶ÇÊûúÁî®Êà∑ÂèëÁé∞Êüê‰∏ÄËØ≠Ë®ÄÁöÑÁ±ªÂûãÂú® Fory Á±ªÂûãÁ≥ªÁªü‰∏≠ÂØπÂ∫îÂ§ö‰∏™Á±ªÂûãÔºå‰æãÂ¶Ç Java ‰∏≠ÁöÑ long ÂØπÂ∫î int64/varint64/sliint64ÔºåËøôÊÑèÂë≥ÁùÄËØ•ËØ≠Ë®ÄÁº∫Â∞ëÊüê‰∫õÁ±ªÂûãÔºåÁî®Êà∑Âú®‰ΩøÁî® Fory Êó∂ÈúÄË¶ÅÈ¢ùÂ§ñÊèê‰æõÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Á±ªÂûãÊ≥®Ëß£‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_type_mapping#Á±ªÂûãÊ≥®Ëß£","content":" Â¶ÇÊûúÁ±ªÂûãÊòØÂè¶‰∏Ä‰∏™Á±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂèØ‰ª•‰∏∫Á±ªÂûãÁöÑÂ≠óÊÆµÊàñÊï¥‰∏™Á±ªÂûãÊèê‰æõÂÖÉ‰ø°ÊÅØÊèêÁ§∫„ÄÇ Ëøô‰∫õ‰ø°ÊÅØÂú®ÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠‰πüÂèØ‰ª•Êèê‰æõÔºö  JavaÔºö‰ΩøÁî® annotation„ÄÇC++Ôºö‰ΩøÁî®ÂÆèÂíåÊ®°Êùø„ÄÇGolangÔºö‰ΩøÁî® struct tag„ÄÇPythonÔºö‰ΩøÁî® typehint„ÄÇRustÔºö‰ΩøÁî®ÂÆè„ÄÇ  Á§∫‰æãÔºö  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"0.11","tagName":"h2"},{"title":"Á±ªÂûãÂåÖË£ÖÂô®‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_type_mapping#Á±ªÂûãÂåÖË£ÖÂô®","content":" Â¶ÇÊûúÁ±ªÂûã‰∏çÊòØÁ±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂøÖÈ°ªÁî® Fory Á±ªÂûãÂåÖË£ÖËØ•Á±ªÂûã‰ª•‰º†ÈÄíÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ‰æãÂ¶ÇÔºåÂÅáËÆæ Fory Java Êèê‰æõ‰∫Ü VarInt64 Á±ªÂûãÔºåÂΩìÁî®Êà∑Ë∞ÉÁî® fory.serialize(long_value) Êó∂ÔºåÈúÄË¶ÅËøôÊ†∑Ë∞ÉÁî®Ôºöfory.serialize(new VarInt64(long_value))„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/introduction/benchmark","content":"","keywords":"","version":"0.11"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.11/docs/introduction/benchmark#java-Â∫èÂàóÂåñ","content":"         ","version":"0.11","tagName":"h3"},{"title":"Java ÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.11/docs/introduction/benchmark#java-ÂèçÂ∫èÂàóÂåñ","content":"         ÊúâÂÖ≥Á±ªÂûãÂêëÂâç/ÂêëÂêéÂÖºÂÆπÊÄß„ÄÅÂ†ÜÂ§ñÊîØÊåÅ„ÄÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÁöÑÊõ¥Â§ö benchmark ÊµãËØïÔºåËØ∑ÂèÇËßÅbenchmarks  ","version":"0.11","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/0.11/docs/introduction/benchmark#javascript","content":"   ËØ•Êù°ÂΩ¢Âõæ‰ΩøÁî®ÁöÑÊï∞ÊçÆÂåÖÊã¨‰∏Ä‰∏™ÂÖ∑ÊúâÂ§öÁßçÂ≠óÊÆµÁ±ªÂûãÁöÑÂ§çÊùÇÂØπË±°ÔºåJSON Êï∞ÊçÆÁöÑÂ§ßÂ∞è‰∏∫ 3KB„ÄÇ  ËØ∑ÂèÇÈòÖbenchmarks benchmark ÊµãËØï‰ª£Á†Å„ÄÇ ","version":"0.11","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ‰ªãÁªç","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/introduction/","content":"","keywords":"","version":"0.11"},{"title":"ÂçèËÆÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#ÂçèËÆÆ","content":" ‰∏çÂêåÁöÑÂú∫ÊôØÊúâ‰∏çÂêåÁöÑÂ∫èÂàóÂåñË¶ÅÊ±Ç„ÄÇApache Fory‚Ñ¢ ‰∏∫Ëøô‰∫õÈúÄÊ±ÇËÆæËÆ°Âπ∂ÂÆûÁé∞‰∫ÜÂ§ö‰∏™‰∫åËøõÂà∂ÂçèËÆÆÔºö  Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂçèËÆÆÔºö Ë∑®ËØ≠Ë®ÄËá™Âä®Â∫èÂàóÂåñ‰ªª‰ΩïÂØπË±°ÔºåÊó†ÈúÄ IDL ÂÆö‰πâ„ÄÅSchemaÁºñËØëÂíåÂØπË±°ÂçèËÆÆËΩ¨Êç¢ÔºõÊîØÊåÅÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÔºåÊó†ÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØÔºõÂéüÁîüÊîØÊåÅÂØπË±°Â§öÊÄÅ„ÄÇ ÂéüÁîü java/python ÂØπË±°ÂõæÂçèËÆÆÔºöÂü∫‰∫éÂçï‰∏ÄËØ≠Ë®ÄÁöÑÂÆåÊï¥Á±ªÂûãÁ≥ªÁªüËøõË°åÈ´òÂ∫¶‰ºòÂåñÔºõË°åÊ†ºÂºèÂçèËÆÆÔºöÁºìÂ≠òÂèãÂ•ΩÁöÑ‰∫åËøõÂà∂ÈöèÊú∫ËÆøÈóÆÊ†ºÂºèÔºåÊîØÊåÅË∑≥ËøáÂ∫èÂàóÂåñÂíåÈÉ®ÂàÜÂ∫èÂàóÂåñÔºåÂπ∂‰∏îÂèØ‰ª•Ëá™Âä®ËΩ¨Êç¢‰∏∫ÂàóÊ†ºÂºè„ÄÇ  Âü∫‰∫é fory Áé∞ÊúâÁöÑ buffer„ÄÅencoding„ÄÅmeta„ÄÅcodegen ÂíåÂÖ∂‰ªñÂäüËÉΩÔºåÂèØ‰ª•ËΩªÊùæÊ∑ªÂä†Êñ∞ÂçèËÆÆ„ÄÇÊâÄÊúâËøô‰∫õÂçèËÆÆÈÉΩÂÖ±‰∫´Áõ∏ÂêåÁöÑ‰ª£Á†ÅÂ∫ìÔºåÂπ∂‰∏î‰∏Ä‰∏™ÂçèËÆÆÁöÑ‰ºòÂåñÂèØ‰ª•Ë¢´Âè¶‰∏Ä‰∏™ÂçèËÆÆÈáçÁî®„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#ÂÖºÂÆπÊÄß","content":" ","version":"0.11","tagName":"h2"},{"title":"SchemaÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#schemaÂÖºÂÆπÊÄß","content":" Apache Fory‚Ñ¢ java ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÁ±ªÊû∂ÊûÑÂêëÂâç/ÂêëÂêéÂÖºÂÆπ„ÄÇÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂèØ‰ª•Áã¨Á´ãÊ∑ªÂä†/Âà†Èô§Â≠óÊÆµ„ÄÇ  Êàë‰ª¨ËÆ°ÂàíÂú®ÂÖÉÊï∞ÊçÆÂéãÁº©ÂÆåÊàêÂêéÊîØÊåÅË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñSchemaÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"‰∫åËøõÂà∂ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#‰∫åËøõÂà∂ÂÖºÂÆπÊÄß","content":" Êàë‰ª¨‰ªçÂú®ÊîπËøõÊàë‰ª¨ÁöÑÂçèËÆÆÔºåÁõÆÂâçÊó†Ê≥ïÁ°Æ‰øù fory ÁâàÊú¨‰πãÈó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇÂ¶ÇÊûúÊÇ®Â∞ÜÊù•Ë¶ÅÂçáÁ∫ß foryÔºåËØ∑ shade fory„ÄÇ  Âú® fory 1.0 ‰πãÂâçÂ∞ÜÁ°Æ‰øù‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂÆâÂÖ®‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#ÂÆâÂÖ®","content":" ÈùôÊÄÅÂ∫èÂàóÂåñÔºàÂ¶ÇË°åÊ†ºÂºèÔºâÊú¨Ë¥®‰∏äÊòØÂÆâÂÖ®ÁöÑ„ÄÇ‰ΩÜÂä®ÊÄÅÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÂèçÂ∫èÂàóÂåñÊú™Ê≥®ÂÜåÁöÑÁ±ªÂûãÔºåËøôÂèØËÉΩ‰ºöÂ∏¶Êù•ÂÆâÂÖ®È£éÈô©„ÄÇ  ‰æãÂ¶ÇÔºöÂèçÂ∫èÂàóÂåñÂèØËÉΩ‰ºöË∞ÉÁî® init constructor Êàñ equals/ hashCode ÊñπÊ≥ïÔºåÂ¶ÇÊûúÊñπÊ≥ï‰Ωì‰∏≠ÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÁ≥ªÁªüÂ∞ÜÂ§Ñ‰∫éÂç±Èô©‰πã‰∏≠„ÄÇ  Apache Fory‚Ñ¢ Êèê‰æõ‰∫Ü‰∏Ä‰∏™Á±ªÊ≥®ÂÜåÈÄâÈ°πÔºåÂπ∂ÈªòËÆ§ÂºÄÂêØËØ•ÈÄâÈ°πÔºåÂÆÉÂè™ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÂèó‰ø°‰ªªÁöÑÊ≥®ÂÜåÁ±ªÂûãÊàñÂÜÖÁΩÆÁ±ªÂûã„ÄÇ‰∏çË¶ÅÁ¶ÅÁî®Á±ªÊ≥®ÂÜåÊàñÁ±ªÊ≥®ÂÜåÊ£ÄÊü•ÔºåÈô§ÈùûÊÇ®ÂèØ‰ª•Á°Æ‰øùÊÇ®ÁöÑÁéØÂ¢ÉÁ°ÆÂÆûÊòØÂÆâÂÖ®ÁöÑ„ÄÇÂ¶ÇÊûúÊÇ®Á¶ÅÁî®‰∫Ü class Ê≥®ÂÜåÈÄâÈ°πÔºå‰Ω†ÈúÄË¶ÅËá™Ë°åË¥üË¥£Â∫èÂàóÂåñÁöÑÂÆâÂÖ®ÊÄß„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Ë∑ØÁ∫øÂõæ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#Ë∑ØÁ∫øÂõæ","content":" ÂÖÉÂéãÁº©„ÄÅËá™Âä®ÂÖÉÂÖ±‰∫´ÂíåË∑®ËØ≠Ë®ÄÂÖºÂÆπÊÄßÔºõÁî®‰∫é c++/golang ÁöÑ AOT Ê°ÜÊû∂ÔºåÁî®‰∫éÈùôÊÄÅÁîüÊàê‰ª£Á†ÅÔºõC++/Rust ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÔºõGolang/Rust/NodeJS Ë°åÂ≠òÊ†ºÂºèÊîØÊåÅÔºõProtoBuffer ÂÖºÂÆπÊÄßÊîØÊåÅÔºõÁâπÂæÅÂíåÊ®°ÂûãÂ∫èÂàóÂåñÂçèËÆÆÔºõ‰∏çÊñ≠ÊîπËøõÊàë‰ª¨ÁöÑÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩÔºå‰ª•Êõ¥Âø´ÊîØÊåÅ‰ªª‰ΩïÊñ∞ÁöÑÂçèËÆÆ„ÄÇ  ","version":"0.11","tagName":"h2"},{"title":"Â¶Ç‰ΩïË¥°ÁåÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/0.11/docs/introduction/#Â¶Ç‰ΩïË¥°ÁåÆ","content":" ËØ∑ÈòÖËØªË¥°ÁåÆÊåáÂçó‰ª•Ëé∑ÂèñÊúâÂÖ≥Â¶Ç‰ΩïË¥°ÁåÆÁöÑËØ¥Êòé„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"ÂÆâË£Ö Apache Fory‚Ñ¢","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/start/install","content":"","keywords":"","version":"0.11"},{"title":"Apache Fory‚Ñ¢ Java ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/docs/start/install#apache-fory-java-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä†ÂØπ Apache Fory ÁöÑ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-core&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- row/arrow format support --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-format&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt; --&gt;   ","version":"0.11","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ Scala ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/docs/start/install#apache-fory-scala-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_2.13&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_3&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.11.2&quot;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.11.2&quot;   ","version":"0.11","tagName":"h3"},{"title":"Fory Kotlin ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/docs/start/install#fory-kotlin-ÂÆâË£Ö","content":" To add a dependency on Apache Fory‚Ñ¢kotlin with maven, use the following:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-kotlin&lt;/artifactId&gt; &lt;version&gt;0.11.2&lt;/version&gt; &lt;/dependency&gt;   ","version":"0.11","tagName":"h2"},{"title":"Fory JavaScript ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/0.11/docs/start/install#fory-javascript-ÂÆâË£Ö","content":" Apache Fory ÁõÆÂâçÊöÇÊú™ÂèëÂ∏ÉÂà∞ NPM, ËØ∑ÈÄöËøáÊ∫êÁ†ÅÂÆâË£Ö„ÄÇ ","version":"0.11","tagName":"h2"},{"title":"Features","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/introduction/features","content":"Features Â§öÁßçËØ≠Ë®ÄÔºöJava/Python/C++/Golang/Javascript/Rust„ÄÇÈõ∂Êã∑Ë¥ùÔºöÁ±ª‰ººpickle5ÔºåÊîØÊåÅÂ†ÜÂ§ñËØª/ÂÜôÁöÑË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ„ÄÇÈ´òÊÄßËÉΩÔºöÈ´òÂ∫¶ÂèØÊâ©Â±ïÁöÑ JIT Ê°ÜÊû∂ÔºåÂèØÂú®ËøêË°åÊó∂‰ª•ÂºÇÊ≠•Â§öÁ∫øÁ®ãÊñπÂºèÁîüÊàêÂ∫èÂàóÂåñÁ®ãÂ∫è‰ª£Á†ÅÔºå‰ª•Âä†Âø´Â∫èÂàóÂåñÈÄüÂ∫¶ÔºåÈÄöËøá‰ª•‰∏ãÊñπÂºèÊèêÂçá 20-170 ÂÄçÁöÑÈÄüÂ∫¶Ôºö ÂáèÂ∞ëÂú®ÁîüÊàê‰ª£Á†Å‰∏≠ÂÜÖËÅîÂèòÈáèÂáèÂ∞ëÂÜÖÂ≠òËÆøÈóÆÔºõÈÄöËøáÂú®ÁîüÊàêÁöÑ‰ª£Á†Å‰∏≠ÂÜÖËÅîË∞ÉÁî®Êù•ÂáèÂ∞ëËôöÊãüÊñπÊ≥ïË∞ÉÁî®ÔºõÂáèÂ∞ëÊù°‰ª∂ÂàÜÊîØÔºõÂáèÂ∞ëÂìàÂ∏åÊü•ÊâæÔºõ ‰∫åËøõÂà∂ÂçèËÆÆÔºöÂØπË±°Âõæ„ÄÅË°åÊ†ºÂºèÁ≠â„ÄÇ Èô§‰∫ÜË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‰πãÂ§ñÔºåFory ËøòÊîØÊåÅ‰ª•‰∏ãÂäüËÉΩÔºö Áõ¥Êé•ÊõøÊç¢ Java Â∫èÂàóÂåñÊ°ÜÊû∂ÔºåÂ¶Ç JDK/Kryo/HessianÔºåÊó†ÈúÄ‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºå‰ΩÜÈÄüÂ∫¶ÊèêÈ´ò 100 ÂÄç„ÄÇÂÆÉÂèØ‰ª•Â§ßÂ§ßÊèêÈ´ò RPC Ë∞ÉÁî®ÊÄßËÉΩ„ÄÅÊï∞ÊçÆ‰º†ËæìÂíåÂØπË±°ÊåÅ‰πÖÂåñÁöÑÊïàÁéáÔºõJDK Â∫èÂàóÂåñ 100% ÂÖºÂÆπÔºåÂéüÁîüÊîØÊåÅ java Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ writeObject/readObject/writeReplace/readResolve/readObjectNoDataÔºõÊîØÊåÅ golang ÁöÑÂÖ±‰∫´ÂíåÂæ™ÁéØÂºïÁî®ÂØπË±°Â∫èÂàóÂåñÔºõÊîØÊåÅ golang ÁöÑËá™Âä®ÂØπË±°Â∫èÂàóÂåñ„ÄÇ","keywords":"","version":"0.11"},{"title":"Development","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/development","content":"","keywords":"","version":"0.11"},{"title":"How to build Fory‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#how-to-build-fory","content":" Please checkout the source tree from https://github.com/apache/fory.  ","version":"0.11","tagName":"h2"},{"title":"Build Fory Java‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-java","content":" cd java mvn clean compile -DskipTests   Environment Requirements‚Äã  java 1.8+maven 3.6.3+  ","version":"0.11","tagName":"h3"},{"title":"Build Fory Python‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-python","content":" cd python # Uninstall numpy first so that when we install pyarrow, it will install the correct numpy version automatically. # For Python versions less than 3.13, numpy 2 is not currently supported. pip uninstall -y numpy # Install necessary environment for Python &lt; 3.13. pip install pyarrow==15.0.0 Cython wheel pytest # For Python 3.13, pyarrow 18.0.0 is available and requires numpy version greater than 2. # pip install pyarrow==18.0.0 Cython wheel pytest pip install -v -e .   Environment Requirements‚Äã  python 3.6+  ","version":"0.11","tagName":"h3"},{"title":"Build Fory C++‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==15.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==15.0.0 bazel build //cpp/fory/encoder:fory_encoder   Environment Requirements‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"0.11","tagName":"h3"},{"title":"Build Fory GoLang‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Environment Requirements‚Äã  go 1.13+  ","version":"0.11","tagName":"h3"},{"title":"Build Fory Rust‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-rust","content":" cd rust # build cargo build # run test cargo test   Environment Requirements‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"0.11","tagName":"h3"},{"title":"Build Fory JavaScript‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#build-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Environment Requirements‚Äã  node 14+npm 8+  ","version":"0.11","tagName":"h3"},{"title":"Lint Markdown Docs‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/0.11/guide/development#lint-markdown-docs","content":" # Install prettier globally npm install -g prettier # Fix markdown files prettier --write &quot;**/*.md&quot;   Environment Requirements‚Äã  node 14+npm 8+ ","version":"0.11","tagName":"h3"},{"title":"Java Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"0.11"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Âø´ÈÄüÂºÄÂßã","content":" Ê≥®ÊÑèÔºåFory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ßÔºåFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî®ÔºåËÄå‰∏çÊòØÊØèÊ¨°ÈÉΩÊñ∞Âª∫„ÄÇ Âª∫ËÆÆÂ∞Ü Fory ‰øùÂ≠òÂú®ÈùôÊÄÅÂÖ®Â±ÄÂèòÈáè„ÄÅÂçï‰æãÂØπË±°ÊàñÊúâÈôêÊï∞ÈáèÁöÑÂÆû‰æãÂèòÈáè‰∏≠„ÄÇ  ÂçïÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Ê≥®ÂÜåÁ±ªÂûãÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄÔºå‰ΩÜ‰∏çÊòØÂº∫Âà∂ÁöÑ„ÄÇ // ÂêØÁî®Á±ªÊ≥®ÂÜåÂêéÔºåÊâÄÊúâËá™ÂÆö‰πâÁ±ªÂûãÈÉΩÂøÖÈ°ªÊ≥®ÂÜå„ÄÇ fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Â§öÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory ÂÆû‰æãÂ§çÁî®Á§∫‰æãÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // Â§çÁî® fory ÂÆû‰æã private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.11","tagName":"h2"},{"title":"ForyBuilder ÈÖçÁΩÆÈÄâÈ°π‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#forybuilder-ÈÖçÁΩÆÈÄâÈ°π","content":" ÈÄâÈ°πÂêç\tËØ¥Êòé\tÈªòËÆ§ÂÄºtimeRefIgnored\tÊòØÂê¶ÂøΩÁï•ÊâÄÊúâÂú® TimeSerializers Ê≥®ÂÜåÁöÑÊó∂Èó¥Á±ªÂûãÂèäÂÖ∂Â≠êÁ±ªÁöÑÂºïÁî®Ë∑üË∏™ÔºàÂΩìÂºïÁî®Ë∑üË∏™ÂºÄÂêØÊó∂Ôºâ„ÄÇÂ¶ÇÈúÄÂØπÊó∂Èó¥Á±ªÂûãÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂèØÈÄöËøá Fory#registerSerializer(Class, Serializer) Ê≥®ÂÜå„ÄÇ‰æãÂ¶ÇÔºöfory.registerSerializer(Date.class, new DateSerializer(fory, true))„ÄÇÊ≥®ÊÑèÔºåÂêØÁî®ÂºïÁî®Ë∑üË∏™ÈúÄÂú®ÂåÖÂê´Êó∂Èó¥Â≠óÊÆµÁöÑÁ±ªÂûã‰ª£Á†ÅÁîüÊàêÂâçÂÆåÊàêÔºåÂê¶ÂàôËøô‰∫õÂ≠óÊÆµ‰ªç‰ºöË∑≥ËøáÂºïÁî®Ë∑üË∏™„ÄÇ\ttrue compressInt\tÊòØÂê¶ÂêØÁî® int ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressLong\tÊòØÂê¶ÂêØÁî® long ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressString\tÊòØÂê¶ÂêØÁî®Â≠óÁ¨¶‰∏≤ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\tfalse classLoader\tÁ±ªÂä†ËΩΩÂô®‰∏çÂª∫ËÆÆÂä®ÊÄÅÂèòÊõ¥ÔºåFory ‰ºöÁºìÂ≠òÁ±ªÂÖÉÊï∞ÊçÆ„ÄÇÂ¶ÇÈúÄÂèòÊõ¥Á±ªÂä†ËΩΩÂô®ÔºåËØ∑‰ΩøÁî® LoaderBinding Êàñ ThreadSafeFory„ÄÇ\tThread.currentThread().getContextClassLoader() compatibleMode\tÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπÊÄßÈÖçÁΩÆ„ÄÇ‰∏é checkClassVersion ÈÖçÁΩÆÁõ∏ÂÖ≥„ÄÇSCHEMA_CONSISTENTÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÈúÄ‰∏ÄËá¥„ÄÇCOMPATIBLEÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÂèØ‰∏çÂêåÔºåÂèØÁã¨Á´ãÂ¢ûÂà†Â≠óÊÆµ„ÄÇËØ¶ËßÅ„ÄÇ\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tÊòØÂê¶Ê†°È™åÁ±ªÁªìÊûÑ‰∏ÄËá¥ÊÄß„ÄÇÂêØÁî®ÂêéÔºåFory ‰ºöÂÜôÂÖ•Âπ∂Ê†°È™å classVersionHash„ÄÇËã•ÂêØÁî® CompatibleMode#COMPATIBLEÔºåÊ≠§È°π‰ºöËá™Âä®ÂÖ≥Èó≠„ÄÇÈô§ÈùûËÉΩÁ°Æ‰øùÁ±ª‰∏ç‰ºöÊºîÂåñÔºåÂê¶Âàô‰∏çÂª∫ËÆÆÂÖ≥Èó≠„ÄÇ\tfalse checkJdkClassSerializable\tÊòØÂê¶Ê†°È™å java.* ‰∏ãÁöÑÁ±ªÂÆûÁé∞‰∫Ü Serializable Êé•Âè£„ÄÇËã•Êú™ÂÆûÁé∞ÔºåFory ‰ºöÊäõÂá∫ UnsupportedOperationException„ÄÇ\ttrue registerGuavaTypes\tÊòØÂê¶È¢ÑÊ≥®ÂÜå Guava Á±ªÂûãÔºàÂ¶Ç RegularImmutableMap/RegularImmutableListÔºâ„ÄÇËøô‰∫õÁ±ªÂûãËôΩÈùûÂÖ¨ÂºÄ APIÔºå‰ΩÜËæÉ‰∏∫Á®≥ÂÆö„ÄÇ\ttrue requireClassRegistration\tÂÖ≥Èó≠ÂêéÂèØÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ\ttrue suppressClassRegistrationWarnings\tÊòØÂê¶Â±èËîΩÁ±ªÊ≥®ÂÜåË≠¶Âëä„ÄÇË≠¶ÂëäÂèØÁî®‰∫éÂÆâÂÖ®ÂÆ°ËÆ°Ôºå‰ΩÜÂèØËÉΩÂΩ±Âìç‰ΩìÈ™åÔºåÈªòËÆ§ÂºÄÂêØÂ±èËîΩ„ÄÇ\ttrue metaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´Ê®°Âºè„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ scopedMetaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂçïÊ¨°Â∫èÂàóÂåñËåÉÂõ¥ÂÜÖÁöÑÂÖÉÊï∞ÊçÆÁã¨‰∫´„ÄÇËØ•ÂÖÉÊï∞ÊçÆ‰ªÖÂú®Êú¨Ê¨°Â∫èÂàóÂåñ‰∏≠ÊúâÊïàÔºå‰∏ç‰∏éÂÖ∂‰ªñÂ∫èÂàóÂåñÂÖ±‰∫´„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ metaCompressor\tËÆæÁΩÆÂÖÉÊï∞ÊçÆÂéãÁº©Âô®„ÄÇÈªòËÆ§‰ΩøÁî®Âü∫‰∫é Deflater ÁöÑ DeflaterMetaCompressorÔºåÂèØËá™ÂÆö‰πâÂ¶Ç zstd Á≠âÊõ¥È´òÂéãÁº©ÊØîÁöÑÂéãÁº©Âô®„ÄÇÈúÄ‰øùËØÅÁ∫øÁ®ãÂÆâÂÖ®„ÄÇ\tDeflaterMetaCompressor deserializeNonexistentClass\tÊòØÂê¶ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñ/Ë∑≥Ëøá‰∏çÂ≠òÂú®ÁöÑÁ±ªÁöÑÊï∞ÊçÆ„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ codeGenEnabled\tÊòØÂê¶ÂêØÁî®‰ª£Á†ÅÁîüÊàê„ÄÇÂÖ≥Èó≠ÂêéÈ¶ñÊ¨°Â∫èÂàóÂåñÊõ¥Âø´Ôºå‰ΩÜÂêéÁª≠Â∫èÂàóÂåñÊÄßËÉΩËæÉ‰Ωé„ÄÇ\ttrue asyncCompilationEnabled\tÊòØÂê¶ÂêØÁî®ÂºÇÊ≠•ÁºñËØë„ÄÇÂêØÁî®ÂêéÔºåÂ∫èÂàóÂåñÂÖàÁî®Ëß£ÈáäÊ®°ÂºèÔºåJIT ÂÆåÊàêÂêéÂàáÊç¢‰∏∫ JIT Ê®°Âºè„ÄÇ\tfalse scalaOptimizationEnabled\tÊòØÂê¶ÂêØÁî® Scala ÁâπÂÆö‰ºòÂåñ„ÄÇ\tfalse copyRef\tÂÖ≥Èó≠ÂêéÔºåÊ∑±Êã∑Ë¥ùÊÄßËÉΩÊõ¥Â•ΩÔºå‰ΩÜ‰ºöÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®„ÄÇÂØπË±°Âõæ‰∏≠ÁöÑÂêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°„ÄÇ\ttrue serializeEnumByName\tÂêØÁî®ÂêéÔºåÊûö‰∏æÊåâÂêçÁß∞Â∫èÂàóÂåñÔºåÂê¶ÂàôÊåâ ordinal„ÄÇ\tfalse  ","version":"0.11","tagName":"h2"},{"title":"È´òÁ∫ßÁî®Ê≥ï‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#È´òÁ∫ßÁî®Ê≥ï","content":" ","version":"0.11","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ÂàõÂª∫‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#apache-fory-ÂàõÂª∫","content":" ÂçïÁ∫øÁ®ã Fory Á§∫‰æãÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Á∫øÁ®ãÂÆâÂÖ® Fory Á§∫‰æãÔºö  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) // ÂêØÁî® int ÂéãÁº© // .withIntCompressed(true) // ÂêØÁî® long ÂéãÁº© // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ","version":"0.11","tagName":"h3"},{"title":"Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ","content":" Âú®ÂÆûÈôÖÁ≥ªÁªü‰∏≠ÔºåÂ∫èÂàóÂåñÁî®Âà∞ÁöÑÁ±ªÁªìÊûÑÂèØËÉΩ‰ºöÈöèÊó∂Èó¥ÂèòÂåñÔºåÊØîÂ¶ÇÂ≠óÊÆµÁöÑÂ¢ûÂà†„ÄÇÂΩìÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´Ø‰ΩøÁî®‰∏çÂêåÁâàÊú¨ÁöÑ jar Êó∂ÔºåÁ±ªÁªìÊûÑÂèØËÉΩ‰∏ç‰∏ÄËá¥„ÄÇ  Fory ÈªòËÆ§ÈááÁî® CompatibleMode.SCHEMA_CONSISTENTÔºåÂç≥Ë¶ÅÊ±ÇÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ÄËá¥Ôºå‰ª•Ëé∑ÂæóÊúÄÂ∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØÂíåÊúÄÈ´òÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂèçÂ∫èÂàóÂåñ‰ºöÂ§±Ë¥•„ÄÇ  Â¶ÇÈúÄÊîØÊåÅÁ±ªÁªìÊûÑÊºîÂåñÔºàÂâçÂêë/ÂêéÂêëÂÖºÂÆπÔºâÔºåÈúÄÂ∞Ü Fory ÈÖçÁΩÆ‰∏∫ CompatibleMode.COMPATIBLEÔºåÂÖÅËÆ∏Â≠óÊÆµÂ¢ûÂà†ÔºåÂèçÂ∫èÂàóÂåñÁ´ØÂèØËá™Âä®ÈÄÇÈÖç‰∏çÂêåÁªìÊûÑ„ÄÇ  Á§∫‰æãÔºö  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ÂÖºÂÆπÊ®°Âºè‰∏ãÔºåÁ±ªÂÖÉÊï∞ÊçÆ‰ºöÂÜôÂÖ•Â∫èÂàóÂåñÁªìÊûú„ÄÇApache Fory‚Ñ¢ ÈááÁî®È´òÊïàÂéãÁº©ÁÆóÊ≥ïÈôç‰ΩéÂÖÉÊï∞ÊçÆÂºÄÈîÄÔºå‰ΩÜ‰ªç‰ºöÊúâ‰∏ÄÂÆö‰ΩìÁßØÂ¢ûÂä†„ÄÇ‰∏∫Ëøõ‰∏ÄÊ≠•Èôç‰ΩéÂÖÉÊï∞ÊçÆÊàêÊú¨ÔºåApache Fory‚Ñ¢ ÊîØÊåÅÂÖÉÊï∞ÊçÆÂÖ±‰∫´Êú∫Âà∂ÔºåËØ¶ÊÉÖËßÅMeta Sharing„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂéãÁº©‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂéãÁº©","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed ÂèØÁî®‰∫éÂéãÁº© int/long Á±ªÂûã‰ª•ÂáèÂ∞è‰ΩìÁßØ„ÄÇÈªòËÆ§Âùá‰∏∫ÂºÄÂêØ„ÄÇ  Â¶ÇÊûúÂ∫èÂàóÂåñ‰ΩìÁßØ‰∏çÊïèÊÑüÔºàÂ¶Ç‰πãÂâçÁî® flatbuffers Á≠âÊó†ÂéãÁº©Ê†ºÂºèÔºâÔºåÂª∫ËÆÆÂÖ≥Èó≠ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇÂØπ‰∫éÂÖ®‰∏∫Êï∞Â≠óÁöÑÊï∞ÊçÆÔºåÂéãÁº©ÂèØËÉΩÂ∏¶Êù• 80% ÁöÑÊÄßËÉΩÊçüÂ§±„ÄÇ  int ÂéãÁº©ÈááÁî® 1~5 Â≠óËäÇÂèòÈïøÁºñÁ†ÅÔºålong ÂéãÁº©ÊîØÊåÅ‰∏§ÁßçÊñπÂºèÔºö  SLIÔºàSmall long as intÔºåÈªòËÆ§ÔºâÔºölong Âú® [-1073741824, 1073741823] ËåÉÂõ¥ÂÜÖÁî® 4 Â≠óËäÇÁºñÁ†ÅÔºåÂê¶ÂàôÁî® 9 Â≠óËäÇ„ÄÇPVLÔºàProgressive Variable-length LongÔºâÔºöÈááÁî®ÂèòÈïøÁºñÁ†ÅÔºåË¥üÊï∞ÈÄöËøá (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ËΩ¨Êç¢„ÄÇ  Â¶Ç long Á±ªÂûãÊï∞ÊçÆÊó†Ê≥ïÊúâÊïàÂéãÁº©ÔºåÂª∫ËÆÆÂÖ≥Èó≠ long ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÂØπË±°Ê∑±Êã∑Ë¥ù‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂØπË±°Ê∑±Êã∑Ë¥ù","content":" Ê∑±Êã∑Ë¥ùÁ§∫‰æãÔºö  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Â¶ÇÈúÄÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®ÔºàÂç≥ÂØπË±°Âõæ‰∏≠Âêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°ÔºâÔºåÂèØÂÖ≥Èó≠ refCopyÔºö  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"0.11","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" Êüê‰∫õÂú∫ÊôØ‰∏ãÈúÄ‰∏∫ÁâπÂÆöÁ±ªÂûãÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÔºåÂ∞§ÂÖ∂ÊòØ JDK writeObject/writeReplace/readObject/readResolve ÊñπÂºèÊïàÁéáËæÉ‰ΩéÊó∂„ÄÇÂ¶Ç‰∏ã‰æãÔºåÈÅøÂÖç Foo#writeObject Ë¢´Ë∞ÉÁî®Ôºö  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®Ôºö  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"0.11","tagName":"h3"},{"title":"ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®","content":" ‰∏é Map Á±ª‰ººÔºåÂÆûÁé∞Ëá™ÂÆö‰πâ Collection Á±ªÂûãÁöÑÂ∫èÂàóÂåñÂô®Êó∂ÔºåÈúÄÁªßÊâø CollectionSerializer Êàñ AbstractCollectionSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Âú®‰∫éÔºåAbstractCollectionSerializer ÂèØÁî®‰∫éÂ∫èÂàóÂåñÁ±ª‰ººÈõÜÂêàÁªìÊûÑ‰ΩÜ‰∏çÊòØ Java Collection Â≠êÁ±ªÁöÑÁ±ªÂûã„ÄÇ  ÂØπ‰∫éÈõÜÂêàÂ∫èÂàóÂåñÂô®ÔºåÊúâ‰∏Ä‰∏™ÁâπÊÆäÂèÇÊï∞ supportCodegenHook ÈúÄË¶ÅÈÖçÁΩÆÔºö  ËÆæ‰∏∫ true Êó∂Ôºö ÂêØÁî®ÈõÜÂêàÂÖÉÁ¥†ÁöÑÈ´òÊïàËÆøÈóÆÂíå JIT ÁºñËØëÔºåÊèêÂçáÊÄßËÉΩÁõ¥Êé•Â∫èÂàóÂåñË∞ÉÁî®ÔºåÂÜÖËÅî map ÁöÑ key-valueÔºåÊó†Âä®ÊÄÅÂàÜÂèëÂºÄÈîÄÊé®ËçêÁî®‰∫éÊ†áÂáÜÈõÜÂêàÁ±ªÂûã ËÆæ‰∏∫ false Êó∂Ôºö ÈááÁî®Êé•Âè£ÊñπÂºèËÆøÈóÆÂÖÉÁ¥†ÔºåÂä®ÊÄÅÂàÜÂèëÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÈÄÇÂêàÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±ÇÁöÑËá™ÂÆö‰πâÈõÜÂêàÂèØÂ§ÑÁêÜÂ§çÊùÇÈõÜÂêàÂÆûÁé∞  ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®ÂÆûÁé∞‚Äã  ÂÆûÁé∞ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®Êó∂ÔºåÂèØÂà©Áî® Fory Áé∞ÊúâÁöÑ‰∫åËøõÂà∂Ê†ºÂºèÂíåÈõÜÂêàÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩ„ÄÇÂÖ≥ÈîÆÂú®‰∫éÊ≠£Á°ÆÂÆûÁé∞ onCollectionWrite Âíå newCollection ÊñπÊ≥ï‰ª•Â§ÑÁêÜÂÖÉÊï∞ÊçÆÔºåÂÖ∂‰ΩôÂÖÉÁ¥†Â∫èÂàóÂåñÁî± Fory Ëá™Âä®ÂÆåÊàê„ÄÇ  Á§∫‰æãÔºö  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook ÊéßÂà∂ÊòØÂê¶ÂêØÁî® JIT ÁºñËØë super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // ÂÜôÂÖ•ÈõÜÂêàÂ§ßÂ∞è buffer.writeVarUint32Small7(value.size()); // ÂèØÂÜôÂÖ•È¢ùÂ§ñÈõÜÂêàÂÖÉÊï∞ÊçÆ return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // ÂàõÂª∫Êñ∞ÈõÜÂêàÂÆû‰æã Collection collection = super.newCollection(buffer); // ËØªÂèñÂπ∂ËÆæÁΩÆÈõÜÂêàÂ§ßÂ∞è int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Ê≥®ÊÑèÔºöÂÆûÁé∞ newCollection Êó∂ÈúÄË∞ÉÁî® setNumElementsÔºå‰ª•ÂëäÁü• Fory ÂèçÂ∫èÂàóÂåñÂ§öÂ∞ëÂÖÉÁ¥†„ÄÇ  ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâÈõÜÂêàÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄÂ∫èÂàóÂåñÂ∫ïÂ±Ç‰∏∫ÂéüÂßãÊï∞ÁªÑÊàñÊúâÁâπÊÆäÈúÄÊ±ÇÁöÑÈõÜÂêàÁ±ªÂûãÔºåÊ≠§Êó∂ÂèØÁ¶ÅÁî® JITÔºåÁõ¥Êé•ÈáçÂÜô write Âíå read ÊñπÊ≥ï„ÄÇ  ËøôÁßçÊñπÂºèÔºö  ÂÆåÂÖ®ÊéßÂà∂Â∫èÂàóÂåñÊ†ºÂºèÈÄÇÂêàÂéüÂßãÊï∞ÁªÑË∑≥ËøáÈõÜÂêàËø≠‰ª£ÂºÄÈîÄÂèØÁõ¥Êé•ÂÜÖÂ≠òËÆøÈóÆ  Á§∫‰æãÔºàÂéüÂßã int Êï∞ÁªÑÔºâÔºö  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public void set(int index, int value) { if (index &gt;= size) throw new IndexOutOfBoundsException(); elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends AbstractCollectionSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Á¶ÅÁî® JITÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { buffer.writeVarUint32Small7(value.size()); int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { int size = buffer.readVarUint32Small7(); int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // JIT Á¶ÅÁî®Êó∂‰ª•‰∏ãÊñπÊ≥ï‰∏ç‰ΩøÁî® @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  ÂéüÂßãÊï∞ÁªÑÂ≠òÂÇ®ÔºöÁõ¥Êé•Áî® int[]ÔºåÈÅøÂÖçË£ÖÁÆ±/ÊãÜÁÆ±ÔºåÂÜÖÂ≠òÂ∏ÉÂ±ÄÈ´òÊïà„ÄÇÁõ¥Êé•Â∫èÂàóÂåñÔºöÂÖàÂÜô sizeÔºåÂÜçÂÜôÂéüÂßãÂÄºÔºåÊó†ÈúÄËø≠‰ª£ÔºåÊó†Ë£ÖÁÆ±/ÊãÜÁÆ±„ÄÇÁõ¥Êé•ÂèçÂ∫èÂàóÂåñÔºöÂÖàËØª sizeÔºåÂÜçËØªÂéüÂßãÂÄºÂ°´ÂÖÖÊï∞ÁªÑÔºåÊúÄÂêéÊûÑÈÄ†ÂØπË±°„ÄÇÁ¶ÅÁî® JITÔºösupportCodegenHook=falseÔºåÈáçÂÜô write/readÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÊ†ºÂºè„ÄÇ  ÈÄÇÁî®Âú∫ÊôØÔºö  Âè™Â§ÑÁêÜÂéüÂßãÁ±ªÂûãÊÄßËÉΩÊûÅËá¥Ë¶ÅÊ±ÇÈúÄÊúÄÂ∞èÂÜÖÂ≠òÂºÄÈîÄÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±Ç  ‰ΩøÁî®Á§∫‰æãÔºö  IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); byte[] bytes = fory.serialize(list); IntList newList = (IntList) fory.deserialize(bytes);   ËôΩÁÑ∂ÊîæÂºÉ‰∫Ü Fory ÁöÑÈÉ®ÂàÜ‰ºòÂåñÔºå‰ΩÜÂØπÂéüÂßãÁ±ªÂûãÂíåÁõ¥Êé•Êï∞ÁªÑËÆøÈóÆÂú∫ÊôØÊÄßËÉΩÊûÅÈ´ò„ÄÇ  ÂÆûÁé∞ collection-like Á±ªÂûãÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄ‰∏∫Á±ª‰ººÈõÜÂêà‰ΩÜÈùûÊ†áÂáÜ Java Collection ÁöÑÁ±ªÂûãÂÆûÁé∞Â∫èÂàóÂåñÂô®„ÄÇÂéüÂàôÂ¶Ç‰∏ãÔºö  ÁªßÊâø AbstractCollectionSerializerÂêØÁî® JIT ‰ºòÂåñÔºàsupportCodegenHook=trueÔºâÈÄöËøáËßÜÂõæÁ±ªÈ´òÊïàËÆøÈóÆÂÖÉÁ¥†Ê≠£Á°ÆÁÆ°ÁêÜ size  Á§∫‰æãÔºö  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) throw new IllegalStateException(&quot;Collection is full&quot;); elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends AbstractCollectionSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  Êï∞ÁªÑÂ≠òÂÇ®ÔºåÂÆöÈïøÔºåÁõ¥Êé•ËÆøÈóÆËßÜÂõæÁ±ªÁªßÊâø AbstractCollectionÔºåÂÆûÁé∞Ëø≠‰ª£Âíå addÊîØÊåÅ JIT ‰ºòÂåñÔºåÊï∞ÁªÑÈõ∂Êã∑Ë¥ùÊÄßËÉΩ‰ºòÂÖàÔºåÁÅµÊ¥ªÊÄßÁï•‰Ωé    Â¶ÇÈúÄÁªßÁª≠Ë°•ÂÖÖ map-like Á±ªÂûã„ÄÅÊ≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®„ÄÅExternalizable ÊîØÊåÅÁ≠âÂÜÖÂÆπÔºåËØ∑ÂõûÂ§ç&quot;ÁªßÁª≠&quot;ÔºÅ  ","version":"0.11","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâ-map-Â∫èÂàóÂåñÂô®","content":" Ëá™ÂÆö‰πâ Map Á±ªÂûãÂ∫èÂàóÂåñÂô®ÈúÄÁªßÊâø MapSerializer Êàñ AbstractMapSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Á±ª‰ººÈõÜÂêàÂ∫èÂàóÂåñÂô®„ÄÇ  supportCodegenHook=trueÔºöÊé®ËçêÁî®‰∫éÊ†áÂáÜ MapÔºåÊîØÊåÅ JIT ‰ºòÂåñsupportCodegenHook=falseÔºöÈÄÇÂêàÁâπÊÆäÈúÄÊ±ÇÔºåÈúÄÊâãÂä®ÂÆûÁé∞Â∫èÂàóÂåñÈÄªËæë  ÊîØÊåÅ JIT ÁöÑ Map Â∫èÂàóÂåñÂô®Á§∫‰æã‚Äã  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { buffer.writeVarUint32Small7(value.size()); return value; } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new HashMap(numElements); } }   ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã  ÈÄÇÁî®‰∫éÊúâÁâπÊÆäÂ≠óÊÆµÊàñËá™ÂÆö‰πâ‰∫åËøõÂà∂Ê†ºÂºèÁöÑ Map Á±ªÂûã„ÄÇ  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { // ... ÁúÅÁï•ÂÆûÁé∞ ... } class FixedValueMapSerializer extends AbstractMapSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { buffer.writeInt32(value.getFixedValue()); buffer.writeVarUint32Small7(value.getKeys().size()); for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { int fixedValue = buffer.readInt32(); int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   ","version":"0.11","tagName":"h3"},{"title":"Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" ÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÂêéÔºåÈúÄÈÄöËøáÂ¶Ç‰∏ãÊñπÂºèÊ≥®ÂÜåÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Ê≥®ÂÜå Map Â∫èÂàóÂåñÂô® fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Ê≥®ÂÜåÈõÜÂêàÂ∫èÂàóÂåñÂô® fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Ê≥®ÊÑè‰∫ãÈ°πÔºö ÂßãÁªàÁªßÊâøÂêàÈÄÇÁöÑÂü∫Á±ªÔºàMap Áî® MapSerializer/AbstractMapSerializerÔºåÈõÜÂêàÁî® CollectionSerializer/AbstractCollectionSerializerÔºâÊ†πÊçÆ supportCodegenHook ÈÄâÊã©ÊÄßËÉΩ‰∏éÁÅµÊ¥ªÊÄßÂ¶ÇÈúÄÂºïÁî®Ë∑üË∏™ÔºåÈúÄÊ≠£Á°ÆÂ§ÑÁêÜsupportCodegenHook=true Êó∂ÔºåÈúÄÁî® setNumElements/getAndClearNumElements ÁÆ°ÁêÜÂÖÉÁ¥†Êï∞Èáè  ","version":"0.11","tagName":"h3"},{"title":"ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå","content":" ForyBuilder#requireClassRegistration ÂèØÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÊ†°È™åÔºåÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ª‰ΩÜÊúâÂÆâÂÖ®È£éÈô©„ÄÇ  Â¶ÇÊó†Ê≥ïÁ°Æ‰øùÁéØÂ¢ÉÂÆâÂÖ®ÔºåÂàáÂãøÂÖ≥Èó≠Á±ªÊ≥®ÂÜå„ÄÇ ÂèçÂ∫èÂàóÂåñÊú™Áü•/‰∏çÂèó‰ø°‰ªªÁ±ªÂûãÊó∂ÔºåÊÅ∂ÊÑè‰ª£Á†ÅÂèØËÉΩÂú® init/equals/hashCode Á≠âÊñπÊ≥ï‰∏≠Ë¢´ÊâßË°å„ÄÇ  Á±ªÊ≥®ÂÜå‰∏ç‰ªÖÊèêÂçáÂÆâÂÖ®ÊÄßÔºåËøòÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄ„ÄÇÊ≥®ÂÜåÈ°∫Â∫èÈúÄ‰øùÊåÅÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´Ø‰∏ÄËá¥„ÄÇ  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   Â¶ÇÈúÄÂÖ≥Èó≠Ê≥®ÂÜåÊ†°È™åÔºåÂèØÈÄöËøá ClassResolver#setClassChecker Ëá™ÂÆö‰πâÂÖÅËÆ∏ÁöÑÁ±ªÂêçÔºö  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   Êàñ‰ΩøÁî® AllowListCheckerÔºö  AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory Êèê‰æõ‰∫Ü org.apache.fory.resolver.AllowListCheckerÔºå‰πüÂèØËá™Ë°åÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊ†°È™åÈÄªËæë„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª","content":" Êåâ id Ê≥®ÂÜåÁ±ªÊÄßËÉΩÂíå‰ΩìÁßØÊõ¥‰ºòÔºå‰ΩÜÂ¶ÇÈúÄÁÆ°ÁêÜÂ§ßÈáèÁ±ªÂûã idÔºåÂèØÁî® register(Class&lt;?&gt; cls, String namespace, String typeName) ÊåâÂêçÁß∞Ê≥®ÂÜåÔºö  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   Â¶ÇÊó†ÈáçÂêçÔºånamespace ÂèØ‰∏∫Á©∫‰ª•ÂáèÂ∞ë‰ΩìÁßØ„ÄÇ  ‰∏çÂª∫ËÆÆÁî®ÂêçÁß∞Ê≥®ÂÜåÔºåÂõ†Â∫èÂàóÂåñ‰ΩìÁßØ‰ºöÊòæËëóÂ¢ûÂä†„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÔºåÂèØÈ´òÊïàÂ§ÑÁêÜÂ§ßÂØπË±°ÊàñÁõ¥Êé•ÂÜÖÂ≠òÁºìÂÜ≤Âå∫„ÄÇÁ§∫‰æãÔºö  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂ§çÁî®Ôºå‰∏çË¶ÅÊØèÊ¨°Êñ∞Âª∫ static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"0.11","tagName":"h3"},{"title":"ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºàMeta SharingÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂÖÉÊï∞ÊçÆÂÖ±‰∫´meta-sharing","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂú®Âêå‰∏Ä‰∏ä‰∏ãÊñáÔºàÂ¶Ç TCP ËøûÊé•ÔºâÂÜÖÂÖ±‰∫´Á±ªÂûãÂÖÉÊï∞ÊçÆÔºàÁ±ªÂêç„ÄÅÂ≠óÊÆµÂêç„ÄÅÊúÄÁªàÂ≠óÊÆµÁ±ªÂûãÁ≠âÔºâ„ÄÇÈ¶ñÊ¨°Â∫èÂàóÂåñÊó∂ÂÖÉÊï∞ÊçÆ‰ºöÂèëÈÄÅÂà∞ÂØπÁ´ØÔºåÂØπÁ´ØÂèØÂü∫‰∫éÂÖÉÊï∞ÊçÆÈáçÂª∫ÂèçÂ∫èÂàóÂåñÂô®ÔºåÂêéÁª≠Â∫èÂàóÂåñÊó†ÈúÄÈáçÂ§ç‰º†ËæìÂÖÉÊï∞ÊçÆÔºå‰ªéËÄåÂáèÂ∞ëÁΩëÁªúÊµÅÈáèÂπ∂Ëá™Âä®ÊîØÊåÅÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ„ÄÇ  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // Ë∑®Â∫èÂàóÂåñÂÖ±‰∫´ÂÖÉÊï∞ÊçÆ // .withMetaContextShare(true) // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"0.11","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª„ÄÇÈÄöËøá ForyBuilder#deserializeNonexistentClass(true) ÂêØÁî®„ÄÇÂΩìÂêØÁî®‰∏îÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÂºÄÂêØÊó∂ÔºåFory ‰ºöÂ∞ÜËØ•Á±ªÂûãÁöÑÊï∞ÊçÆÂ≠òÂÇ®‰∏∫ Map ÁöÑÊÉ∞ÊÄßÂ≠êÁ±ªÔºåÈÅøÂÖçÂèçÂ∫èÂàóÂåñÊó∂Â°´ÂÖÖ Map ÁöÑÈáçÊéíÂºÄÈîÄÔºåÊèêÂçáÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÊï∞ÊçÆË¢´ÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™ËøõÁ®ã‰∏îËØ•Á±ªÂ≠òÂú®ÔºåÂàôÂèØÊó†ÊçüËøòÂéü‰∏∫ÂéüÁ±ªÂûãÂØπË±°„ÄÇ  Ëã•Êú™ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºåÂàôÊñ∞Á±ªÊï∞ÊçÆ‰ºöË¢´Ë∑≥ËøáÔºåËøîÂõû NonexistentSkipClass Âç†‰ΩçÂØπË±°„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"Á±ªÂûãÊò†Â∞ÑÔºàË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ù/Êò†Â∞ÑÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Á±ªÂûãÊò†Â∞ÑË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ùÊò†Â∞Ñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™Á±ªÂûãÁöÑÂØπË±°Ê∑±Êã∑Ë¥ù/Êò†Â∞Ñ‰∏∫Âè¶‰∏Ä‰∏™Á±ªÂûã„ÄÇÊ≥®ÊÑè‰∫ãÈ°πÔºö  ËØ•Êò†Â∞Ñ‰ºöÊâßË°åÊ∑±Êã∑Ë¥ùÔºåÊâÄÊúâÊò†Â∞ÑÂ≠óÊÆµ‰ºöÂÖàÂ∫èÂàóÂåñ‰∏∫‰∫åËøõÂà∂ÔºåÂÜçÂèçÂ∫èÂàóÂåñ‰∏∫ÁõÆÊ†áÁ±ªÂûã„ÄÇÊâÄÊúâÁªìÊûÑ‰ΩìÁ±ªÂûãÂøÖÈ°ªÁî®Áõ∏Âêå ID Ê≥®ÂÜåÔºåÂê¶ÂàôÊó†Ê≥ïÊ≠£Á°ÆÊò†Â∞Ñ„ÄÇÂä°ÂøÖ‰øùËØÅÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÊ≥®ÂÜåÈ°∫Â∫è‰∏ÄËá¥„ÄÇ  Á§∫‰æãÔºö  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"0.11","tagName":"h3"},{"title":"ËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ËøÅÁßª","content":" ","version":"0.11","tagName":"h2"},{"title":"JDK Â∫èÂàóÂåñËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#jdk-Â∫èÂàóÂåñËøÅÁßª","content":" Â¶ÇÊûú‰πãÂâç‰ΩøÁî® JDK Â∫èÂàóÂåñÔºå‰∏îÊó†Ê≥ïÂêåÊó∂ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂíåÊúçÂä°Á´ØÔºàÂ¶ÇÁ∫ø‰∏äÂ∫îÁî®Â∏∏ËßÅÂú∫ÊôØÔºâÔºåFory Êèê‰æõ org.apache.fory.serializer.JavaSerializer.serializedByJDK Â∑•ÂÖ∑ÊñπÊ≥ïÂà§Êñ≠‰∫åËøõÂà∂Êï∞ÊçÆÊòØÂê¶‰∏∫ JDK Â∫èÂàóÂåñÁîüÊàê„ÄÇÂèØÁî®Â¶Ç‰∏ãÊ®°ÂºèÂÆûÁé∞ÂçèËÆÆÂÖºÂÆπÔºåÊîØÊåÅÂºÇÊ≠•ÊªöÂä®ÂçáÁ∫ßÔºö  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"0.11","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ÁâàÊú¨ÂçáÁ∫ß‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#apache-fory-ÁâàÊú¨ÂçáÁ∫ß","content":" ÁõÆÂâç‰ªÖ‰øùËØÅÂ∞èÁâàÊú¨Èó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ‰æãÂ¶ÇÔºåfory v0.11.1 ÂçáÁ∫ßÂà∞ v0.11.2 ÂèØÁõ¥Êé•ÂÖºÂÆπÔºåÂçáÁ∫ßÂà∞ v0.12.0 Âàô‰∏ç‰øùËØÅÂÖºÂÆπ„ÄÇÂ§ßÂ§öÊï∞Âú∫ÊôØÊó†ÈúÄÈ¢ëÁπÅÂçáÁ∫ß‰∏ªÁâàÊú¨ÔºåÂΩìÂâçÁâàÊú¨Â∑≤Ë∂≥Â§üÈ´òÊïàÁ¥ßÂáëÔºåËÄÅÁâàÊú¨‰πü‰ºöÊåÅÁª≠Áª¥Êä§ bugfix„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"ÊïÖÈöúÊéíÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÊïÖÈöúÊéíÊü•","content":" ","version":"0.11","tagName":"h2"},{"title":"Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å","content":" Ëã•Êú™ËÆæÁΩÆ CompatibleMode ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLEÔºåÂá∫Áé∞Â∫èÂàóÂåñÂºÇÂ∏∏ÔºåÂèØËÉΩÊòØÂ∫èÂàóÂåñÁ´ØÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥„ÄÇ  Ê≠§Êó∂ÂèØÁî® ForyBuilder#withClassVersionCheck ÂàõÂª∫ Fory ËøõË°åÊ†°È™åÔºåËã•ÂèçÂ∫èÂàóÂåñÊäõÂá∫ org.apache.fory.exception.ClassNotCompatibleExceptionÔºåËØ¥ÊòéÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂ∫îÊîπÁî® ForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE)„ÄÇ  CompatibleMode.COMPATIBLE ‰ºöÂ∏¶Êù•‰∏ÄÂÆöÊÄßËÉΩÂíå‰ΩìÁßØÂºÄÈîÄÔºåËã•Á±ªÁªìÊûÑÂßãÁªà‰∏ÄËá¥Ôºå‰∏çÂª∫ËÆÆÈªòËÆ§ÂºÄÂêØ„ÄÇ  ","version":"0.11","tagName":"h3"},{"title":"POJO Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#pojo-Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™ POJO Â∫èÂàóÂåñÂêéÂèçÂ∫èÂàóÂåñ‰∏∫‰∏çÂêåÁªìÊûÑÁöÑ POJO„ÄÇÊ≠§Êó∂ÈúÄÂ∞Ü CompatibleMode ËÆæ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLE„ÄÇ  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"0.11","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ API ‰ΩøÁî®ÈîôËØØ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ-api-‰ΩøÁî®ÈîôËØØ","content":" Áî® Fory#serialize Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserialize ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObject„ÄÇÁî® Fory#serializeJavaObject Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObject ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObjectAndClass Êàñ Fory#deserialize„ÄÇÁî® Fory#serializeJavaObjectAndClass Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObjectAndClass ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî®ÂÖ∂‰ªñ API„ÄÇ ","version":"0.11","tagName":"h3"},{"title":"GraalVM Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/graalvm_guide","content":"","keywords":"","version":"0.11"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#graalvm-native-image","content":" GraalVM native image can compile java code into native code ahead to build faster, smaller, leaner applications. The native image doesn't have a JIT compiler to compile bytecode into machine code, and doesn't support reflection unless configure reflection file.  Fory runs on GraalVM native image pretty well. Fory generates all serializer code for Fory JIT framework and MethodHandle/LambdaMetafactory at graalvm build time. Then use those generated code for serialization at runtime without any extra cost, the performance is great.  In order to use Fory on graalvm native image, you must create Fory as an static field of a class, and register all classes at the enclosing class initialize time. Then configure native-image.properties underresources/META-INF/native-image/$xxx/native-image.propertie to tell graalvm to init the class at native image build time. For example, here we configure org.apache.fory.graalvm.Example class be init at build time:  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   Another benefit using fory is that you don't have to configure reflection json andserialization json, which is very tedious, cumbersome and inconvenient. When using fory, you just need to invokeorg.apache.fory.Fory.register(Class&lt;?&gt;, boolean) for every type you want to serialize.  Note that Fory asyncCompilationEnabled option will be disabled automatically for graalvm native image since graalvm native image doesn't support JIT at the image run time.  ","version":"0.11","tagName":"h2"},{"title":"Not thread-safe Fory‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#not-thread-safe-fory","content":" Example:  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // register and generate serializer code. fory.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   Then add org.apache.fory.graalvm.Example build time init to native-image.properties configuration:  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"0.11","tagName":"h2"},{"title":"Thread-safe Fory‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#thread-safe-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // register and generate serializer code. f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   Then add org.apache.fory.graalvm.ThreadSafeExample build time init to native-image.properties configuration:  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"0.11","tagName":"h2"},{"title":"Framework Integration‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#framework-integration","content":" For framework developers, if you want to integrate fory for serialization, you can provided a configuration file to let the users to list all the classes they want to serialize, then you can load those classes and invokeorg.apache.fory.Fory.register(Class&lt;?&gt;, boolean) to register those classes in your Fory integration class, and configure that class be initialized at graalvm native image build time.  ","version":"0.11","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#benchmark","content":" Here we give two class benchmarks between Fory and Graalvm Serialization.  When Fory compression is disabled:  Struct: Fory is 46x speed, 43% size compared to JDK.Pojo: Fory is 12x speed, 56% size compared to JDK.  When Fory compression is enabled:  Struct: Fory is 24x speed, 31% size compared to JDK.Pojo: Fory is 12x speed, 48% size compared to JDK.  See [Benchmark.java] for benchmark code.  ","version":"0.11","tagName":"h2"},{"title":"Struct Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#struct-benchmark","content":" Class Fields‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark Results‚Äã  No compression:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   Compress number:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"0.11","tagName":"h3"},{"title":"Pojo Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/0.11/guide/graalvm_guide#pojo-benchmark","content":" Class Fields‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark Results‚Äã  No compression:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   Compress number:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"0.11","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ‰ΩøÁî®","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/start/usage","content":"","keywords":"","version":"0.11"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#java-Â∫èÂàóÂåñ","content":" import java.util.List; import java.util.Arrays; import io.fory.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. Fory fory = Fory.builder().withLanguage(Language.JAVA) // Allow to deserialize objects unknown types, // more flexible but less secure. // .requireClassRegistration(false) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If secure mode enabled, all custom types must be registered. fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.11","tagName":"h2"},{"title":"ScalaÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#scalaÂ∫èÂàóÂåñ","content":" import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } } ## KotlinÂ∫èÂàóÂåñ ```kotlin import org.apache.fory.Fory import org.apache.fory.ThreadSafeFory import org.apache.fory.serializer.kotlin.KotlinSerializers data class Person(val name: String, val id: Long, val github: String) data class Point(val x : Int, val y : Int, val z : Int) fun main(args: Array&lt;String&gt;) { // Ê≥®ÊÑè: ‰∏ãÈù¢ÁöÑForyÂàùÂßãÂåñ‰ª£Á†ÅÂ∫îËØ•Âè™ÊâßË°å‰∏ÄÊ¨°ÔºåËÄå‰∏çÊòØÂú®ÊØèÊ¨°Â∫èÂàóÂåñÂâçÈÉΩËøêË°å val fory: ThreadSafeFory = Fory.builder().requireClassRegistration(true).buildThreadSafeFory() KotlinSerializers.registerSerializers(fory) fory.register(Person::class.java) fory.register(Point::class.java) val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) }   ","version":"0.11","tagName":"h2"},{"title":"Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ","content":" ","version":"0.11","tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#java","content":" import com.google.common.collect.ImmutableMap; import io.fory.*; import java.util.Map; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ImmutableMap.of(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;io.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); ; } }   ","version":"0.11","tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#python","content":" from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_class(SomeClass, &quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   ","version":"0.11","tagName":"h3"},{"title":"Golangs‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#golangs","content":" package main import ( &quot;fmt&quot; forygo &quot;github.com/apache/fory/go/fory&quot; ) func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   ","version":"0.11","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#javascript","content":" import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   ","version":"0.11","tagName":"h3"},{"title":"Rust‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/0.11/docs/start/usage#rust","content":" use fory::{from_buffer, to_buffer, Fory}; #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Animal { name: String, category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.bar&quot;)] struct Person { name: String, age: u32, pets: Vec&lt;Animal&gt;, } fn main() { let penson = Person { name: &quot;hello&quot;.to_string(), age: 12, pets: vec![ Animal { name: &quot;world1&quot;.to_string(), category: &quot;cat&quot;.to_string(), }, Animal { name: &quot;world2&quot;.to_string(), category: &quot;dog&quot;.to_string(), }, ], }; let bin = to_buffer(&amp;penson); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(obj, penson); }  ","version":"0.11","tagName":"h3"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"0.11"},{"title":"Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide#Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ","version":"0.11","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã","content":" Apache Fory‚Ñ¢ ÂèØ‰ª•Ëá™Âä®Â∫èÂàóÂåñÁºñÁ®ãËØ≠Ë®ÄÁöÑÂ∏∏ËßÅÊï∞ÊçÆÁ±ªÂûãÔºöprimitive numeric types, string, binary, array, list, map Á≠â„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"0.11","tagName":"h3"},{"title":"Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã","content":" Â∫èÂàóÂåñÁî®Êà∑ÂÆö‰πâÁöÑÁ±ªÂûãÈúÄË¶Å‰ΩøÁî®Ê≥®ÂÜå API Ê≥®ÂÜåËá™ÂÆö‰πâÁ±ªÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåËØ≠Ë®Ä‰∏≠Âª∫Á´ãÁ±ªÂûã‰πãÈó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"0.11","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®","content":" ÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÂèØ‰ª•Ë¢´Ëá™Âä®Â∫èÂàóÂåñÔºå‰∏ç‰ºö‰∫ßÁîüÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØ„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), bar: Type.object(&quot;example.foo&quot;), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data = { foo: &quot;hello fory&quot;, }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   Rust  Áî±‰∫é Rust ÊâÄÊúâÊùÉÈôêÂà∂ÔºåÊöÇ‰∏çÊîØÊåÅÂºïÁî®Á±ªÂûãÁöÑÂ∫èÂàóÂåñ  ","version":"0.11","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/0.11/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializers.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"0.11","tagName":"h3"},{"title":"Row Format Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/row_format_guide","content":"","keywords":"","version":"0.11"},{"title":"Java‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // Can be zero-copy read by python BinaryRow binaryRow = encoder.toRow(foo); // can be data from python Foo newFoo = encoder.fromRow(binaryRow); // zero-copy read List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // zero-copy read List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // zero-copy read 11th element of `readList&lt;Bar&gt; f4` BinaryRow barStruct = binaryArray4.getStruct(10); // zero-copy read 6th of f2 of 11th element of `readList&lt;Bar&gt; f4` barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // deserialize part of data. Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"0.11","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"0.11","tagName":"h2"},{"title":"Apache Arrow Support‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#apache-arrow-support","content":" Fory Format also supports automatic conversion from/to Arrow Table/RecordBatch.  Java:  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"0.11","tagName":"h3"},{"title":"Support for Interface and Extension Types‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#support-for-interface-and-extension-types","content":" Fury now supports row format mapping for Java interface types and subclassed (extends) types, enabling more dynamic and flexible data schemas.  These enhancements were introduced in #2243, #2250, and #2256.  ","version":"0.11","tagName":"h2"},{"title":"Example: Interface Mapping with RowEncoder‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#example-interface-mapping-with-rowencoder","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // Encode and decode using RowEncoder with interface type RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"0.11","tagName":"h3"},{"title":"Example: Extension Type with RowEncoder‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/0.11/guide/row_format_guide#example-extension-type-with-rowencoder","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // Encode and decode using RowEncoder with parent class type RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python:  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"0.11","tagName":"h3"},{"title":"Scala Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/scala_guide","content":"","keywords":"","version":"0.11"},{"title":"Install‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#install","content":" To add a dependency on Apache Fory‚Ñ¢scala for scala 2 with sbt, use the following:  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.11.2&quot;   To add a dependency on Apache Fory‚Ñ¢scala for scala 3 with sbt, use the following:  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.11.2&quot;   ","version":"0.11","tagName":"h2"},{"title":"Quict Start‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#quict-start","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"0.11","tagName":"h2"},{"title":"Fory creation‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#fory-creation","content":" When using fory for scala serialization, you should create fory at least with following options:  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory)   Depending on the object types you serialize, you may need to register some scala internal types:  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   If you want to avoid such registration, you can disable class registration by ForyBuilder#requireClassRegistration(false). Note that this option allow to deserialize objects unknown types, more flexible but may be insecure if the classes contains malicious code.  And circular references are common in scala, Reference tracking should be enabled by ForyBuilder#withRefTracking(true). If you don't enable reference tracking, StackOverflowError may happen for some scala versions when serializing scala Enumeration.  Note that fory instance should be shared between multiple serialization, the creation of fory instance is not cheap.  If you use shared fory instance across multiple threads, you should create ThreadSafeFory instead by ForyBuilder#buildThreadSafeFory() instead.  ","version":"0.11","tagName":"h2"},{"title":"Serialize case object‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-case-object","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"0.11","tagName":"h2"},{"title":"Serialize pojo‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"0.11","tagName":"h2"},{"title":"Serialize object singleton‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-object-singleton","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"0.11","tagName":"h2"},{"title":"Serialize collection‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-collection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"0.11","tagName":"h2"},{"title":"Serialize Tuple‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-tuple","content":" val tuple = Tuple2(100, 10000L) println(fory.deserialize(fory.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fory.deserialize(fory.serialize(tuple)))   ","version":"0.11","tagName":"h2"},{"title":"Serialize Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-enum","content":" ","version":"0.11","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"0.11","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"0.11","tagName":"h3"},{"title":"Serialize Option‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/0.11/guide/scala_guide#serialize-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))  ","version":"0.11","tagName":"h2"},{"title":"Type Mapping of Xlang Serialization","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/xlang_type_mapping","content":"","keywords":"","version":"0.11"},{"title":"Type Mapping‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/0.11/guide/xlang_type_mapping#type-mapping","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"0.11","tagName":"h2"},{"title":"Type info(not implemented currently)‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/0.11/guide/xlang_type_mapping#type-infonot-implemented-currently","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages.  If the user notices that one type on a language corresponds to multiple types in Fory type systems, for example, longin java has type int64/varint64/sliint64, it means the language lacks some types, and the user must provide extra type info when using Fory.  ","version":"0.11","tagName":"h2"},{"title":"Type annotation‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/0.11/guide/xlang_type_mapping#type-annotation","content":" If the type is a field of another class, users can provide meta hints for fields of a type, or for the whole type. Such information can be provided in other languages too:  java: use annotation.cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  Here is en example:  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"0.11","tagName":"h2"},{"title":"Type wrapper‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/0.11/guide/xlang_type_mapping#type-wrapper","content":" If the type is not a field of a class, the user must wrap this type with a Fory type to pass the extra type info.  For example, suppose Fory Java provide a VarInt64 type, when a user invoke fory.serialize(long_value), he need to invoke like fory.serialize(new VarInt64(long_value)). ","version":"0.11","tagName":"h2"},{"title":"Row Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/specification/fory_row_format_spec","content":"","keywords":"","version":"0.11"},{"title":"Row Format‚Äã","type":1,"pageTitle":"Row Format","url":"/zh-CN/docs/0.11/specification/fory_row_format_spec#row-format","content":" Coming soon ","version":"0.11","tagName":"h2"},{"title":"Java Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec","content":"","keywords":"","version":"0.11"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#spec-overview","content":" Fory Java Serialization is an automatic object serialization framework that supports reference and polymorphism. Fory will convert an object from/to fory java serialization binary format. Fory has two core concepts for java serialization:  Fory Java Binary formatFramework to convert object to/from Fory Java Binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fory flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  Here is the overall format:  | fory header | object ref meta | object class meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.11","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | optional 4 bytes | +---------------+-------+-------+--------+-------+------------------------------------+ | reserved bits | oob | xlang | endian | null | unsigned int for meta start offset |   null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.11","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a class), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  ","version":"0.11","tagName":"h2"},{"title":"Class Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#class-meta","content":" Fory supports to register class by an optional id, the registration can be used for security check and class identification. If a class is registered, it will have a user-provided or an auto-growing unsigned int i.e. class_id.  Depending on whether meta share mode and registration is enabled for current class, Fory will write class meta differently.  ","version":"0.11","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#schema-consistent","content":" If schema consistent mode is enabled globally or enabled for current class, class meta will be written as follows:  If class is registered, it will be written as a fory unsigned varint: class_id &lt;&lt; 1.If class is not registered: If class is not an array, fory will write one byte 0bxxxxxxx1 first, then write class name. The first little bit is 1, which is different from first bit 0 of encoded class id. Fory can use this information to determine whether to read class by class id for deserialization. If class is not registered and class is an array, fory will write one byte dimensions &lt;&lt; 1 | 1 first, then write component class subsequently. This can reduce array class name cost if component class is or will be serialized.Class will be written as two enumerated fory unsigned by default: package name and class name. If meta share mode is enabled, class will be written as an unsigned varint which points to index in MetaContext.  ","version":"0.11","tagName":"h3"},{"title":"Schema evolution‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#schema-evolution","content":" If schema evolution mode is enabled globally or enabled for current class, class meta will be written as follows:  If meta share mode is not enabled, class meta will be written as schema consistent mode. Additionally, field meta such as field type and name will be written with the field value using a key-value like layout.If meta share mode is enabled, class meta will be written as a meta-share encoded binary if class hasn't been written before, otherwise an unsigned varint id which references to previous written class meta will be written.  ","version":"0.11","tagName":"h3"},{"title":"Meta share‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#meta-share","content":" This mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure doesn't lost shared meta. Meta streamline will be supported in the future for enclosed meta sharing which doesn't cross multiple serializations of different objects.  For Schema consistent mode, class will be encoded as an enumerated string by full class name. Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes global meta header | 1~2 bytes | variable bytes | variable bytes | variable bytes | +-------------------------------+-------------|--------------------+-------------------+----------------+ | 50 bits hash + 14 bits header | type header | current class meta | parent class meta | ... |   Class meta are encoded from parent class to leaf class, only class with serializable fields will be encoded.  ","version":"0.11","tagName":"h2"},{"title":"Global meta header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#global-meta-header","content":" Meta header is a 64 bits number value encoded in little endian order.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  ","version":"0.11","tagName":"h3"},{"title":"Type header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#type-header","content":" Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current class doesn't has parent class, or parent class doesn't have fields to serialize, or we're in a context which serialize fields of current class only(ObjectStreamSerializer#SlotInfo is an example), num classes will be 1.Other 4 bits are preserved to future extensions.If num classes are greater than or equal to 0b1111, write num_classes - 0b1111 as varuint next.  ","version":"0.11","tagName":"h3"},{"title":"Single layer class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#single-layer-class-meta","content":" | unsigned varint | meta string | meta string | field info: variable bytes | variable bytes | ... | +----------------------------+-----------------------+---------------------+-------------------------------+-----------------+-----+ | num fields + register flag | header + package name | header + class name | header + type id + field name | next field info | ... |   num fields: encode num fields &lt;&lt; 1 | register flag(1 when class registered) as unsigned varint. If class is registered, then an unsigned varint class id will be written next, package and class name will be omitted.If current class is schema consistent, then num field will be 0 to flag it.If current class isn't schema consistent, then num field will be the number of compatible fields. For example, users can use tag id to mark some field as compatible field in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields. Package name encoding(omitted when class is registered): encoding algorithm: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIALHeader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Class name encoding(omitted when class is registered): encoding algorithm: UTF8/LOWER_UPPER_DIGIT_SPECIAL/FIRST_TO_LOWER_SPECIAL/ALL_TO_LOWER_SPECIALheader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Field info: header(8 bits): 3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag. Users can use annotation to provide those info. 2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be 11. size of field name: The 3 bits size: 0~7 will be used to indicate length 1~7, the value 6 the size read more bytes, the encoding will encode size - 7 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.polymorphism: when set to 1, the actual type of field will be the declared field type even the type if not final. type id: For registered type-consistent classes, it will be the registered class id.Otherwise it will be encoded as OBJECT_ID if it isn't final and FINAL_OBJECT_ID if it's final. The meta for such types is written separately instead of inlining here is to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too. Field name: If type id is set, type id will be used instead. Otherwise meta string encoding length and data will be written instead.  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory field comparator. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"0.11","tagName":"h3"},{"title":"Other layers class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#other-layers-class-meta","content":" Same encoding algorithm as the previous layer except:  header + package name: Header: If package name has been written before: varint index + sharing flag(set) will be writtenIf package name hasn't been written before: If meta string encoding is LOWER_SPECIAL and the length of encoded string &lt;= 64, then header will be6 bits size + encoding flag(set) + sharing flag(unset).Otherwise, header will be 3 bits unset + 3 bits encoding flags + encoding flag(unset) + sharing flag(unset)  ","version":"0.11","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as class name and field names.  ","version":"0.11","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._$|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z[c1,c2] except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z[c1,c2]\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z[c1,c2]\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  For package name encoding, c1,c2 should be ._; For field/type name encoding, c1,c2 should be _$;Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.11","tagName":"h3"},{"title":"Shared meta string‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#shared-meta-string","content":" The shared meta string format consists of header and encoded string binary. Header of encoded string binary will be inlined in shared meta header.  Header is written using little endian order, Fory can read this flag first to determine how to deserialize the data.  Write by data‚Äã  If string hasn't been written before, the data will be written as follows:  | unsigned varint: string binary size + 1 bit: not written before | 56 bits: unique hash | 3 bits encoding flags + string binary |   If string binary size is less than 16 bytes, the hash will be omitted to save spaces. Unique hash can be omitted too if caller pass a flag to disable it. In such cases, the format will be:  | unsigned varint: string binary size + 1 bit: not written before | 3 bits encoding flags + string binary |   Write by ref‚Äã  If string has been written before, the data will be written as follows:  | unsigned varint: written string id + 1 bit: written before |   ","version":"0.11","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#value-format","content":" ","version":"0.11","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#basic-types","content":" Bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  Byte‚Äã  size: 1 byteformat: write as pure byte.  Short‚Äã  size: 2 bytebyte order: little endian order  Char‚Äã  size: 2 bytebyte order: little endian order  Unsigned int‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  Signed int‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encoding it as an unsigned int.  Unsigned long‚Äã  size: 1~9 byteFory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  Signed long‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  Float‚Äã  size: 4 byteformat: convert float to 4 bytes int by Float.floatToRawIntBits, then write as binary by little endian order.  Double‚Äã  size: 8 byteformat: convert double to 8 bytes int by Double.doubleToRawLongBits, then write as binary by little endian order.  ","version":"0.11","tagName":"h3"},{"title":"String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#string","content":" Format:  | header: size &lt;&lt; 2 | 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned var long. The little 2 bits is used for encoding: 0 for latin, 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. But currently fory doesn't enable utf-8 encoding by default for java. Cross-language string serialization of fory uses utf-8 by default.  ","version":"0.11","tagName":"h3"},{"title":"Collection‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#collection","content":" All collection serializers must extend AbstractCollectionSerializer.  Format:  length(unsigned varint) | collection header | elements header | elements data   Collection header‚Äã  For ArrayList/LinkedArrayList/HashSet/LinkedHashSet, this will be empty.For TreeSet, this will be ComparatorFor subclass of ArrayList, this may be extra object field info.  Elements header‚Äã  In most cases, all collection elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the collection has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the collection element types are not declared type, use the 3rd bit 0b100 of the header to flag it.If the collection element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom class field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element class info.  CollectionSerializer#write/read can be taken as an example.  ","version":"0.11","tagName":"h3"},{"title":"Array‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#array","content":" Primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types.  Object array‚Äã  Object array is serialized using the collection format. Object component type will be taken as collection element generic type.  ","version":"0.11","tagName":"h3"},{"title":"Map‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#map","content":" All Map serializers must extend AbstractMapSerializer.  Format:  | length(unsigned varint) | map header | key value pairs data |   Map header‚Äã  For HashMap/LinkedHashMap, this will be empty.For TreeMap, this will be ComparatorFor other Map, this may be extra object field info.  Map Key-Value data‚Äã  Map iteration is too expensive, Fory won't compute the header like for collection before since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize map chunk by chunk, every chunk has 127 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  ","version":"0.11","tagName":"h3"},{"title":"Enum‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.11","tagName":"h3"},{"title":"Object‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#object","content":" Object means object of pojo/struct/bean/record type. Object will be serialized by writing its fields data in fory order.  Depending on schema compatibility, objects will have different formats.  Field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.boxed primitive fields: same order as primitive fieldsfinal fields: same type together, then sorted by field name lexicographically.collection fields: same order as final fieldsmap fields: same order as final fieldsother fields: same order as final fields  Schema consistent‚Äã  Object fields will be serialized one by one using following format:  Primitive field value: | var bytes | +----------------+ | value data | +----------------+ Boxed field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | class meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | class meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For this object type itself, schema consistent mode will write class by id/name, but schema evolution mode will write class field names, types and other meta too, see Class meta.Class meta of final custom type needs to be written too, because peers may not have this class defined.  ","version":"0.11","tagName":"h3"},{"title":"Class‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#class","content":" Class will be serialized using class meta format.  ","version":"0.11","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_java_serialization_spec#implementation-guidelines","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches. ","version":"0.11","tagName":"h2"},{"title":"Xlang Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec","content":"","keywords":"","version":"0.11"},{"title":"Cross-language Serialization Specification‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#cross-language-serialization-specification","content":" Format Version History: Version 0.1 - serialization spec formalized  Fory xlang serialization is an automatic object serialization framework that supports reference and polymorphism. Fory will convert an object from/to fory xlang serialization binary format. Fory has two core concepts for xlang serialization:  Fory xlang binary formatFramework implemented in different languages to convert object to/from Fory xlang binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fory flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  ","version":"0.11","tagName":"h2"},{"title":"Type Systems‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type-systems","content":" ","version":"0.11","tagName":"h2"},{"title":"Data Types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#data-types","content":" bool: a boolean value (true or false).int8: a 8-bit signed integer.int16: a 16-bit signed integer.int32: a 32-bit signed integer.var_int32: a 32-bit signed integer which use fory var_int32 encoding.int64: a 64-bit signed integer.var_int64: a 64-bit signed integer which use fory PVL encoding.sli_int64: a 64-bit signed integer which use fory SLI encoding.float16: a 16-bit floating point number.float32: a 32-bit floating point number.float64: a 64-bit floating point number including NaN and Infinity.string: a text string encoded using Latin1/UTF16/UTF-8 encoding.enum: a data type consisting of a set of named values. Rust enum with non-predefined field values are not supported as an enum.named_enum: an enum whose value will be serialized as the registered name.struct: a morphic(final) type serialized by Fory Struct serializer. i.e. it doesn't have subclasses. Suppose we're deserializing List&lt;SomeClass&gt;, we can save dynamic serializer dispatch since SomeClass is morphic(final).compatible_struct: a morphic(final) type serialized by Fory compatible Struct serializer.named_struct: a struct whose type mapping will be encoded as a name.named_compatible_struct: a compatible_struct whose type mapping will be encoded as a name.ext: a type which will be serialized by a customized serializer.named_ext: an ext type whose type mapping will be encoded as a name.list: a sequence of objects.set: an unordered set of unique elements.map: a map of key-value pairs. Mutable types such as list/map/set/array/tensor/arrow are not allowed as key of map.duration: an absolute length of time, independent of any calendar/timezone, as a count of nanoseconds.timestamp: a point in time, independent of any calendar/timezone, as a count of nanoseconds. The count is relative to an epoch at UTC midnight on January 1, 1970.local_date: a naive date without timezone. The count is days relative to an epoch at UTC midnight on Jan 1, 1970.decimal: exact decimal value represented as an integer value in two's complement.binary: an variable-length array of bytes.array: only allow 1d numeric components. Other arrays will be taken as List. The implementation should support the interoperability between array and list. bool_array: one dimensional int16 array.int8_array: one dimensional int8 array.int16_array: one dimensional int16 array.int32_array: one dimensional int32 array.int64_array: one dimensional int64 array.float16_array: one dimensional half_float_16 array.float32_array: one dimensional float32 array.float64_array: one dimensional float64 array. tensor: multidimensional array which every sub-array have same size and type.arrow record batch: an arrow record batch object.arrow table: an arrow table object.  Note:  Unsigned int/long are not added here, since not every language support those types.  ","version":"0.11","tagName":"h3"},{"title":"Polymorphisms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#polymorphisms","content":" For polymorphism, if one non-final class is registered, and only one subclass is registered, then we can take all elements in List/Map have same type, thus reduce runtime check cost.  Collection/Array polymorphism are not fully supported, since some languages such as golang have only one collection type. If users want to get exactly the type he passed, he must pass that type when deserializing or annotate that type to the field of struct.  ","version":"0.11","tagName":"h3"},{"title":"Type disambiguation‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type-disambiguation","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages. When deserializing, Fory use the target data structure type and the data type in the data jointly to determine how to deserialize and populate the target data structure. For example:  class Foo { int[] intArray; Object[] objects; List&lt;Object&gt; objectList; } class Foo2 { int[] intArray; List&lt;Object&gt; objects; List&lt;Object&gt; objectList; }   intArray has an int32_array type. But both objects and objectList fields in the serialize data have list data type. When deserializing, the implementation will create an Object array for objects, but create a ArrayListfor objectList to populate its elements. And the serialized data of Foo can be deserialized into Foo2 too.  Users can also provide meta hints for fields of a type, or the type whole. Here is an example in java which use annotation to provide such information.  @ForyObject(fieldsNullable = false, trackingRef = false) class Foo { @ForyField(trackingRef = false) int[] intArray; @ForyField(polymorphic = true) Object object; @ForyField(tagId = 1, nullable = true) List&lt;Object&gt; objectList; }   Such information can be provided in other languages too:  cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  ","version":"0.11","tagName":"h3"},{"title":"Type ID‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type-id","content":" All internal data types are expressed using an ID in range 0~64. Users can use 0~4096 for representing their types.  ","version":"0.11","tagName":"h3"},{"title":"Type mapping‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type-mapping","content":" See Type mapping  ","version":"0.11","tagName":"h3"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#spec-overview","content":" Here is the overall format:  | fory header | object ref meta | object type meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.11","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 2 bytes | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | 1 byte | optional 4 bytes | +--------------+---------------+-------+-------+--------+-------+------------+------------------------------------+ | magic number | reserved bits | oob | xlang | endian | null | language | unsigned int for meta start offset |   magic number: used to identify fory serialization protocol, current version use 0x62d4.null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.language: the language when serializing objects, such as JAVA, PYTHON, GO, etc. Fory can use this flag to determine whether spend more time on serialization to make the deserialization faster for dynamic languages.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.11","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a type), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  For languages which doesn't support reference such as rust, reference tracking must be disabled for correct deserialization by fory rust implementation.  For languages whose object values are not null by default:  In rust, Fory takes Option:None as a null valueIn c++, Fory takes std::nullopt as a null valueIn golang, Fory takes null interface/pointer as a null value  If one want to deserialize in languages like Java/Python/JavaScript, he should mark the type with all fields not-null by default, or using schema-evolution mode to carry the not-null fields info in the data.  ","version":"0.11","tagName":"h2"},{"title":"Type Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type-meta","content":" For every type to be serialized, it have a type id to indicate its type.  basic types: the type idenum: Type.ENUM + registered idType.NAMED_ENUM + registered namespace+typename list: Type.Listset: Type.SETmap: Type.MAPext: Type.EXT + registered idType.NAMED_EXT + registered namespace+typename struct: Type.STRUCT + struct metaType.NAMED_STRUCT + struct meta  Every type must be registered with an ID or name first. The registration can be used for security check and type identification.  Struct is a special type, depending whether schema compatibility is enabled, Fory will write struct meta differently.  ","version":"0.11","tagName":"h2"},{"title":"Struct Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#struct-schema-consistent","content":" If schema consistent mode is enabled globally when creating fory, type meta will be written as a fory unsigned varint of type_id. Schema evolution related meta will be ignored.If schema evolution mode is enabled globally when creating fory, and current class is configured to use schema consistent mode like struct vs table in flatbuffers: Type meta will be add to captured_type_defs: captured_type_defs[type def stub] = map size ahead when registering type.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.  ","version":"0.11","tagName":"h3"},{"title":"Struct Schema evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#struct-schema-evolution","content":" If schema evolution mode is enabled globally when creating fory, and enabled for current type, type meta will be written using one of the following mode. Which mode to use is configured when creating fory.  Normal mode(meta share not enabled): If type meta hasn't been written before, add type defto captured_type_defs: captured_type_defs[type def] = map size.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.After finished the serialization of the object graph, fory will start to write captured_type_defs: Firstly, set current to meta start offset of fory header Then write captured_type_defs one by one: buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs)) for type_meta in writting_type_defs: if not type_meta.is_stub(): type_meta.write_type_def(buffer) writing_type_defs = copy(schema_consistent_type_def_stubs) Meta share mode: the writing steps are same as the normal mode, but captured_type_defs will be shared across multiple serializations of different objects. For example, suppose we have a batch to serialize: captured_type_defs = {} stream = ... # add `Type1` to `captured_type_defs` and write `Type1` fory.serialize(stream, [Type1()]) # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before. fory.serialize(stream, [Type1(), Type2()]) # `Type1` and `Type2` are written before, no need to write meta. fory.serialize(stream, [Type1(), Type2()]) Streaming mode(streaming mode doesn't support meta share): If type meta hasn't been written before, the data will be written as: | unsigned varint: 0b11111111 | type def | If type meta has been written before, the data will be written as: | unsigned varint: written index &lt;&lt; 1 | written index is the id in captured_type_defs. With this mode, meta start offset can be omitted.  The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure in meta share mode doesn't lost shared meta.  Type Def‚Äã  Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | +----------------------+--------------------+-------------------+ | global binary header | meta header | fields meta |   For languages which support inheritance, if parent class and subclass has fields with same name, using field in subclass.  Global binary header‚Äã  50 bits hash + 1bit compress flag + write fields meta + 12 bits meta size. Right is the lower bits.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  Meta header‚Äã  Meta header is a 8 bits number value.  Lowest 5 digits 0b00000~0b11110 are used to record num fields. 0b11111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. Note that num_fields is the number of compatible fields. Users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields.The 6th bit: 0 for registered by id, 1 for registered by name.Remaining 2 bits are reserved for future extension.  Fields meta‚Äã  Format:  | field info: variable bytes | variable bytes | ... | +---------------------------------+-----------------+-----+ | header + type info + field name | next field info | ... |   Field Header‚Äã  Field Header is 8 bits, annotation can be used to provide more specific info. If annotation not exists, fory will infer those info automatically.  The format for field header is:  2 bits field name encoding + 4 bits size + nullability flag + ref tracking flag   Detailed spec:  2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, field name will be written by an unsigned varint tag id, and 2 bits encoding will be 11. size of field name: The 4 bits size: 0~14 will be used to indicate length 1~15, the value 15 indicates to read more bytes, the encoding will encode size - 15 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.  Field Type Info‚Äã  Field type info is written as unsigned int8. Detailed id spec is:  For struct registered by id, it will be Type.STRUCT.For struct registered by name, it will be Type.NAMED_STRUCT.For enum registered by id, it will be Type.ENUM.For enum registered by name, it will be Type.NAMED_ENUM.For ext type registered by id, it will be Type.EXT.For ext type registered by name, it will be Type.NAMED_EXT.For list/set type, it will be written as Type.LIST/SET, then write element type recursively.For 1D primitive array type, it will be written as Type.XXX_ARRAY.For multi-dimensional primitive array type with same size on each dim, it will be written as Type.TENSOR.For other array type, it will be written as Type.LIST, then write element type recursively.For map type, it will be written as Type.MAP, then write key and value type recursively.For other types supported by fory directly, it will be fory type id for that type.For other types not determined at compile time, write Type.UNKNOWN instead. For such types, actual type will be written when serializing such field values.  Polymorphism spec:  struct/named_struct/ext/named_ext are taken as polymorphic, the meta for those types are written separately instead of inlining here to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too.enum is taken as morphic, if deserialization doesn't have this field, or the type is not enum, enum value will be skipped.list/map/set are taken as morphic, when serializing values of those type, the concrete types won't be written again.Other types that fory supported are taken as morphic too.  List/Set/Map nested type spec:  list: | list type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |set: | set type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |map: | set type id | key type info | value type info | Key type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |Value type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |  Field Name‚Äã  If tag id is set, tag id will be used instead. Otherwise meta string of field name will be written instead.  Field order‚Äã  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory fields sort algorithms. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"0.11","tagName":"h3"},{"title":"Extended Type Meta with Inheritance support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#extended-type-meta-with-inheritance-support","content":" If one want to support inheritance for struct, one can implement following spec.  ","version":"0.11","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#schema-consistent","content":" Fields are serialized from parent type to leaf type. Fields are sorted using fory struct fields sort algorithms.  ","version":"0.11","tagName":"h3"},{"title":"Schema Evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#schema-evolution","content":" Meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | variable bytes | variable bytes | +----------------------+----------------+----------------+--------------------+--------------------+ | global binary header | meta header | fields meta | parent meta header | parent fields meta |   Meta header‚Äã  Meta header is a 64 bits number value encoded in little endian order.  Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current type doesn't has parent type, or parent type doesn't have fields to serialize, or we're in a context which serialize fields of current type only, num classes will be 1.The 5th bit is used to indicate whether this type needs schema evolution.Other 56 bits are used to store the unique hash of flags + all layers type meta.  Single layer type meta‚Äã  | unsigned varint | var uint | field info: variable bytes | variable bytes | ... | +-----------------+----------+-------------------------------+-----------------+-----+ | num_fields | type id | header + type id + field name | next field info | ... |   Other layers type meta‚Äã  Same encoding algorithm as the previous layer.  ","version":"0.11","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as field names.  ","version":"0.11","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.11","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#value-format","content":" ","version":"0.11","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#basic-types","content":" bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  int8‚Äã  size: 1 byteformat: write as pure byte.  int16‚Äã  size: 2 bytebyte order: raw bytes of little endian order  unsigned int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  unsigned varint32‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  signed int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  signed varint32‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encode it as an unsigned varint.  unsigned int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  unsigned varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [0, 2147483647], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  signed int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  signed varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  float32‚Äã  size: 4 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;single format&quot; bit layout, preserving Not-a-Number (NaN) values, then write as binary by little endian order.  float64‚Äã  size: 8 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;double format&quot; bit layout, preserving Not-a-Number (NaN) values. then write as binary by little endian order.  ","version":"0.11","tagName":"h3"},{"title":"string‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#string","content":" Format:  | unsigned varint64: size &lt;&lt; 2 `bitor` 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned varint64. The little 2 bits is used for encoding: 0 for latin1(ISO-8859-1), 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. Cross-language string serialization of fory uses utf-8 by default.  ","version":"0.11","tagName":"h3"},{"title":"list‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#list","content":" Format:  | unsigned varint64: length | 1 byte elements header | elements data |   elements header‚Äã  In most cases, all elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the elements have null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the element types are not the declared type, use the 3rd bit 0b100 of the header to flag it.If the element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom type field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element type info.  fory = ... buffer = ... elems = ... if element_type_is_same: if not is_declared_type: fory.write_type(buffer, elem_type) elem_serializer = get_serializer(...) if track_ref: for elem in elems: if not ref_resolver.write_ref_or_null(buffer, elem): elem_serializer.write(buffer, elem) elif has_null: for elem in elems: if elem is None: buffer.write_byte(null_flag) else: buffer.write_byte(not_null_flag) elem_serializer.write(buffer, elem) else: for elem in elems: elem_serializer.write(buffer, elem) else: if track_ref: for elem in elems: fory.write_ref(buffer, elem) elif has_null: for elem in elems: fory.write_nullable(buffer, elem) else: for elem in elems: fory.write_value(buffer, elem)   CollectionSerializer#writeElementscan be taken as an example.  ","version":"0.11","tagName":"h3"},{"title":"array‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#array","content":" primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types or mark it as list type.  Tensor‚Äã  Tensor is a special primitive multi-dimensional array which all dimensions have same size and type. The serialization format is:  | num_dims(unsigned varint) | shape[0](unsigned varint) | shape[...] | shape[N] | element type | data |   The data is continuous to reduce copy and may zero-copy in some cases.  object array‚Äã  Object array is serialized using the list format. Object component type will be taken as list element generic type.  ","version":"0.11","tagName":"h3"},{"title":"map‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#map","content":" Map uses a chunk by chunk based Format:  | length(unsigned varint) | key value chunk data | ... | key value chunk data |   map key-value chunk data‚Äã  Map iteration is too expensive, Fory won't compute the header like for list since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide the header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize the map chunk by chunk, every chunk has 255 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. For languages such as golang, this can be computed in advance for non-interface types most times. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Why serialize chunk by chunk?‚Äã  When fory will use first key-value pair to predict header optimistically, it can't know how many pairs have same meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at least X bytes to take up a place for later to update the number which has same elements, X is the num_bytes for encoding varint encoding of map size.  And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust, which object are not reference by default.  Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share meta.  The implementation can accumulate read count with map size to decide whether to read more chunks.  ","version":"0.11","tagName":"h3"},{"title":"enum‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.11","tagName":"h3"},{"title":"decimal‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#decimal","content":" Not supported for now.  ","version":"0.11","tagName":"h3"},{"title":"struct‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#struct","content":" Struct means object of class/pojo/struct/bean/record type. Struct will be serialized by writing its fields data in fory order.  Depending on schema compatibility, structs will have different formats.  field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.when same size, sort by type idwhen same size and type id, sort by snake case field nametypes: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64 nullable primitive fields: same order as primitive fieldsmorphic fields: same type together, then sorted by field name lexicographically using snake case style.unknown fields: same sort algorithms as morphic fieldslist fields: same sort algorithms as morphic fieldsset fields: same sort algorithms as morphic fieldsmap fields: same sort algorithms as morphic fields  Field order‚Äã  Fields in a struct are sorted in a ascending order by:  primitive fields first: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64, sorted by type id.nullable primitive fieldsmorphic types except list/set/mapunknown typeslist typesset typesmap types  If two fields have same type, then sort by snake_case styled field name.  schema consistent‚Äã  Object will be written as:  | 4 byte | variable bytes | +---------------+------------------+ | type hash | field values |   Type hash is used to check the type schema consistency across languages. Type hash will be the first 32 bits of 56 bits value of the type meta.  Object fields will be serialized one by one using following format:  not null primitive field value: | var bytes | +----------------+ | value data | +----------------+ nullable primitive field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | type meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | type meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For the object type, schema consistent mode will write type by id only, but schema evolution mode will write type consisting of field names, types and other meta too, see Type meta.Type meta of final custom type needs to be written too, because peers may not have this type defined.  ","version":"0.11","tagName":"h3"},{"title":"Type‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#type","content":" Type will be serialized using type meta format.  ","version":"0.11","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#implementation-guidelines","content":" ","version":"0.11","tagName":"h2"},{"title":"How to reduce memory read/write code‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#how-to-reduce-memory-readwrite-code","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches.  ","version":"0.11","tagName":"h3"},{"title":"Fast deserialization for static languages without runtime codegen support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/0.11/specification/fory_xlang_serialization_spec#fast-deserialization-for-static-languages-without-runtime-codegen-support","content":" For type evolution, the serializer will encode the type meta into the serialized data. The deserializer will compare this meta with class meta in the current process, and use the diff to determine how to deserialize the data.  For java/javascript/python, we can use the diff to generate serializer code at runtime and load it as class/function for deserialization. In this way, the type evolution will be as fast as type consist mode.  For C++/Rust, we can't generate the serializer code at runtime. So we need to generate the code at compile-time using meta programming. But at that time, we don't know the type schema in other processes, so we can't generate the serializer code for such inconsistent types. We may need to generate the code which has a loop and compare field name one by one to decide whether to deserialize and assign the field or skip the field value.  One fast way is that we can optimize the string comparison into jump instructions:  Assume the current type has n fields, and the peer type has n1 fields.Generate an auto growing field id from 0 for every sorted field in the current type at the compile time.Compare the received type meta with current type, generate same id if the field name is same, otherwise generate an auto growing id starting from n, cache this meta at runtime.Iterate the fields of received type meta, use a switch to compare the field id to deserialize data and assign/skip field value. Continuous field id will be optimized into jump in switch block, so it will very fast.  Here is an example, suppose process A has a class Foo with version 1 defined as Foo1, process B has a class Foowith version 2 defined as Foo2:  // class Foo with version 1 class Foo1 { int32_t v1; // id 0 std::string v2; // id 1 }; // class Foo with version 2 class Foo2 { // id 0, but will have id 2 in process A bool v0; // id 1, but will have id 0 in process A int32_t v1; // id 2, but will have id 3 in process A int64_t long_value; // id 3, but will have id 1 in process A std::string v2; // id 4, but will have id 4 in process A std::vector&lt;std::string&gt; list; };   When process A received serialized Foo2 from process B, here is how it deserialize the data:  Foo1 foo1 = ...; const std::vector&lt;fory::FieldInfo&gt; &amp;field_infos = type_meta.field_infos; for (const auto &amp;field_info : field_infos) { switch (field_info.field_id) { case 0: foo1.v1 = buffer.read_varint32(); break; case 1: foo1.v2 = fory.read_string(); break; default: fory.skip_data(field_info); } }  ","version":"0.11","tagName":"h3"},{"title":"Xlang Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/xlang_object_graph_guide","content":"","keywords":"","version":"0.11"},{"title":"Serialize built-in types‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/0.11/guide/xlang_object_graph_guide#serialize-built-in-types","content":" Common types can be serialized automatically: primitive numeric types, string, binary, array, list, map and so on.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"0.11","tagName":"h2"},{"title":"Serialize custom types‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/0.11/guide/xlang_object_graph_guide#serialize-custom-types","content":" Serializing user-defined types needs registering the custom type using the register API to establish the mapping relationship between the type in different languages.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_type(SomeClass1, typename=&quot;example.SomeClass1&quot;) f.register_type(SomeClass2, typename=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"0.11","tagName":"h2"},{"title":"Serialize Shared Reference and Circular Reference‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/0.11/guide/xlang_object_graph_guide#serialize-shared-reference-and-circular-reference","content":" Shared reference and circular reference can be serialized automatically, no duplicate data or recursion error.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from '@apache-fory/fory'; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@apache-fory/hps'; const description = Type.object('example.foo', { foo: Type.string(), bar: Type.object('example.foo'), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data: any = { foo: 'hello fory', }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   JavaScriptReference cannot be implemented because of rust ownership restrictions  ","version":"0.11","tagName":"h2"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/0.11/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"0.11","tagName":"h2"},{"title":"Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/community/","content":"","keywords":"","version":"dev"},{"title":"ÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#ÈÇÆ‰ª∂ÂàóË°®","content":" ÈÇÆ‰ª∂ÂàóË°®\tÊèèËø∞\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÊ¥ªÂä®dev@fory.apache.org\tÂºÄÂèëÁõ∏ÂÖ≥ËÆ®ËÆ∫\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä® commits@fory.apache.org\t‰ªìÂ∫ìÁöÑÊâÄÊúâ commits\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂè™ËØªÁöÑÈÇÆ‰ª∂ÂàóË°®\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä®  Âú®Â∞ùËØïÂèëÈÄÅÈÇÆ‰ª∂‰πãÂâçÔºåËØ∑Á°Æ‰øùËÆ¢ÈòÖ‰∏äËø∞ÁöÑÈÇÆ‰ª∂ÂàóË°®„ÄÇ  Â¶ÇÊûúÊÇ®Ê≤°ÊúâËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®ÔºåÊÇ®ÁöÑÈÇÆ‰ª∂Â∞ÜË¢´ÊãíÁªùÊàñ‰∏ç‰ºöÊî∂Âà∞ÂõûÂ§ç„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®","content":" Ë¶ÅÂèëÈÄÅÈÇÆ‰ª∂Ëá≥ÈÇÆ‰ª∂ÂàóË°®ÔºåËØ∑ÂÖàÈÄöËøá‰ª•‰∏ãÊñπÂºèËÆ¢ÈòÖÔºö  ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ listname-subscribe@fory.apache.orgÔºåÂπ∂Áõ∏Â∫îÊõøÊç¢ listnameÔºõÂõûÂ§çÊÇ®Â∞ÜÊî∂Âà∞ÁöÑÁ°ÆËÆ§ÁîµÂ≠êÈÇÆ‰ª∂Ôºå‰øùÊåÅÈÇÆ‰ª∂‰∏ªÈ¢òË°åÂÆåÊï¥ÔºõÁÑ∂ÂêéÊÇ®Â∞ÜÊî∂Âà∞‰∏ÄÂ∞ÅÊ¨¢ËøéÁöÑÁîµÂ≠êÈÇÆ‰ª∂ÔºåËÆ¢ÈòÖÊàêÂäü„ÄÇ  Âú®ËÆ®ËÆ∫ÁîµÂ≠êÈÇÆ‰ª∂‰∏≠ÁöÑ‰ª£Á†ÅÁâáÊÆµÊó∂ÔºåËØ∑Á°Æ‰øùÔºö  ÊÇ®‰∏çË¶ÅÈìæÊé•Âà∞Â§ñÈÉ®ÊúçÂä°‰∏≠ÁöÑÊñá‰ª∂ÔºåÂõ†‰∏∫Ê≠§Á±ªÊñá‰ª∂ÂèØËÉΩ‰ºöÊõ¥Êîπ„ÄÅË¢´Âà†Èô§ÊàñÈìæÊé•ÂèØËÉΩ‰ºö‰∏≠Êñ≠Ôºå‰ªéËÄå‰ΩøÂ≠òÊ°£ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Á∫øÁ®ãÂèòÂæóÊó†Áî®ÔºõÊÇ®Á≤òË¥¥ÊñáÊú¨ËÄå‰∏çÊòØÊñáÊú¨Â±èÂπïÊà™ÂõæÔºõÁ≤òË¥¥‰ª£Á†ÅÊó∂‰øùÊåÅÊ†ºÂºèÔºå‰ª•‰øùÊåÅ‰ª£Á†ÅÂèØËØªÔºõÊúâË∂≥Â§üÁöÑÂØºÂÖ•ËØ≠Âè•‰ª•ÈÅøÂÖç‰∫ßÁîü‰ª£Á†ÅÊ≠ß‰πâ„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Slack‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#slack","content":" ÊÇ®ÂèØ‰ª•Âä†ÂÖ•Slack ‰∏äÁöÑ Apache Fory‚Ñ¢ Á§æÂå∫„ÄÇ  ËøôÈáåÊúâ‰∏Ä‰∫õÁ§æÂå∫ËßÑÂàôÔºö  ‰øùÊåÅÂ∞äÈáçÂíåÂèãÂñÑÔºõÊâÄÊúâÈáçË¶ÅÁöÑÂÜ≥ÂÆöÂíåÁªìËÆ∫ÈÉΩÂøÖÈ°ªÂèçÊò†Âà∞ÈÇÆ‰ª∂ÂàóË°®‰∏≠„ÄÇ ‚ÄúÂ¶ÇÊûúËøôÊ≤°ÊúâÂú®ÈÇÆ‰ª∂ÂàóË°®‰∏≠ÊúâÁõ∏ÂÖ≥ÁöÑËÆ®ËÆ∫ËÆ∞ÂΩïÔºåÂàô‰ª£Ë°®ÂÆÉ‰∏çÁîüÊïà‚Äù ÔºõThe Apache WayÔºõ‰ΩøÁî® Slack Á∫øÁ®ãÊù•Èò≤Ê≠¢Âπ∂Ë°åÂØπËØùÊ∑πÊ≤°ÂΩìÂâçÁöÑÂØπËØùÈ¢ëÈÅìÔºõËØ∑‰∏çË¶ÅÁõ¥Êé•ÂêëÈÇÆ‰ª∂ÂàóË°®ÂèëÈÄÅ Bug fix„ÄÅIssue ÂàÜÈÖçÂíå Code Review Ê∂àÊÅØ„ÄÇËøô‰∫õÂÜÖÂÆπÂ∫îËØ•Ë¢´Á§æÂå∫Ë¥°ÁåÆËÄÖËá™ÊÑøÂ§ÑÁêÜÂπ∂ÂàÜÈÖç„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Issue Ë∑üË∏™‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#issue-Ë∑üË∏™","content":" Êàë‰ª¨‰ΩøÁî® GitHub Issues Êù•Ë∑üË∏™ÊâÄÊúâ IssuesÔºö  ‰ª£Á†ÅÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory/issuesÁΩëÁ´ôÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory-site/issues  ÊÇ®ÈúÄË¶ÅÊúâ‰∏Ä‰∏™ GitHub Â∏êÂè∑ ÊâçËÉΩÂàõÂª∫ÈóÆÈ¢ò„ÄÇ Â¶ÇÊûúÊÇ®Ê≤°Êúâ GitHub Â∏êÂè∑ÔºåÊÇ®ÂèØ‰ª•ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ dev@fory.apache.org„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Êä•Âëä Bug‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#Êä•Âëä-bug","content":" ÊÇ®Âú®Êä•Âëä Bug ‰πãÂâçÔºåÂ∫îËØ•Ôºö  È™åËØÅËØ• Bug Á°ÆÂÆûÂ≠òÂú®ÔºõÊêúÁ¥¢ Issue List ‰ª•Á°Æ‰øù‰∏çÂ≠òÂú®Áõ∏ÂÖ≥ Bug„ÄÇÂú® Issue List ‰∏≠ÂàõÂª∫ bug Êä•Âëä„ÄÇÂ¶ÇÊûúÂèØËÉΩÁöÑËØùÔºåÊ∑±ÂÖ•Á†îÁ©∂ Apache Fory‚Ñ¢ ÁöÑÊ∫ê‰ª£Á†ÅÔºåÂπ∂ÈíàÂØπÊÇ®Êä•ÂëäÁöÑ Bug Êèê‰∫§Ë°•‰∏ÅÔºåËøôÊúâÂä©‰∫éÂø´ÈÄü‰øÆÂ§ç Bug„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û","content":" Apache Fory‚Ñ¢ ÊòØ Apache ËΩØ‰ª∂Âü∫Èáë‰ºö ÁöÑ‰∏Ä‰∏™È°πÁõÆÔºåÈÅµÂæ™ ASF ÊºèÊ¥ûÂ§ÑÁêÜÊµÅÁ®ã„ÄÇ  Ë¶ÅÊä•ÂëäÊÇ®ÂèëÁé∞ÁöÑÊñ∞ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÔºåËØ∑ÈÅµÂæ™ ASF ÊºèÊ¥ûÊä•ÂëäÊµÅÁ®ãÔºåËØ•ÊµÅÁ®ãËß£Èáä‰∫ÜÂ¶Ç‰ΩïÁßÅ‰∏ãÂêëÁ§æÂå∫Áª¥Êä§ËÄÖÂèëÈÄÅËØ¶ÁªÜÁöÑÊºèÊ¥û‰ø°ÊÅØ„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"New Feature‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#new-feature","content":" Ê¨¢ËøéÊÇ®Â¢ûÂº∫ÂäüËÉΩÊàñÊñ∞ÂäüËÉΩÂª∫ËÆÆ„ÄÇÊèêÊ°àË∂äÂÖ∑‰Ωì„ÄÅË∂äÂêàÁêÜÔºåÊÇ®Âú® Apache Fory‚Ñ¢ Á§æÂå∫ÁöÑÂΩ±ÂìçÂäõÂ∞±Ë∂äÂ§ß„ÄÇÂÆÉÊúâÂèØËÉΩÂú®‰πãÂêéÁâàÊú¨ÂèëÂ∏É„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"È°πÁõÆÊ∫ê‰ª£Á†Å‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/next/community/#È°πÁõÆÊ∫ê‰ª£Á†Å","content":" Apache Fory‚Ñ¢ Core Â≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/foryApache Fory‚Ñ¢ ÁΩëÁ´ôÂ≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/fory-site ","version":"dev","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/community/how_to_join_community","content":"","keywords":"","version":"dev"},{"title":"Apache Fory‚Ñ¢ Ë¥°ÁåÆÊåáÂçó‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#apache-fory-Ë¥°ÁåÆÊåáÂçó","content":" Apache Fory‚Ñ¢ Âõ¢ÈòüÈÄöÂ∏∏Âú® github ‰∏äËøõË°åÂºÄÂèëÂíå issue Áª¥Êä§ÔºåËØ∑ÊâìÂºÄ¬†Github ÁΩëÁ´ôÔºåÁÇπÂáªÂè≥‰∏äËßí¬†Sign up¬†ÊåâÈíÆÔºåÊ≥®ÂÜå‰∏Ä‰∏™Ëá™Â∑±ÁöÑË¥¶Âè∑ÔºåÂºÄÂêØ‰Ω†ÂºÄÊ∫ê‰πãÊóÖÁöÑÁ¨¨‰∏ÄÊ≠•„ÄÇ  Âú®¬†Apache Fory‚Ñ¢ ‰ªìÂ∫ì‰∏≠ÔºåÊàë‰ª¨Êúâ‰∏Ä‰ªΩÈù¢ÂêëÊâÄÊúâÂºÄÊ∫êË¥°ÁåÆËÄÖÁöÑÊåáÂçóÔºå‰ªãÁªç‰∫ÜÊúâÂÖ≥ÁâàÊú¨ÁÆ°ÁêÜ„ÄÅÂàÜÊîØÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåËØ∑Ëä±Âá†ÂàÜÈíüÊó∂Èó¥ÈòÖËØª‰∫ÜËß£‰∏Ä‰∏ã„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™-pull-request","content":" ","version":"dev","tagName":"h2"},{"title":"Step0ÔºöÂÆâË£Ö Git‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step0ÂÆâË£Ö-git","content":" Git ÊòØ‰∏ÄÁßçÁâàÊú¨ÊéßÂà∂Á≥ªÁªüÔºåÁî®‰∫éË∑üË∏™ÂíåÁÆ°ÁêÜËΩØ‰ª∂ÂºÄÂèëÈ°πÁõÆ‰∏≠ÁöÑ‰ª£Á†ÅÂèòÊõ¥„ÄÇÂÆÉÂ∏ÆÂä©ÂºÄÂèëËÄÖËÆ∞ÂΩïÂíåÁÆ°ÁêÜ‰ª£Á†ÅÁöÑÂéÜÂè≤ËÆ∞ÂΩïÔºåÊñπ‰æøÂõ¢ÈòüÂçè‰Ωú„ÄÅ‰ª£Á†ÅÁâàÊú¨ÊéßÂà∂„ÄÅÂêàÂπ∂‰ª£Á†ÅÁ≠âÊìç‰Ωú„ÄÇÈÄöËøá GitÔºåÊÇ®ÂèØ‰ª•ËøΩË∏™ÊØè‰∏™Êñá‰ª∂ÁöÑÊØè‰∏™ÁâàÊú¨ÔºåÂπ∂ËΩªÊùæÂú∞Âú®‰∏çÂêåÁâàÊú¨‰πãÈó¥ËøõË°åÂàáÊç¢ÂíåÊØîËæÉ„ÄÇGit ËøòÊèê‰æõ‰∫ÜÂàÜÊîØÁÆ°ÁêÜÂäüËÉΩÔºå‰ΩøÂæóÂèØ‰ª•ÂêåÊó∂ËøõË°åÂ§ö‰∏™Âπ∂Ë°åÂºÄÂèë‰ªªÂä°„ÄÇ  ËÆøÈóÆ Git ÂÆòÊñπÁΩëÁ´ôÔºöhttps://git-scm.com‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨ÁöÑ Git ÂÆâË£ÖÁ®ãÂ∫è„ÄÇËøêË°å‰∏ãËΩΩÁöÑÂÆâË£ÖÁ®ãÂ∫èÔºåÊåâÁÖßÂÆâË£ÖÂêëÂØºÁöÑÊèêÁ§∫ËøõË°åÂÆâË£Ö„ÄÇÂÆâË£ÖÂÆåÊàêÂêéÔºå‰Ω†ÂèØ‰ª•ÈÄöËøáÂëΩ‰ª§Ë°å‰ΩøÁî®¬†git version¬†ÂëΩ‰ª§Á°ÆËÆ§ÂÆâË£ÖÊàêÂäü„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Step1ÔºöFork È°πÁõÆ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step1fork-È°πÁõÆ","content":" È¶ñÂÖàÈúÄË¶Å fork Ëøô‰∏™È°πÁõÆÔºåËøõÂÖ•Apache Fory‚Ñ¢ È°πÁõÆÈ°µÈù¢ÔºåÁÇπÂáªÂè≥‰∏äËßíÁöÑ Fork ÊåâÈíÆ‰Ω†ÁöÑ github Â∏êÂè∑‰∏≠‰ºöÂá∫Áé∞ xxxx(‰Ω†ÁöÑ github Áî®Êà∑Âêç)/fory Ëøô‰∏™È°πÁõÆÂú®Êú¨Âú∞ÁîµËÑë‰∏ä‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§: ÂæóÂà∞‰∏Ä‰∏™ fory Êñá‰ª∂Â§π  // ssh git clone git@github.com:xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git // https git clone https://github.com/xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git   ","version":"dev","tagName":"h3"},{"title":"Step2ÔºöËé∑ÂèñÈ°πÁõÆ‰ª£Á†Å‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step2Ëé∑ÂèñÈ°πÁõÆ‰ª£Á†Å","content":" ËøõÂÖ• fory Êñá‰ª∂Â§πÔºåÊ∑ªÂä† fory ÁöÑËøúÁ®ãÂú∞ÂùÄ  git remote add upstream https://github.com/apache/fory.git   ","version":"dev","tagName":"h3"},{"title":"Step3ÔºöÂàõÂª∫ÂàÜÊîØ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step3ÂàõÂª∫ÂàÜÊîØ","content":" Â•Ω‰∫ÜÔºåÁé∞Âú®ÂèØ‰ª•ÂºÄÂßãË¥°ÁåÆÊàë‰ª¨ÁöÑ‰ª£Á†Å‰∫Ü„ÄÇfory ÈªòËÆ§ÂàÜÊîØ‰∏∫ main ÂàÜÊîØ„ÄÇÊó†ËÆ∫ÊòØÂäüËÉΩÂºÄÂèë„ÄÅbug ‰øÆÂ§ç„ÄÅÊñáÊ°£ÁºñÂÜôÔºåÈÉΩËØ∑Êñ∞Âª∫Á´ã‰∏Ä‰∏™ÂàÜÊîØÔºåÂÜçÂêàÂπ∂Âà∞ main ÂàÜÊîØ‰∏ä„ÄÇ‰ΩøÁî®‰ª•‰∏ã‰ª£Á†ÅÂàõÂª∫ÂàÜÊîØÔºö  // ÂàõÂª∫ÂäüËÉΩÂºÄÂèëÂàÜÊîØ git checkout -b feat/xxxx // ÂàõÂª∫ÈóÆÈ¢ò‰øÆÂ§çÂºÄÂèëÂàÜÊîØ git checkout -b fix/xxxx // ÂàõÂª∫ÊñáÊ°£„ÄÅdemoÂàÜÊîØ git checkout -b docs/add-java-demo   ÂÅáËÆæÊàë‰ª¨ÂàõÂª∫‰∫ÜÊñáÊ°£‰øÆÊîπÂàÜÊîØ¬†docs/add-java-demo  ÂÅáËÆæÊàë‰ª¨Â∑≤ÁªèÊ∑ªÂä†‰∫Ü‰∏Ä‰∫õ‰ª£Á†ÅÔºåÊèê‰∫§Âà∞‰ª£Á†ÅÂ∫ì git add . git commit -a -m &quot;docs: add java demo and related docs&quot; „ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Step4ÔºöÂêàÂπ∂‰øÆÊîπ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step4ÂêàÂπ∂‰øÆÊîπ","content":" ÂàáÊç¢ÂõûËá™Â∑±ÁöÑÂºÄÂèëÂàÜÊîØ:  git checkout docs/add-java-demo   ÊääÊõ¥Êñ∞‰ª£Á†ÅÊèê‰∫§Âà∞Ëá™Â∑±ÁöÑÂàÜÊîØ‰∏≠:  git push origin docs/add-java-demo   ","version":"dev","tagName":"h3"},{"title":"Step5ÔºöÊèê‰∫§ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#step5Êèê‰∫§-pull-request","content":" ‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑ github ‰ª£Á†Å‰ªìÂ∫ìÈ°µÈù¢ÁÇπÂáª¬†Compare &amp; pull request¬†ÊåâÈíÆ„ÄÇÊàñÈÄöËøá¬†contribute¬†ÊåâÈíÆÂàõÂª∫„ÄÇ  Â°´ÂÜôËøôÊòØ‰ªÄ‰πàÁ±ªÂûãÁöÑ‰øÆÊîπÂ°´ÂÜôÂÖ≥ËÅîÁöÑ issueËã•ÊúâÂ§çÊùÇÂèòÊõ¥ÔºåËØ∑ËØ¥ÊòéËÉåÊôØÂíåËß£ÂÜ≥ÊñπÊ°à  Áõ∏ÂÖ≥‰ø°ÊÅØÂ°´ÂÜôÂÆåÊàêÂêéÔºåÁÇπÂáª Create pull request Êèê‰∫§„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ËΩªÊùæÊ≠•ÂÖ• Apache Fory‚Ñ¢ ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#ËΩªÊùæÊ≠•ÂÖ•-apache-fory-ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ","content":" &quot;good first issue&quot; ÊòØ‰∏Ä‰∏™Âú®ÂºÄÊ∫êÁ§æÂå∫Â∏∏ËßÅÁöÑÊ†áÁ≠æÔºåËøô‰∏™Ê†áÁ≠æÁöÑÁõÆÁöÑÊòØÂ∏ÆÂä©Êñ∞Ë¥°ÁåÆËÄÖÊâæÂà∞ÈÄÇÂêàÂÖ•Èó®ÁöÑÈóÆÈ¢ò„ÄÇ  Apache Fory‚Ñ¢ ÁöÑÂÖ•Èó®ÈóÆÈ¢òÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá¬†issue ÂàóË°®Êü•Áúã„ÄÇ  Â¶ÇÊûú‰Ω†ÂΩìÂâçÊúâÊó∂Èó¥ÂíåÊÑèÊÑøÂèÇ‰∏éÂà∞Á§æÂå∫Ë¥°ÁåÆÔºåÂèØ‰ª•Âú® issue ÈáåÁúã‰∏ÄÁúã¬†good first issueÔºåÈÄâÊã©‰∏Ä‰∏™ÊÑüÂÖ¥Ë∂£„ÄÅÈÄÇÂêàËá™Â∑±ÁöÑËÆ§È¢Ü„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Êã•Êä± Apache Fory‚Ñ¢ Á§æÂå∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/next/community/how_to_join_community#Êã•Êä±-apache-fory-Á§æÂå∫","content":" Âú®‰Ω†‰∏∫ Apache Fory‚Ñ¢ Ë¥°ÁåÆ‰ª£Á†Å‰πã‰ΩôÔºåÊàë‰ª¨ÈºìÂä±‰Ω†ÂèÇ‰∏éÂÖ∂‰ªñËÆ©Á§æÂå∫Êõ¥Âä†ÁπÅËç£ÁöÑ‰∫ãÊÉÖÔºåÊØîÂ¶ÇÔºö  ‰∏∫È°πÁõÆÁöÑÂèëÂ±ï„ÄÅÂäüËÉΩËßÑÂàí Á≠âÊèêÂª∫ËÆÆ„ÄÇÂàõ‰ΩúÊñáÁ´†„ÄÅËßÜÈ¢ëÔºåÂºÄÂäûËÆ≤Â∫ßÊù•ÂÆ£‰º† Apache Fory‚Ñ¢Êí∞ÂÜôÊé®ÂπøËÆ°ÂàíÔºåÂêåÂõ¢Èòü‰∏ÄÂêåÊâßË°å„ÄÇ ","version":"dev","tagName":"h2"},{"title":"ÂºÄÂèëÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/development","content":"","keywords":"","version":"dev"},{"title":"Êú¨Âú∞ÊûÑÂª∫ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#Êú¨Âú∞ÊûÑÂª∫-apache-fory","content":" ‰ªé Github ‰ª£Á†ÅÂ∫ì ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Java‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-java","content":" cd java mvn clean compile -DskipTests   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  java 1.8+maven 3.6.3+  ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Python‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  python 3.6+  ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ C++‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==14.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fory/encoder:fory_encoder   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ GoLang‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  go 1.13+  ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Rust‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-rust","content":" cd rust # build cargo build # run test cargo test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ JavaScript‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/next/docs/guide/development#ÊûÑÂª∫-apache-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  node 14+npm 8+ ","version":"dev","tagName":"h3"},{"title":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/community/how_to_verify","content":"","keywords":"","version":"dev"},{"title":"‰∏ãËΩΩ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/community/how_to_verify#‰∏ãËΩΩ-apache-fory","content":" # If there is svn locally, you can clone to the local svn co https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/ # You can download the material file directly wget https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/xxx.xxx   ","version":"dev","tagName":"h2"},{"title":"È™åËØÅ checksums Âíå signatures‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/community/how_to_verify#È™åËØÅ-checksums-Âíå-signatures","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÂÆâË£Ö gpgÔºö  apt-get install gnupg # or yum install gnupg # or brew install gnupg   ‰πãÂêéÔºåÂØºÂÖ• Apache Fory release manager ÁöÑÂÖ¨Èí•Ôºö  curl https://downloads.apache.org/incubator/fory/KEYS &gt; KEYS # Download KEYS gpg --import KEYS # Import KEYS to local # Then, trust the public key: gpg --edit-key &lt;KEY-used-in-this-version&gt; # Edit the key(mentioned in vote email) # It will enter the interactive mode, use the following command to trust the key: gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; gpg&gt; trust pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: ultimate validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please note that the shown key validity is not necessarily correct unless you restart the program.   Êé•‰∏ãÊù•È™åËØÅÁ≠æÂêçÔºö  for i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done   Â¶ÇÊûúÂá∫Áé∞Â¶Ç‰∏ãÂÜÖÂÆπÔºåÂàôË°®Á§∫Á≠æÂêçÊ≠£Á°ÆÔºö  apache-fory-0.5.0-src.tar.gz gpg: Signature made Wed 17 Apr 2024 11:49:45 PM CST using RSA key ID 5E580BA4 gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Good signature from &quot;chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt;&quot;   ÁÑ∂ÂêéÈ™åËØÅ checksumÔºö  for i in *.tar.gz; do echo $i; sha512sum --check $i.sha512; done   ÂÆÉÂ∫îËØ•ËæìÂá∫Â¶Ç‰∏ãÂÜÖÂÆπÔºö  apache-fory-0.12.0-src.tar.gz apache-fory-0.12.0-src.tar.gz: OK   ","version":"dev","tagName":"h2"},{"title":"Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/community/how_to_verify#Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂","content":" Ëß£ÂéãÁº© apache-fory-${release_version}-${rc_version}-src.tar.gz Âπ∂Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  Ê≠§Â≠òÂÇ®Â∫ì LICENSE Âíå NOTICE Êñá‰ª∂ÊòØÊ≠£Á°ÆÁöÑÔºõÂ¶ÇÊúâÂøÖË¶ÅÔºåÊâÄÊúâÊñá‰ª∂ÈÉΩÊúâ ASF ËÆ∏ÂèØËØÅÊ†áÂ§¥ÔºõÈ°πÁõÆÊûÑÂª∫ÈÄöËøá„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Ê£ÄÊü• fory-java ÁöÑ Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/community/how_to_verify#Ê£ÄÊü•-fory-java-ÁöÑ-maven-artifacts","content":" ‰∏ãËΩΩ Apache Fory‚Ñ¢Ôºöhttps://repository.apache.org/content/repositories/orgapachefory-${maven_artifact_number}/.  ÊÇ®ÂèØ‰ª•Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  JAR ÁöÑ Checksum ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ checksum Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR ÁöÑ signature ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ signature Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR Âú®Êú¨Âú∞ÊòØÂèØÈáçÂ§çÁöÑ„ÄÇËøôÊÑèÂë≥ÁùÄÊÇ®ÂèØ‰ª•Âú®ËÆ°ÁÆóÊú∫‰∏äÊûÑÂª∫ JARÔºåÂπ∂È™åËØÅ checksum Âíå‰∏éÈ°πÁõÆÁªëÂÆöÁöÑÁõ∏Âêå„ÄÇ ","version":"dev","tagName":"h2"},{"title":"Java Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide","content":"","keywords":"","version":"0.11"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#quick-start","content":" Note that fory creation is not cheap, the fory instances should be reused between serializations instead of creating it everytime. You should keep fory to a static global variable, or instance variable of some singleton object or limited objects.  Fory for single-thread usage:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If class registration enabled, all custom types must be registered. fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory for multiple-thread usage:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory instances reuse example:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // reuse fory. private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.11","tagName":"h2"},{"title":"ForyBuilder options‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#forybuilder-options","content":" Option Name\tDescription\tDefault ValuetimeRefIgnored\tWhether to ignore reference tracking of all time types registered in TimeSerializers and subclasses of those types when ref tracking is enabled. If ignored, ref tracking of every time type can be enabled by invoking Fory#registerSerializer(Class, Serializer). For example, fory.registerSerializer(Date.class, new DateSerializer(fory, true)). Note that enabling ref tracking should happen before serializer codegen of any types which contain time fields. Otherwise, those fields will still skip ref tracking.\ttrue compressInt\tEnables or disables int compression for smaller size.\ttrue compressLong\tEnables or disables long compression for smaller size.\ttrue compressString\tEnables or disables string compression for smaller size.\tfalse classLoader\tThe classloader should not be updated; Fory caches class metadata. Use LoaderBinding or ThreadSafeFory for classloader updates.\tThread.currentThread().getContextClassLoader() compatibleMode\tType forward/backward compatibility config. Also Related to checkClassVersion config. SCHEMA_CONSISTENT: Class schema must be consistent between serialization peer and deserialization peer. COMPATIBLE: Class schema can be different between serialization peer and deserialization peer. They can add/delete fields independently. See more.\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tDetermines whether to check the consistency of the class schema. If enabled, Fory checks, writes, and checks consistency using the classVersionHash. It will be automatically disabled when CompatibleMode#COMPATIBLE is enabled. Disabling is not recommended unless you can ensure the class won't evolve.\tfalse checkJdkClassSerializable\tEnables or disables checking of Serializable interface for classes under java.*. If a class under java.* is not Serializable, Fory will throw an UnsupportedOperationException.\ttrue registerGuavaTypes\tWhether to pre-register Guava types such as RegularImmutableMap/RegularImmutableList. These types are not public API, but seem pretty stable.\ttrue requireClassRegistration\tDisabling may allow unknown classes to be deserialized, potentially causing security risks.\ttrue suppressClassRegistrationWarnings\tWhether to suppress class registration warnings. The warnings can be used for security audit, but may be annoying, this suppression will be enabled by default.\ttrue metaShareEnabled\tEnables or disables meta share mode.\ttrue if CompatibleMode.Compatible is set, otherwise false. scopedMetaShareEnabled\tScoped meta share focuses on a single serialization process. Metadata created or identified during this process is exclusive to it and is not shared with by other serializations.\ttrue if CompatibleMode.Compatible is set, otherwise false. metaCompressor\tSet a compressor for meta compression. Note that the passed MetaCompressor should be thread-safe. By default, a Deflater based compressor DeflaterMetaCompressor will be used. Users can pass other compressor such as zstd for better compression rate.\tDeflaterMetaCompressor deserializeNonexistentClass\tEnables or disables deserialization/skipping of data for non-existent classes.\ttrue if CompatibleMode.Compatible is set, otherwise false. codeGenEnabled\tDisabling may result in faster initial serialization but slower subsequent serializations.\ttrue asyncCompilationEnabled\tIf enabled, serialization uses interpreter mode first and switches to JIT serialization after async serializer JIT for a class is finished.\tfalse scalaOptimizationEnabled\tEnables or disables Scala-specific serialization optimization.\tfalse copyRef\tWhen disabled, the copy performance will be better. But fory deep copy will ignore circular and shared reference. Same reference of an object graph will be copied into different objects in one Fory#copy.\ttrue serializeEnumByName\tWhen Enabled, fory serialize enum by name instead of ordinal.\tfalse  ","version":"0.11","tagName":"h2"},{"title":"Advanced Usage‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#advanced-usage","content":" ","version":"0.11","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ creation‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#apache-fory-creation","content":" Single thread fory:  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Thread-safe fory:  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) // compress int for smaller size // .withIntCompressed(true) // compress long for smaller size // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ","version":"0.11","tagName":"h3"},{"title":"Handling Class Schema Evolution in Serialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#handling-class-schema-evolution-in-serialization","content":" In many systems, the schema of a class used for serialization may change over time. For instance, fields within a class may be added or removed. When serialization and deserialization processes use different versions of jars, the schema of the class being deserialized may differ from the one used during serialization.  By default, Fory serializes objects using the CompatibleMode.SCHEMA_CONSISTENT mode. This mode assumes that the deserialization process uses the same class schema as the serialization process, minimizing payload overhead. However, if there is a schema inconsistency, deserialization will fail.  If the schema is expected to change, to make deserialization succeed, i.e. schema forward/backward compatibility. Users must configure Fory to use CompatibleMode.COMPATIBLE. This can be done using theForyBuilder#withCompatibleMode(CompatibleMode.COMPATIBLE) method. In this compatible mode, deserialization can handle schema changes such as missing or extra fields, allowing it to succeed even when the serialization and deserialization processes have different class schemas.  Here is an example of creating Fory to support schema evolution:  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   This compatible mode involves serializing class metadata into the serialized output. Despite Fory's use of sophisticated compression techniques to minimize overhead, there is still some additional space cost associated with class metadata.  To further reduce metadata costs, Fory introduces a class metadata sharing mechanism, which allows the metadata to be sent to the deserialization process only once. For more details, please refer to the Meta Sharing specification.  ","version":"0.11","tagName":"h3"},{"title":"Compression‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#compression","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed can be used to compress int/long for smaller size. Normally compress int is enough.  Both compression are enabled by default, if the serialized is not important, for example, you use flatbuffers for serialization before, which doesn't compress anything, then you should disable compression. If your data are all numbers, the compression may bring 80% performance regression.  For int compression, fory use 1~5 bytes for encoding. First bit in every byte indicate whether has next byte. if first bit is set, then next byte will be read util first bit of next byte is unset.  For long compression, fory support two encoding:  Fory SLI(Small long as int) Encoding (used by default): If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First bit in every byte indicate whether has next byte. if first bit is set, then next byte will be read util first bit of next byte is unset.Negative number will be converted to positive number by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) to reduce cost of small negative numbers.  If a number are long type, it can't be represented by smaller bytes mostly, the compression won't get good enough result, not worthy compared to performance cost. Maybe you should try to disable long compression if you find it didn't bring much space savings.  ","version":"0.11","tagName":"h3"},{"title":"Object deep copy‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#object-deep-copy","content":" Deep copy example:  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Make fory deep copy ignore circular and shared reference, this deep copy mode will ignore circular and shared reference. Same reference of an object graph will be copied into different objects in one Fory#copy.  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"0.11","tagName":"h3"},{"title":"Implement a customized serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#implement-a-customized-serializer","content":" In some cases, you may want to implement a serializer for your type, especially some class customize serialization by JDK writeObject/writeReplace/readObject/readResolve, which is very inefficient. For example, if you don't want following Foo#writeObject got invoked, you can take following FooSerializer as an example:  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Register serializer:  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"0.11","tagName":"h3"},{"title":"Implement Collection Serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#implement-collection-serializer","content":" Similar to maps, when implementing a serializer for a custom Collection type, you must extend CollectionSerializer or AbstractCollectionSerializer. The key difference between these two is that AbstractCollectionSerializer can serialize a class which has a collection-like structure but is not a java Collection subtype.  For collection serializer, this is a special parameter supportCodegenHook needs be configured:  When true: Enables optimized access to collection elements and JIT compilation for better performanceDirect serialization invocation and inline for map key-value items without dynamic serializer dispatch cost.Better performance for standard collection typesRecommended for most collections When false: Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higer costMore flexible for custom collection typesRequired when collection has special serialization needsHandles complex collection implementations  Implement Collection Serializer with JIT support‚Äã  When implementing a Collection serializer with JIT support, you can leverage Fory's existing binary format and collection serialization infrastructure. The key is to properly implement the onCollectionWrite and newCollection methods to handle metadata while letting Fory handle the element serialization.  Here's an example:  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook controls whether to use JIT compilation super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // Write collection size buffer.writeVarUint32Small7(value.size()); // Write any additional collection metadata return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // Create new collection instance Collection collection = super.newCollection(buffer); // Read and set collection size int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Note that please invoke setNumElements when implementing newCollection to let fory know how many elements to deserialize.  Implement a totally-customzied Collection Serializer without JIT‚Äã  Sometimes you need to serialize a collection type that uses primitive arrays or has special requirements. In such cases, you can implement a serializer with JIT disabled and directly override the write and read methods.  This approach:  Gives you full control over serializationWorks well with primitive arraysBypasses collection iteration overheadAllows direct memory access  Here's an example of a custom integer list backed by a primitive array:  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) { throw new NoSuchElementException(); } return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } return elements[index]; } public void set(int index, int value) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends AbstractCollectionSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Disable JIT since we're handling serialization directly super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { // Write size buffer.writeVarUint32Small7(value.size()); // Write elements directly as primitive ints int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { // Read size int size = buffer.readVarUint32Small7(); // Create array and read elements int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // These methods are not used when JIT is disabled @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   Key Points:  Primitive Array Storage: Uses int[] for direct storageAvoids boxing/unboxing overheadProvides efficient memory layoutEnables direct array access Direct Serialization: Write size firstWrite primitive values directlyNo iteration overheadNo boxing/unboxing during serialization Direct Deserialization: Read size firstCreate primitive arrayRead values directly into arrayCreate list with populated array Disabled JIT: Set supportCodegenHook=falseOverride write/read methodsSkip collection view patternFull control over serialization format  When to Use: this approach is best when:  Working with primitive typesNeed maximum performanceWant to minimize memory overheadHave special serialization requirements  Usage Example:  // Create and populate list IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); // Serialize byte[] bytes = fory.serialize(list); // Deserialize IntList newList = (IntList) fory.deserialize(bytes);   This implementation is particularly efficient for scenarios where:  You're working exclusively with integersPerformance is criticalMemory efficiency is importantSerialization overhead needs to be minimized  Remember that while this approach gives up some of Fory's optimizations, it can provide better performance for specific use cases involving primitive types and direct array access.  Implement Serializer for Collection-like Types‚Äã  Sometimes you may want to implement a serializer for a type that behaves like a collection but isn't a standard Java Collection. This section demonstrates how to implement a serializer for such types.  The key principles for collection-like type serialization are:  Extend AbstractCollectionSerializer for custom collection-like typesEnable JIT optimization with supportCodegenHookProvide efficient element access through viewsMaintain proper size tracking  Here's an example:  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } // Constructor for wrapping existing array public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } // A view class that extends AbstractCollection for simpler implementation class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; // Constructor for serialization (wrapping existing array) public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } // Constructor for deserialization public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) { throw new NoSuchElementException(); } return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) { throw new IllegalStateException(&quot;Collection is full&quot;); } elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends AbstractCollectionSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   Key takeways:  Collection Structure: Array-based storage for elementsFixed size after creationDirect element accessSize tracking View Implementation: Extends AbstractCollection for simplicityProvides iterator for element accessImplements add() for deserializationShares array reference with original type Serializer Features: Uses supportCodegenHook=true for JIT optimizationShares array references when possibleMaintains proper size trackingUses view pattern for serialization Performance Aspects: Direct array accessMinimal object creationArray sharing between instancesEfficient iteration  Note that this implementation provides better performance at the cost of flexibility. Consider your specific use case when choosing this approach.  ","version":"0.11","tagName":"h3"},{"title":"Implement Map Serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#implement-map-serializer","content":" When implementing a serializer for a custom Map type, you must extend MapSerializer or AbstractMapSerializer. The key difference between these two is that AbstractMapSerializer can serialize a class which has a map-like structure but is not a java Map subtype.  Similiar to collection serializer, this is a special parameter supportCodegenHook needs be configured:  When true: Enables optimized access to map elements and JIT compilation for better performanceDirect serialization invocation and inline for map key-value items without dynamic serializer dispatch cost.Better performance for standard map typesRecommended for most maps When false: Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higer costMore flexible for custom map typesRequired when map has special serialization needsHandles complex map implementations  Implement Map Serializer with JIT support‚Äã  When implementing a Map serializer with JIT support, you can leverage Fory's existing chunk-based binary format and map serialization infrastructure. The key is to properly implement the onMapWrite and newMap methods to handle metadata while letting Fory handle the map key-value serialization.  Here's an example of implementing a custom map serializer:  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook is a critical parameter that determines serialization behavior super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { // Write map size buffer.writeVarUint32Small7(value.size()); // Write any additional map metadata here return value; } @Override public Map newMap(MemoryBuffer buffer) { // Read map size int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); // Create and return new map instance T map = (T) new HashMap(numElements); fory.getRefResolver().reference(map); return map; } }   Note that please invoke setNumElements when implementing newMap to let fory know how many elements to deserialize.  Implement a totally-customzied Map Serializer without JIT‚Äã  Sometimes you may need complete control over the serialization process, or your map type might have special requirements that don't fit the standard patterns. In such cases, you can implement a serializer with supportCodegenHook=false and directly override the write and read methods.  This approach:  Gives you full control over serializationAllows custom binary formatBypasses the standard map serialization patternMay be simpler for special cases  Here's an example:  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { private final Set&lt;String&gt; keys; private final int fixedValue; public FixedValueMap(Set&lt;String&gt; keys, int fixedValue) { this.keys = keys; this.fixedValue = fixedValue; } @Override public Set&lt;Entry&lt;String, Integer&gt;&gt; entrySet() { Set&lt;Entry&lt;String, Integer&gt;&gt; entries = new HashSet&lt;&gt;(); for (String key : keys) { entries.add(new SimpleEntry&lt;&gt;(key, fixedValue)); } return entries; } @Override public Integer get(Object key) { return keys.contains(key) ? fixedValue : null; } public Set&lt;String&gt; getKeys() { return keys; } public int getFixedValue() { return fixedValue; } } class FixedValueMapSerializer extends AbstractMapSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { // Disable codegen since we're handling serialization directly super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { // Write the fixed value buffer.writeInt32(value.getFixedValue()); // Write the number of keys buffer.writeVarUint32Small7(value.getKeys().size()); // Write each key for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { // Read the fixed value int fixedValue = buffer.readInt32(); // Read the number of keys int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } // These methods are not used when supportCodegenHook is false @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   Key Points:  Disable Codegen: Set supportCodegenHook=false in constructorFory will use your write/read methods directlyNo JIT optimization will be appliedFull control over serialization format Write Method: Handle all serialization manuallyWrite custom fields firstWrite map entries in your preferred formatControl the exact binary layout Read Method: Handle all deserialization manuallyRead in same order as writtenCreate and populate map instanceRestore custom fields Unused Methods: onMapWrite, onMapRead, onMapCopy are not usedCan throw UnsupportedOperationExceptionOnly write and read are important  When to Use: this approach is best when  Map has custom fields or metadataSpecial serialization format is neededComplete control over binary format is requiredStandard map patterns don't fit  Trade-offs  Advantages: Complete control over serializationCustom binary format possibleSimpler implementation for special casesDirect handling of custom fields Disadvantages: No JIT optimizationPotentially lower performanceManual handling of all serializationMore code to maintain  Remember that disabling codegen means giving up some performance optimizations that Fory provides. Only use this approach when the standard map serialization pattern doesn't meet your needs.  Implement Serializer for Map-like Types‚Äã  Sometimes you may want to implement a serializer for a type that behaves like a map but isn't a standard Java map. This section demonstrates how to implement a serializer for such types.  The key principles for map-like type serialization are:  Extend AbstractMapSerializer for custom collection-like typesEnable JIT optimization with supportCodegenHookProvide efficient element access through viewsMaintain proper size tracking  Here's a complete example:  // It's better to make it to implements the java.util.Map interface, in this way we don't have to implement such serializers by ourself. class CustomMapLike { private final Object[] keyArray; private final Object[] valueArray; private final int size; // Constructor for creating new instance public CustomMapLike(int initialCapacity) { this.keyArray = new Object[initialCapacity]; this.valueArray = new Object[initialCapacity]; this.size = 0; } // Constructor for wrapping existing arrays public CustomMapLike(Object[] keyArray, Object[] valueArray, int size) { this.keyArray = keyArray; this.valueArray = valueArray; this.size = size; } public Integer get(String key) { for (int i = 0; i &lt; size; i++) { if (key.equals(keyArray[i])) { return (Integer) valueArray[i]; } } return null; } public int size() { return size; } public Object[] getKeyArray() { return keyArray; } public Object[] getValueArray() { return valueArray; } } class MapView extends AbstractMap&lt;Object, Object&gt; { private final Object[] keyArray; private final Object[] valueArray; private final int size; private int writeIndex; // Constructor for serialization (wrapping existing CustomMapLike) public MapView(CustomMapLike mapLike) { this.size = mapLike.size(); this.keyArray = mapLike.getKeyArray(); this.valueArray = mapLike.getValueArray(); } // Constructor for deserialization public MapView(int size) { this.size = size; this.keyArray = new Object[size]; this.valueArray = new Object[size]; } @Override public Set&lt;Entry&lt;Object, Object&gt;&gt; entrySet() { return new AbstractSet&lt;Entry&lt;Object, Object&gt;&gt;() { @Override public Iterator&lt;Entry&lt;Object, Object&gt;&gt; iterator() { return new Iterator&lt;Entry&lt;Object, Object&gt;&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Entry&lt;Object, Object&gt; next() { if (!hasNext()) { throw new NoSuchElementException(); } final int currentIndex = index++; return new SimpleEntry&lt;&gt;( keyArray[currentIndex], valueArray[currentIndex] ); } }; } @Override public int size() { return size; } }; } @Override public Object put(Object key, Object value) { if (writeIndex &gt;= size) { throw new IllegalStateException(&quot;Map is full&quot;); } keyArray[writeIndex] = key; valueArray[writeIndex] = value; writeIndex++; return null; } public Object[] getKeyArray() { return keyArray; } public Object[] getValueArray() { return valueArray; } public int size() { return size; } } class CustomMapLikeSerializer extends AbstractMapSerializer&lt;CustomMapLike&gt; { public CustomMapLikeSerializer(Fory fory) { super(fory, CustomMapLike.class, true); } @Override public Map onMapWrite(MemoryBuffer buffer, CustomMapLike value) { buffer.writeVarUint32Small7(value.size()); // Return a zero-copy view using the same underlying arrays return new MapView(value); } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); // Create a view with new arrays for deserialization return new MapView(numElements); } @Override public CustomMapLike onMapRead(Map map) { MapView view = (MapView) map; // Just pass the arrays directly - no copying needed return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size()); } @Override public CustomMapLike onMapCopy(Map map) { MapView view = (MapView) map; // Just pass the arrays directly - no copying needed return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size()); } }   ","version":"0.11","tagName":"h3"},{"title":"Register Custom Serializers‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#register-custom-serializers","content":" After implementing your custom serializer, register it with Fory:  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Register map serializer fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Register collection serializer fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Note that when implementing custom map or collection serializers:  Always extend the appropriate base class (MapSerializer/AbstractMapSerializer for maps, CollectionSerializer/AbstractCollectionSerializer for collections)Consider the impact of supportCodegenHook on performance and functionalityProperly handle reference tracking if neededImplement proper size management using setNumElements and getAndClearNumElements when supportCodegenHook is true  Besides registering serializes, one can also implement java.io.Externalizable for a class to customize serialization logic, such type will be serialized by fory ExternalizableSerializer.  ","version":"0.11","tagName":"h3"},{"title":"Security & Class Registration‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#security--class-registration","content":" ForyBuilder#requireClassRegistration can be used to disable class registration, this will allow to deserialize objects unknown types, more flexible but may be insecure if the classes contains malicious code.  Do not disable class registration unless you can ensure your environment is secure. Malicious code in init/equals/hashCode can be executed when deserializing unknown/untrusted types when this option disabled.  Class registration can not only reduce security risks, but also avoid classname serialization cost.  You can register class with API Fory#register.  Note that class registration order is important, serialization and deserialization peer should have same registration order.  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   If you invoke ForyBuilder#requireClassRegistration(false) to disable class registration check, you can set org.apache.fory.resolver.ClassChecker by ClassResolver#setClassChecker to control which classes are allowed for serialization. For example, you can allow classes started with org.example.* by:  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory also provided a org.apache.fory.resolver.AllowListChecker which is allowed/disallowed list based checker to simplify the customization of class check mechanism. You can use this checker or implement more sophisticated checker by yourself.  ","version":"0.11","tagName":"h3"},{"title":"Register class by name‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#register-class-by-name","content":" Register class by id will have better performance and smaller space overhead. But in some cases, management for a bunch of type id is complex. In such cases, registering class by name using APIregister(Class&lt;?&gt; cls, String namespace, String typeName) is recommended.  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   If there are no duplicate name for type, namespace can be left as empty to reduce serialized size.  Do not use this API to register class since it will increase serialized size a lot compared to register class by id  ","version":"0.11","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#zero-copy-serialization","content":" import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Note that fory instance should be reused instead of creation every time. static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"0.11","tagName":"h3"},{"title":"Meta Sharing‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#meta-sharing","content":" Fory supports share type metadata (class name, field name, final field type information, etc.) between multiple serializations in a context (ex. TCP connection), and this information will be sent to the peer during the first serialization in the context. Based on this metadata, the peer can rebuild the same deserializer, which avoids transmitting metadata for subsequent serializations and reduces network traffic pressure and supports type forward/backward compatibility automatically.  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // share meta across serialization. // .withMetaContextShare(true) // Not thread-safe fory. MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // Not thread-safe fory. MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Thread-safe fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // thread-safe fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"0.11","tagName":"h3"},{"title":"Deserialize non-existent classes‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#deserialize-non-existent-classes","content":" Fory support deserializing non-existent classes, this feature can be enabled by ForyBuilder#deserializeNonexistentClass(true). When enabled, and metadata sharing enabled, Fory will store the deserialized data of this type in a lazy subclass of Map. By using the lazy map implemented by Fory, the rebalance cost of filling map during deserialization can be avoided, which further improves performance. If this data is sent to another process and the class exists in this process, the data will be deserialized into the object of this type without losing any information.  If metadata sharing is not enabled, the new class data will be skipped and an NonexistentSkipClass stub object will be returned.  ","version":"0.11","tagName":"h3"},{"title":"Copy/Map object from one type to another type‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#copymap-object-from-one-type-to-another-type","content":" Fory support mapping object from one type to another type.  Notes: This mapping will execute a deep copy, all mapped fields are serialized into binary and deserialized from that binary to map into another type.All struct types must be registered with same ID, otherwise Fory can not mapping to correct struct type. Be careful when you use Fory#register(Class), because fory will allocate an auto-grown ID which might be inconsistent if you register classes with different order between Fory instance.  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"0.11","tagName":"h3"},{"title":"Migration‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#migration","content":" ","version":"0.11","tagName":"h2"},{"title":"JDK migration‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#jdk-migration","content":" If you use jdk serialization before, and you can't upgrade your client and server at the same time, which is common for online application. Fory provided an util method org.apache.fory.serializer.JavaSerializer.serializedByJDK to check whether the binary are generated by jdk serialization, you use following pattern to make exiting serialization protocol-aware, then upgrade serialization to fory in an async rolling-up way:  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"0.11","tagName":"h3"},{"title":"Upgrade fory‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#upgrade-fory","content":" Currently binary compatibility is ensured for minor versions only. For example, if you are using foryv0.2.0, binary compatibility will be provided if you upgrade to fory v0.2.1. But if upgrade to fory v0.4.1, no binary compatibility are ensured. Most of the time there is no need to upgrade fory to newer major version, the current version is fast and compact enough, and we provide some minor fix for recent older versions.  But if you do want to upgrade fory for better performance and smaller size, you need to write fory version as header to serialized data using code like following to keep binary compatibility:  MemoryBuffer buffer = xxx; buffer.writeVarInt32(2); fory.serialize(buffer, obj);   Then for deserialization, you need:  MemoryBuffer buffer = xxx; int foryVersion = buffer.readVarInt32(); Fory fory = getFory(foryVersion); fory.deserialize(buffer);   getFory is a method to load corresponding fory, you can shade and relocate different version of fory to different package, and load fory by version.  If you upgrade fory by minor version, or you won't have data serialized by older fory, you can upgrade fory directly, no need to versioning the data.  ","version":"0.11","tagName":"h3"},{"title":"Trouble shooting‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#trouble-shooting","content":" ","version":"0.11","tagName":"h2"},{"title":"Class inconsistency and class version check‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#class-inconsistency-and-class-version-check","content":" If you create fory without setting CompatibleMode to org.apache.fory.config.CompatibleMode.COMPATIBLE, and you got a strange serialization error, it may be caused by class inconsistency between serialization peer and deserialization peer.  In such cases, you can invoke ForyBuilder#withClassVersionCheck to create fory to validate it, if deserialization throws org.apache.fory.exception.ClassNotCompatibleException, it shows class are inconsistent, and you should create fory withForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE).  CompatibleMode.COMPATIBLE has more performance and space cost, do not set it by default if your classes are always consistent between serialization and deserialization.  ","version":"0.11","tagName":"h3"},{"title":"Deserialize POJO into another type‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#deserialize-pojo-into-another-type","content":" Fory allows you to serialize one POJO and deserialize it into a different POJO. The different POJO means the schema inconsistency. Users must to configure Fory withCompatibleMode set to org.apache.fory.config.CompatibleMode.COMPATIBLE.  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"0.11","tagName":"h3"},{"title":"Use wrong API for deserialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/0.11/guide/java_object_graph_guide#use-wrong-api-for-deserialization","content":" If you serialize an object by invoking Fory#serialize, you should invoke Fory#deserialize for deserialization instead ofFory#deserializeJavaObject.  If you serialize an object by invoking Fory#serializeJavaObject, you should invoke Fory#deserializeJavaObject for deserialization instead of Fory#deserializeJavaObjectAndClass/Fory#deserialize.  If you serialize an object by invoking Fory#serializeJavaObjectAndClass, you should invoke Fory#deserializeJavaObjectAndClass for deserialization instead of Fory#deserializeJavaObject/Fory#deserialize. ","version":"0.11","tagName":"h3"},{"title":"GraalVM Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/graalvm_guide","content":"","keywords":"","version":"dev"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#graalvm-native-image","content":" GraalVM ÁöÑ native image ËÉΩÂ∞Ü Java ‰ª£Á†ÅÊèêÂâçÁºñËØë‰∏∫Êú¨Âú∞‰ª£Á†ÅÔºå‰ªéËÄåÊûÑÂª∫Êõ¥Âø´„ÄÅÊõ¥Â∞è„ÄÅÊõ¥Á≤æÁÆÄÁöÑÂ∫îÁî®„ÄÇ Native image ‰∏çÂåÖÂê´ JIT ÁºñËØëÂô®ÔºåÊó†Ê≥ïÂú®ËøêË°åÊó∂Â∞ÜÂ≠óËäÇÁ†ÅÁºñËØë‰∏∫Êú∫Âô®Á†ÅÔºå‰πü‰∏çÊîØÊåÅÂèçÂ∞ÑÔºåÈô§ÈùûÈÖçÁΩÆÂèçÂ∞ÑÂÖÉÊï∞ÊçÆÊñá‰ª∂„ÄÇ  Apache Fory‚Ñ¢ Âú® GraalVM native image ‰∏ãËøêË°åËâØÂ•Ω„ÄÇFory ‰ºöÂú® graalvm ÊûÑÂª∫Èò∂ÊÆµ‰∏∫ Fory JIT framework Âíå MethodHandle/LambdaMetafactory ÁîüÊàêÊâÄÊúâÂ∫èÂàóÂåñÂô®‰ª£Á†ÅÔºåËøêË°åÊó∂Áõ¥Êé•‰ΩøÁî®Ëøô‰∫õÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂ∫èÂàóÂåñÔºåÊó†ÈúÄÈ¢ùÂ§ñÂºÄÈîÄÔºåÊÄßËÉΩ‰ºòÂºÇ„ÄÇ  Âú® graalvm native image ‰∏ã‰ΩøÁî® Fory Êó∂ÔºåÂøÖÈ°ªÂ∞Ü Fory ÂàõÂª∫‰∏∫Á±ªÁöÑÈùôÊÄÅÂ≠óÊÆµÔºåÂπ∂Âú®Á±ªÂàùÂßãÂåñÊó∂Ê≥®ÂÜåÊâÄÊúâÁ±ªÂûã„ÄÇÁÑ∂ÂêéÂú® resources/META-INF/native-image/$xxx/native-image.properties ‰∏ãÈÖçÁΩÆ native-image.propertiesÔºåÂëäÁü• graalvm Âú® native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñËØ•Á±ª„ÄÇ‰æãÂ¶ÇÔºåÈÖçÁΩÆ org.apache.fory.graalvm.Example Á±ªÂú®ÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ‰ΩøÁî® fory ÁöÑÂè¶‰∏Ä‰∏™Â•ΩÂ§ÑÊòØÊó†ÈúÄÈÖçÁΩÆÁπÅÁêêÁöÑ reflection json Âíå serialization json„ÄÇÂè™ÈúÄÂØπÊØè‰∏™ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÂûãË∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) Âç≥ÂèØ„ÄÇ  Ê≥®ÊÑèÔºöFory ÁöÑ asyncCompilationEnabled ÈÄâÈ°πÂú® graalvm native image ‰∏ã‰ºöËá™Âä®Á¶ÅÁî®ÔºåÂõ†‰∏∫ native image ËøêË°åÊó∂‰∏çÊîØÊåÅ JIT„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#ÈùûÁ∫øÁ®ãÂÆâÂÖ®-fory","content":" Á§∫‰æãÔºö  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ fory.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.Example ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"dev","tagName":"h2"},{"title":"Á∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#Á∫øÁ®ãÂÆâÂÖ®-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.ThreadSafeExample ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"dev","tagName":"h2"},{"title":"Ê°ÜÊû∂ÈõÜÊàê‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#Ê°ÜÊû∂ÈõÜÊàê","content":" ÂØπ‰∫éÊ°ÜÊû∂ÂºÄÂèëËÄÖÔºåÂ¶ÇÊûúÂ∏åÊúõÈõÜÊàê fory ‰Ωú‰∏∫Â∫èÂàóÂåñÊñπÊ°àÔºåÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºåËÆ©Áî®Êà∑ÂàóÂá∫ÊâÄÊúâÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÔºåÁÑ∂ÂêéÂä†ËΩΩËøô‰∫õÁ±ªÂπ∂Âú® Fory ÈõÜÊàêÁ±ª‰∏≠Ë∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) ËøõË°åÊ≥®ÂÜåÔºåÂπ∂ÈÖçÁΩÆËØ•Á±ªÂú® graalvm native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñ„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#benchmark","content":" ËøôÈáåÁªôÂá∫ Fory ‰∏é Graalvm Serialization ÁöÑ‰∏§‰∏™Á±ªÁöÑÂü∫ÂáÜÊµãËØï„ÄÇ  Fory Êú™ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 46x ÈÄüÂ∫¶Ôºå43% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå56% Â§ßÂ∞è  Fory ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 24x ÈÄüÂ∫¶Ôºå31% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå48% Â§ßÂ∞è  Âü∫ÂáÜÊµãËØï‰ª£Á†ÅËßÅ [Benchmark.java]„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Struct Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#struct-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"dev","tagName":"h3"},{"title":"Pojo Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/graalvm_guide#pojo-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"dev","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂèëÂ∏É","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/community/how_to_release","content":"","keywords":"","version":"dev"},{"title":"‰ªãÁªç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#‰ªãÁªç","content":" Ê∫ê‰ª£Á†ÅÂèëÂ∏ÉÊòØ Apache ÊúÄÈáçËßÜ‰ª•ÂèäÊúÄÈáçË¶ÅÁöÑÈÉ®ÂàÜ„ÄÇ  ËØ∑Ê≥®ÊÑèËÆ∏ÂèØËØÅÂíåÂèëÂ∏ÉÁöÑËΩØ‰ª∂Á≠æÂêçÈóÆÈ¢ò„ÄÇÂèëÂ∏ÉËΩØ‰ª∂ÊòØ‰∏Ä‰ª∂‰∏•ËÇÉÁöÑ‰∫ãÊÉÖÔºåÂπ∂‰ºö‰∫ßÁîüÁõ∏Â∫îÁöÑÊ≥ïÂæãÂêéÊûú„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"release manager Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#release-manager-Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É","content":" ","version":"dev","tagName":"h2"},{"title":"ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÁéØÂ¢ÉË¶ÅÊ±Ç","content":" Ê≠§ÂèëÂ∏ÉËøáÁ®ãÂú® Ubuntu Á≥ªÁªü‰∏≠ËøêË°åÔºåÈúÄË¶Å‰ª•‰∏ãÂá†‰∏™ÁéØÂ¢É‰æùËµñÔºö  JDK 1.8+Apache Maven 3.x+Python 3.8GnuPG 2.xGitSVNÔºàApache Âü∫Èáë‰ºö‰ΩøÁî® svn Êù•ÊâòÁÆ°È°πÁõÆÂèëÂ∏ÉÔºâËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÔºöÂ¶ÇÊûúÊÇ®Âú®‰∏çÂêåÁöÑÁõÆÂΩï‰∏ãÈÖçÁΩÆ‰∫Ü gpg ÂØÜÈí•ÔºåËØ∑ÊâßË°å export GNUPGHOME=$(xxx) ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂáÜÂ§á GPG ÂØÜÈí•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂáÜÂ§á-gpg-ÂØÜÈí•","content":" Â¶ÇÊûúÊÇ®ÊòØÁ¨¨‰∏ÄÊ¨°‰Ωú‰∏∫ËΩØ‰ª∂ÂèëÂ∏ÉËÄÖÔºåÊÇ®ÈúÄË¶ÅÂáÜÂ§á‰∏Ä‰∏™ GPG ÂØÜÈí•„ÄÇ  ÊÇ®ÂèØ‰ª•ÂèÇËÄÉËøôÈáåÁöÑÂø´ÈÄüÂºÄÂßãËé∑Âèñ‰∏Ä‰∏™ GPG ÂØÜÈí•ÊàñËÄÖËé∑ÂèñÊõ¥Â§öÁõ∏ÂÖ≥‰ø°ÊÅØ„ÄÇ  ÂÆâË£Ö GPG‚Äã  sudo apt install gnupg2   ÁîüÊàê GPG ÂØÜÈí•‚Äã  ËØ∑‰ΩøÁî®ÊÇ®ÁöÑ Apache ÂêçÂ≠óÂíåÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁîüÊàê GPG ÂØÜÈí•Ôºö  $ gpg --full-gen-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 # input 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 # input 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n years Key is valid for? (0) 0 # input 0 Key does not expire at all Is this correct? (y/N) y # input y GnuPG needs to construct a user ID to identify your key. Real name: Chaokun Yang # input your name Email address: chaokunyang@apache.org # input your email Comment: CODE SIGNING KEY # input some annotations, optional You selected this USER-ID: &quot;Chaokun &lt;chaokunyang@apache.org&gt;&quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. # Input the security key ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Please enter this passphrase ‚îÇ ‚îÇ ‚îÇ ‚îÇ Passphrase: _______________________________ ‚îÇ ‚îÇ ‚îÇ ‚îÇ &lt;OK&gt; &lt;Cancel&gt; ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò # key generation will be done after your inputting the key with the following output gpg: key E49B00F626B marked as ultimately trusted gpg: revocation certificate stored as '/Users/chaokunyang/.gnupg/openpgp-revocs.d/1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4.rev' public and secret key created and signed. pub rsa4096 2022-07-12 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] Chaokun &lt;chaokunyang@apache.org&gt; sub rsa4096 2022-07-12 [E]   ‰∏ä‰º†ÂÖ¨Èí•Ëá≥ GPG ÂØÜÈí•ÊúçÂä°Âô®‚Äã  È¶ñÂÖàÔºåÂàóÂá∫ÊÇ®ÊâÄÂàõÂª∫ÁöÑ GPG ÂØÜÈí•Ôºö  gpg --list-keys   ÊâßË°åÁõ∏ÂÖ≥ÂëΩ‰ª§‰πãÂêéÔºåÊÇ®Â∞ÜÁúãÂà∞Â¶Ç‰∏ãËæìÂá∫Ôºö  -------------------------------------------------- pub rsa4096 2024-03-27 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; sub rsa4096 2024-03-27 [E]   ÁÑ∂ÂêéÔºåÂ∞ÜÊÇ®ÁöÑÂØÜÈí• ID ÂèëÈÄÅÂà∞ÂØÜÈí•ÊúçÂä°Âô®Ôºö  gpg --keyserver keys.openpgp.org --send-key &lt;key-id&gt; # e.g., 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4   ÂÖ∂‰∏≠Ôºåkeys.openpgp.org ÊòØ‰∏Ä‰∏™ÈöèÊú∫ÈÄâÊã©ÁöÑÂØÜÈí•ÊúçÂä°Âô®ÔºåÂèØ‰ª•‰ΩøÁî® keyserver.ubuntu.com Êàñ‰ªª‰ΩïÂÖ∂‰ªñÂäüËÉΩÂÆåÂ§áÁöÑÂØÜÈí•ÊúçÂä°Âô®„ÄÇ  Ê£ÄÊü•ÂØÜÈí•ÊòØÂê¶ÂàõÂª∫ÊàêÂäü‚Äã  ‰∏ä‰º†Â§ßÁ∫¶ÈúÄË¶Å‰∏ÄÂàÜÈíüÔºõ‰πãÂêéÔºåÊÇ®ÂèØ‰ª•ÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂Âú®Áõ∏Â∫îÁöÑÂØÜÈí•ÊúçÂä°Âô®‰∏äÊ£ÄÊü•„ÄÇ  Â∞ÜÂØÜÈí•‰∏ä‰º†Âà∞ÂØÜÈí•ÊúçÂä°Âô®ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØ‰∏∫‰∫ÜÂä†ÂÖ•‰∏Ä‰∏™ÂèØ‰ø°ÁöÑ‰ø°‰ªªÁΩëÁªú„ÄÇ  Â∞Ü GPG ÂÖ¨Èí•Ê∑ªÂä†Âà∞È°πÁõÆ KEYS Êñá‰ª∂‰∏≠‚Äã  ÂèëÂ∏ÉÂàÜÊîØÁöÑ svn ‰ªìÂ∫ìÊòØÔºöhttps://dist.apache.org/repos/dist/release/fory  ËØ∑Âú®ÂèëÂ∏ÉÂàÜÊîØÁöÑ KEYS ‰∏≠Ê∑ªÂä†ÂÖ¨Èí•Ôºö  svn co https://dist.apache.org/repos/dist/release/fory fory-dist # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. cd fory-dist (gpg --list-sigs YOUR_NAME@apache.org &amp;&amp; gpg --export --armor YOUR_NAME@apache.org) &gt;&gt; KEYS # Append your key to the KEYS file svn add . # It is not needed if the KEYS document exists before. svn ci -m &quot;add gpg key for YOUR_NAME&quot; # Later on, if you are asked to enter a username and password, just use your apache username and password.   Â∞Ü GPG ÂÖ¨Èí•‰∏ä‰º†Âà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑‚Äã  ËæìÂÖ• https://github.com/settings/keys ‰ª•Ê∑ªÂä†ÊÇ®ÁöÑ GPG ÂØÜÈí•„ÄÇÂ¶ÇÊûúÊ∑ªÂä†ÂêéÂèëÁé∞‚ÄúÊú™È™åËØÅ‚ÄùÂ≠óÊ†∑ÔºåËØ∑Â∞Ü GPG ÂØÜÈí•‰∏≠‰ΩøÁî®ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁªëÂÆöÂà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑Ôºàhttps://github.com/settings/emailsÔºâ„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Âª∂‰º∏ÈòÖËØª‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#Âª∂‰º∏ÈòÖËØª","content":" Âª∫ËÆÆÊÇ®Âú®ÂèëÂ∏É‰πãÂâçÈòÖËØª‰ª•‰∏ãÊñáÊ°£Ôºå‰∫ÜËß£ÊúâÂÖ≥ Apache Âü∫Èáë‰ºöÂèëÂ∏ÉËΩØ‰ª∂ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºå‰ΩÜËøô‰∏çÊòØÂøÖÈ°ªÁöÑÔºö  ÂèëÂ∏ÉÊîøÁ≠ñÔºöhttps://www.apache.org/legal/release-policy.htmlTLP ÁâàÊú¨Ôºöhttps://infra.apache.org/release-distributionÂèëÂ∏ÉÊ†áÂøóÔºöhttps://infra.apache.org/release-signing.htmlÂèëÂ∏ÉÂèëÂ∏ÉÔºöhttps://infra.apache.org/release-publishing.htmlÂèëÂ∏É‰∏ãËΩΩÈ°µÈù¢Ôºöhttps://infra.apache.org/release-download-pages.htmlÂèëÂ∏É maven artifactsÔºöhttps://infra.apache.org/publishing-maven-artifacts.html  ","version":"dev","tagName":"h3"},{"title":"ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫","content":" ÈÄöËøáÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥‰ª•‰∏ãÂú∞ÂùÄÂèëËµ∑ÊúâÂÖ≥‰∏ã‰∏Ä‰∏™ÁâàÊú¨ÁöÑËÆ®ËÆ∫Ôºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [DISCUSS] Release Apache Fory ${release_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory Community, This is a call for a discussion to release Apache Fory version ${release_version}. The change lists about this release: https://github.com/apache/fory/compare/v0.11.2...v0.12.0 Please leave your comments here about this release plan. We will bump the version in repo and start the release process after the discussion. Thanks, ${name}   ","version":"dev","tagName":"h2"},{"title":"ÂáÜÂ§áÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂáÜÂ§áÂèëÂ∏É","content":" Â¶ÇÊûúËÆ®ËÆ∫ÁªìÊûú‰∏≠Ê≤°ÊúâÂá∫Áé∞ÂèçÂØπÂ£∞Èü≥ÔºåÊÇ®ÈúÄË¶ÅÂÅö‰∏Ä‰∫õÂèëÂ∏ÉÁâàÊú¨ÁöÑÂáÜÂ§áÂ∑•‰Ωú„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Github ÂàÜÊîØÂíåÊ†áÁ≠æ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#github-ÂàÜÊîØÂíåÊ†áÁ≠æ","content":" ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ releases-0.12.0ÈÄöËøáÊâßË°åÂëΩ‰ª§Â∞ÜÁâàÊú¨ $version ÂçáÁ∫ßÂà∞ python ci/release.py bump_version -l all -version $versionÊâßË°å git commit Âπ∂Â∞ÜÂàÜÊîØÊé®ÈÄÅÂà∞ git@github.com:apache/fory.gitÈÄöËøá git tag v0.12.0-rc1 ÂàõÂª∫‰∏Ä‰∏™Êñ∞Ê†áÁ≠æÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂Êé®ÈÄÅÂà∞ git@github.com:apache/fory.git  ","version":"dev","tagName":"h3"},{"title":"ÊûÑÂª∫ artifacts Âπ∂‰∏ä‰º†Âà∞ SVN dist/dev ‰ªìÂ∫ì‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÊûÑÂª∫-artifacts-Âπ∂‰∏ä‰º†Âà∞-svn-distdev-‰ªìÂ∫ì","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÈÄöËøá python ci/release.py build -v $version ÊûÑÂª∫È¢ÑÂèëÂ∏É artifacts„ÄÇ  ÁÑ∂ÂêéÊÇ®ÈúÄË¶ÅÊääÂÆÉ‰∏ä‰º†Âà∞ svn dist repo„ÄÇdev ÂàÜÊîØÁöÑ dist ‰ªìÂ∫ìÂú∞ÂùÄÊòØÔºöhttps://dist.apache.org/repos/dist/dev/fory  # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. svn co https://dist.apache.org/repos/dist/dev/fory fory-dist-dev   ÁÑ∂ÂêéÔºå‰∏ä‰º†È°πÁõÆÔºö  cd fory-dist-dev # create a directory named by version mkdir ${release_version}-${rc_version} # copy source code and signature package to the versioned directory cp ${repo_dir}/dist/* ${release_version}-${rc_version} # check svn status svn status # add to svn svn add ${release_version}-${rc_version} # check svn status svn status # commit to SVN remote server svn commit -m &quot;Prepare for fory ${release_version}-${rc_version}&quot;   ËÆøÈóÆ https://dist.apache.org/repos/dist/dev/fory/ ‰ª•Ê£ÄÊü• artifacts ÊòØÂê¶Ê≠£Á°Æ‰∏ä‰º†„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊüê‰∫õÊñá‰ª∂ÊòØÊÑèÂ§ñÂá∫Áé∞ÊàñËÄÖÂèëÁîüÊüê‰∫õÈîôËØØÔºåÂàôÈúÄË¶ÅÂà†Èô§Áõ∏ÂÖ≥ÂÜÖÂÆπÂπ∂ÊâßË°å svn deleteÔºåÁÑ∂ÂêéÈáçÂ§ç‰∏äËø∞‰∏ä‰º†ËøáÁ®ã„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÊäïÁ•®","content":" Êñ∞ÁâàÊú¨ÂèëÂ∏ÉÈúÄË¶Å Apache Fory Á§æÂå∫ÁöÑÊäïÁ•®„ÄÇ  release_versionÔºöFory ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.12.0„ÄÇrelease_candidate_versionÔºöÊäïÁ•®ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.12.0-rc1„ÄÇmaven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001. ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂèØ‰ª•ÈÄöËøáÊêúÁ¥¢ ‚Äúfory‚Äù Êù•ÊâæÂà∞ maven_artifact_number https://repository.apache.org/#stagingRepositories.  ","version":"dev","tagName":"h2"},{"title":"Fory Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#fory-Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ Fory CommunityÔºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fory v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory Community: This is a call for vote to release Apache Fory version release-0.12.0-rc1. Apache Fory - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The change lists about this release: https://github.com/apache/fory/compare/v0.12.0...v0.12.0-rc1 The release candidates: https://dist.apache.org/repos/dist/dev/fory/0.12.0-rc1/ The maven staging for this release: https://repository.apache.org/content/repositories/orgapachefory-1003 Git tag for the release: https://github.com/apache/fory/releases/tag/v0.12.0-rc1 Git commit for the release: https://github.com/apache/fory/commit/fae06330edd049bb960536e978a45b97bca66faf The artifacts signed with PGP key [5E580BA4], corresponding to [chaokunyang@apache.org], that can be found in keys file: https://downloads.apache.org/fory/KEYS The vote will be open for at least 72 hours until the necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about Fory, please see https://fory.apache.org/ *Valid check is a requirement for a vote. *Checklist for reference: [ ] Download Fory is valid. [ ] Checksums and PGP signatures are valid. [ ] Source code distributions have correct names matching the current release. [ ] LICENSE and NOTICE files are correct. [ ] All files have license headers if necessary. [ ] No compiled archives bundled in source archive. [ ] Can compile from source. How to Build and Test, please refer to: https://github.com/apache/fory/blob/main/docs/guide/DEVELOPMENT.md Thanks, Chaokun Yang   Âú®Ëá≥Â∞ëËé∑Âæó 3 + 1 ‰∏îÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™ Fory Podling PMC ÊàêÂëòÂíåÊèê‰∫§ËÄÖÔºâÂπ∂Ê≤°ÊúâÊî∂Âà∞Âê¶ÂÜ≥Á•®‰πãÂêéÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fory v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory Community, The vote to release Apache Fory v${release_version}-${rc_version} has passed. The vote PASSED with 3 binding +1 and 0 -1 vote: Binding votes: - xxx - yyy - zzz Vote thread: ${vote_thread_url} Thanks, ${name}   ","version":"dev","tagName":"h3"},{"title":"Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÔºåËØ∑ÂçïÂáª‚ÄúÂà†Èô§‚Äù‰ª•Âà†Èô§ÊöÇÂ≠òÁöÑ Maven artifacts„ÄÇ  Ëß£ÂÜ≥ÊèêÂá∫ÁöÑÈóÆÈ¢òÔºåÁÑ∂ÂêéÂÜçÊ¨°ÊèêÂá∫ rc_version ÁöÑÊñ∞ÊäïÁ•®„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂÆòÊñπÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂÆòÊñπÂèëÂ∏É","content":" ","version":"dev","tagName":"h2"},{"title":"Â∞Ü artifacts ÂèëÂ∏ÉÂà∞ SVN ÂèëÂ∏ÉÁõÆÂΩï‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#Â∞Ü-artifacts-ÂèëÂ∏ÉÂà∞-svn-ÂèëÂ∏ÉÁõÆÂΩï","content":" release_versionÔºöFory ÁöÑÂèëÂ∏ÉÁâàÊú¨ÔºåÂ¶Ç 0.12.0release_candidate_versionÔºöÊäïÁ•®ÁâàÊú¨ÔºåÂ¶Ç 0.12.0-rc1  svn mv https://dist.apache.org/repos/dist/dev/fory/${release_version}-${rc_version} https://dist.apache.org/repos/dist/release/fory/${release_version} -m &quot;Release fory ${release_version}&quot;   ","version":"dev","tagName":"h3"},{"title":"Êõ¥Êîπ Fory ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#Êõ¥Êîπ-fory-ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•","content":" Êèê‰∫§ PR Âà∞ https://github.com/apache/fory-site ‰ªìÂ∫ìÊõ¥Êñ∞ Fory ÁâàÊú¨Ôºå‰∏ãËΩΩÈ°µÈù¢  ","version":"dev","tagName":"h3"},{"title":"ÂèëÂ∏É Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂèëÂ∏É-maven-artifacts","content":" maven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001„ÄÇÊâìÂºÄhttps://repository.apache.org/#stagingRepositories.ÊâæÂà∞ artifacts orgapachefory-${maven_artifact_number}ÔºåÁÇπÂáª‚ÄúÂèëÂ∏É‚Äù„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂèëÈÄÅÂÖ¨Âëä‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/next/community/how_to_release#ÂèëÈÄÅÂÖ¨Âëä","content":" Â∞ÜÂèëÂ∏ÉÂÖ¨ÂëäÂèëÈÄÅÁªô dev@fory.apache.org Âπ∂‰∏îÊäÑÈÄÅÁªô announce@apache.org„ÄÇ  Ê†áÈ¢òÔºö  [ANNOUNCE] Apache Fory ${release_version} released   ÂÜÖÂÆπÔºö  Hi all, The Apache Fory community is pleased to announce that Apache Fory {release_version} has been released! Apache Fory - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The release notes are available here: https://github.com/apache/fory/releases/tag/v${release_version} For the complete list of changes: https://github.com/apache/fory/compare/v0.12.0...v${release_version} Apache Fory website: https://fory.apache.org/ Download Links: https://fory.apache.org/download Fory Resources: - Fory github repo: https://github.com/apache/fory - Issue: https://github.com/apache/fory/issues - Mailing list: dev@fory.apache.org We are looking to grow our community and welcome new contributors. If you are interested in contributing to Fory, please contact us on the mailing list or on GitHub. We will be happy to help you get started. ------------------ Best Regards, ${your_name}   Ëá≥Ê≠§ÔºåÊï¥‰∏™ÂèëÂ∏ÉÊµÅÁ®ãÁªìÊùü„ÄÇ ","version":"dev","tagName":"h3"},{"title":"Ë°åÂ≠òÊ†ºÂºè","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/row_format_guide","content":"","keywords":"","version":"dev"},{"title":"Java‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // ÂèØË¢´ python Èõ∂Êã∑Ë¥ùËØªÂèñ BinaryRow binaryRow = encoder.toRow(foo); // ‰πüÂèØ‰ª•ÊòØ python ÁîüÊàêÁöÑÊï∞ÊçÆ Foo newFoo = encoder.fromRow(binaryRow); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` ÁöÑÁ¨¨ 11 ‰∏™ÂÖÉÁ¥† BinaryRow barStruct = binaryArray4.getStruct(10); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` Á¨¨ 11 ‰∏™ÂÖÉÁ¥†ÁöÑ f2 ÁöÑÁ¨¨ 6 ‰∏™ÂÖÉÁ¥† barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // Âè™ÂèçÂ∫èÂàóÂåñÈÉ®ÂàÜÊï∞ÊçÆ Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"dev","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"dev","tagName":"h2"},{"title":"Apache Arrow ÊîØÊåÅ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#apache-arrow-ÊîØÊåÅ","content":" Fory Format ‰πüÊîØÊåÅ‰∏é Arrow Table/RecordBatch ÁöÑËá™Âä®ËΩ¨Êç¢„ÄÇ  Java Á§∫‰æãÔºö  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"dev","tagName":"h3"},{"title":"ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã","content":" Fury Áé∞Â∑≤ÊîØÊåÅ Java interface Á±ªÂûãÂíåÂ≠êÁ±ªÔºàextendsÔºâÁ±ªÂûãÁöÑË°åÊ†ºÂºèÊò†Â∞ÑÔºåÂ∏¶Êù•Êõ¥Âä®ÊÄÅÂíåÁÅµÊ¥ªÁöÑÊï∞ÊçÆ schema„ÄÇ  Áõ∏ÂÖ≥Â¢ûÂº∫ËßÅ #2243„ÄÅ#2250„ÄÅ#2256„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Á§∫‰æãÔºöÊé•Âè£Á±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#Á§∫‰æãÊé•Âè£Á±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // ‰ΩøÁî® RowEncoder ‰ª•Êé•Âè£Á±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"dev","tagName":"h3"},{"title":"Á§∫‰æãÔºöÁªßÊâøÁ±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/next/docs/guide/row_format_guide#Á§∫‰æãÁªßÊâøÁ±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // ‰ΩøÁî® RowEncoder ‰ª•Áà∂Á±ªÁ±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python Á§∫‰æãÔºö  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++ Á§∫‰æãÔºö  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"dev","tagName":"h3"},{"title":"Scala Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/scala_guide","content":"","keywords":"","version":"dev"},{"title":"ÂÆâË£Ö‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#ÂÆâË£Ö","content":" Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 2 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.12.0&quot;   Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 3 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.12.0&quot;   ","version":"dev","tagName":"h2"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Âø´ÈÄüÂºÄÂßã","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"dev","tagName":"h2"},{"title":"Fory ÂÆû‰æãÂàõÂª∫‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#fory-ÂÆû‰æãÂàõÂª∫","content":" Âú®‰ΩøÁî® fory ËøõË°å Scala Â∫èÂàóÂåñÊó∂ÔºåÂª∫ËÆÆËá≥Â∞ë‰ª•Â¶Ç‰∏ãÊñπÂºèÂàõÂª∫ fory ÂÆû‰æãÔºö  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory)   Ê†πÊçÆ‰Ω†ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÂØπË±°Á±ªÂûãÔºåÂèØËÉΩËøòÈúÄË¶ÅÊ≥®ÂÜå‰∏Ä‰∫õ Scala ÂÜÖÈÉ®Á±ªÂûãÔºö  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   Â¶ÇÊûú‰Ω†Â∏åÊúõÈÅøÂÖçÊâãÂä®Ê≥®ÂÜåËøô‰∫õÁ±ªÂûãÔºåÂèØ‰ª•ÈÄöËøá ForyBuilder#requireClassRegistration(false) ÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂäüËÉΩ„ÄÇ Ê≥®ÊÑèÔºöÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂêéÔºåÂèØ‰ª•ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÁöÑÂØπË±°ÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ¶ÇÊûúÂèçÂ∫èÂàóÂåñÁöÑÁ±ªÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ  Scala ‰∏≠Âæ™ÁéØÂºïÁî®ËæÉ‰∏∫Â∏∏ËßÅÔºåÂª∫ËÆÆÈÄöËøá ForyBuilder#withRefTracking(true) ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºàReference trackingÔºâ„ÄÇÂ¶ÇÊûúÊú™ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂú®Êüê‰∫õ Scala ÁâàÊú¨‰∏ãÂ∫èÂàóÂåñ Scala Enumeration Êó∂ÔºåÂèØËÉΩ‰ºöÂá∫Áé∞ StackOverflowError„ÄÇ  Ê≥®ÊÑèÔºöfory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÊìç‰ΩúÈó¥Â§çÁî®Ôºåfory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ß„ÄÇ  Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂú®Â§öÁ∫øÁ®ãÁéØÂ¢É‰∏ãÂÖ±‰∫´ fory ÂÆû‰æãÔºåÂ∫îÈÄöËøá ForyBuilder#buildThreadSafeFory() ÂàõÂª∫ ThreadSafeFory ÂÆû‰æã„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñ case class‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-case-class","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñ pojo‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñ object Âçï‰æãÂØπË±°‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-object-Âçï‰æãÂØπË±°","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñÈõÜÂêàÔºàCollectionÔºâ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñÈõÜÂêàcollection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Tuple‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-tuple","content":" val tuple = Tuple2(100, 10000L) println(fory.deserialize(fory.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fory.deserialize(fory.serialize(tuple)))   ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-enum","content":" ","version":"dev","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"dev","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"dev","tagName":"h3"},{"title":"Â∫èÂàóÂåñ Option‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#Â∫èÂàóÂåñ-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))   ","version":"dev","tagName":"h2"},{"title":"ÊÄßËÉΩ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/scala_guide#ÊÄßËÉΩ","content":" pojo/bean/case/object Scala ÂØπ Apache Fory JIT ÁöÑÊîØÊåÅÂæàÂ•ΩÔºåÊÄßËÉΩ‰∏é Apache Fory Java ‰∏ÄÊ†∑‰ºòÂºÇ„ÄÇ  Scala ÈõÜÂêàÂíåÊ≥õÂûã‰∏çÈÅµÂæ™ Java ÈõÜÂêàÊ°ÜÊû∂ÔºåÂπ∂‰∏îÊú™‰∏éÂΩìÂâçÂèëË°åÁâà‰∏≠ÁöÑ Apache Fory JIT ÂÆåÂÖ®ÈõÜÊàê„ÄÇÊÄßËÉΩ‰∏ç‰ºöÂÉè Java ÁöÑ Fory collections Â∫èÂàóÂåñÈÇ£‰πàÂ•Ω„ÄÇ  scala ÈõÜÂêàÁöÑÊâßË°åÂ∞ÜË∞ÉÁî® Java Â∫èÂàóÂåñ API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable Âíå Fory ObjectStream ÂÆûÁé∞„ÄÇËôΩÁÑ∂ org.apache.fory.serializer.ObjectStreamSerializer ÊØî JDK ObjectOutputStream/ObjectInputStream Âø´ÂæàÂ§öÔºå‰ΩÜÂÆÉ‰ªçÁÑ∂‰∏çÁü•ÈÅìÂ¶Ç‰Ωï‰ΩøÁî® Scala ÈõÜÂêàÊ≥õÂûã„ÄÇ  Êú™Êù•Êàë‰ª¨ËÆ°Âàí‰∏∫ Scala Á±ªÂûãÊèê‰æõÊõ¥Â§ö‰ºòÂåñÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇÁúã #682ÔºÅ  Scala ÈõÜÂêàÂ∫èÂàóÂåñÂ∑≤Âú® #1073 ÂÆåÊàê ÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåËØ∑‰ΩøÁî® Apache Fory snapshot ÁâàÊú¨„ÄÇ ","version":"dev","tagName":"h2"},{"title":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"dev"},{"title":"Á±ªÂûãÊò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/next/docs/guide/xlang_type_mapping#Á±ªÂûãÊò†Â∞Ñ","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"dev","tagName":"h2"},{"title":"Á±ªÂûã‰ø°ÊÅØÔºàÂΩìÂâçÊú™ÂÆûÁé∞Ôºâ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/next/docs/guide/xlang_type_mapping#Á±ªÂûã‰ø°ÊÅØÂΩìÂâçÊú™ÂÆûÁé∞","content":" Áî±‰∫éÂêÑËØ≠Ë®ÄÁöÑÁ±ªÂûãÁ≥ªÁªüÂ≠òÂú®Â∑ÆÂºÇÔºåÊüê‰∫õÁ±ªÂûãÊó†Ê≥ïÂÅöÂà∞‰∏Ä‰∏ÄÊò†Â∞Ñ„ÄÇ  Â¶ÇÊûúÁî®Êà∑ÂèëÁé∞Êüê‰∏ÄËØ≠Ë®ÄÁöÑÁ±ªÂûãÂú® Fory Á±ªÂûãÁ≥ªÁªü‰∏≠ÂØπÂ∫îÂ§ö‰∏™Á±ªÂûãÔºå‰æãÂ¶Ç Java ‰∏≠ÁöÑ long ÂØπÂ∫î int64/varint64/sliint64ÔºåËøôÊÑèÂë≥ÁùÄËØ•ËØ≠Ë®ÄÁº∫Â∞ëÊüê‰∫õÁ±ªÂûãÔºåÁî®Êà∑Âú®‰ΩøÁî® Fory Êó∂ÈúÄË¶ÅÈ¢ùÂ§ñÊèê‰æõÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Á±ªÂûãÊ≥®Ëß£‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/next/docs/guide/xlang_type_mapping#Á±ªÂûãÊ≥®Ëß£","content":" Â¶ÇÊûúÁ±ªÂûãÊòØÂè¶‰∏Ä‰∏™Á±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂèØ‰ª•‰∏∫Á±ªÂûãÁöÑÂ≠óÊÆµÊàñÊï¥‰∏™Á±ªÂûãÊèê‰æõÂÖÉ‰ø°ÊÅØÊèêÁ§∫„ÄÇ Ëøô‰∫õ‰ø°ÊÅØÂú®ÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠‰πüÂèØ‰ª•Êèê‰æõÔºö  JavaÔºö‰ΩøÁî® annotation„ÄÇC++Ôºö‰ΩøÁî®ÂÆèÂíåÊ®°Êùø„ÄÇGolangÔºö‰ΩøÁî® struct tag„ÄÇPythonÔºö‰ΩøÁî® typehint„ÄÇRustÔºö‰ΩøÁî®ÂÆè„ÄÇ  Á§∫‰æãÔºö  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"dev","tagName":"h2"},{"title":"Á±ªÂûãÂåÖË£ÖÂô®‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/next/docs/guide/xlang_type_mapping#Á±ªÂûãÂåÖË£ÖÂô®","content":" Â¶ÇÊûúÁ±ªÂûã‰∏çÊòØÁ±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂøÖÈ°ªÁî® Fory Á±ªÂûãÂåÖË£ÖËØ•Á±ªÂûã‰ª•‰º†ÈÄíÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ‰æãÂ¶ÇÔºåÂÅáËÆæ Fory Java Êèê‰æõ‰∫Ü VarInt64 Á±ªÂûãÔºåÂΩìÁî®Êà∑Ë∞ÉÁî® fory.serialize(long_value) Êó∂ÔºåÈúÄË¶ÅËøôÊ†∑Ë∞ÉÁî®Ôºöfory.serialize(new VarInt64(long_value))„ÄÇ ","version":"dev","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ‰ªãÁªç","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/introduction/","content":"","keywords":"","version":"dev"},{"title":"ÂçèËÆÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#ÂçèËÆÆ","content":" ‰∏çÂêåÁöÑÂú∫ÊôØÊúâ‰∏çÂêåÁöÑÂ∫èÂàóÂåñË¶ÅÊ±Ç„ÄÇApache Fory‚Ñ¢ ‰∏∫Ëøô‰∫õÈúÄÊ±ÇËÆæËÆ°Âπ∂ÂÆûÁé∞‰∫ÜÂ§ö‰∏™‰∫åËøõÂà∂ÂçèËÆÆÔºö  Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂçèËÆÆÔºö Ë∑®ËØ≠Ë®ÄËá™Âä®Â∫èÂàóÂåñ‰ªª‰ΩïÂØπË±°ÔºåÊó†ÈúÄ IDL ÂÆö‰πâ„ÄÅSchemaÁºñËØëÂíåÂØπË±°ÂçèËÆÆËΩ¨Êç¢ÔºõÊîØÊåÅÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÔºåÊó†ÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØÔºõÂéüÁîüÊîØÊåÅÂØπË±°Â§öÊÄÅ„ÄÇ ÂéüÁîü java/python ÂØπË±°ÂõæÂçèËÆÆÔºöÂü∫‰∫éÂçï‰∏ÄËØ≠Ë®ÄÁöÑÂÆåÊï¥Á±ªÂûãÁ≥ªÁªüËøõË°åÈ´òÂ∫¶‰ºòÂåñÔºõË°åÊ†ºÂºèÂçèËÆÆÔºöÁºìÂ≠òÂèãÂ•ΩÁöÑ‰∫åËøõÂà∂ÈöèÊú∫ËÆøÈóÆÊ†ºÂºèÔºåÊîØÊåÅË∑≥ËøáÂ∫èÂàóÂåñÂíåÈÉ®ÂàÜÂ∫èÂàóÂåñÔºåÂπ∂‰∏îÂèØ‰ª•Ëá™Âä®ËΩ¨Êç¢‰∏∫ÂàóÊ†ºÂºè„ÄÇ  Âü∫‰∫é fory Áé∞ÊúâÁöÑ buffer„ÄÅencoding„ÄÅmeta„ÄÅcodegen ÂíåÂÖ∂‰ªñÂäüËÉΩÔºåÂèØ‰ª•ËΩªÊùæÊ∑ªÂä†Êñ∞ÂçèËÆÆ„ÄÇÊâÄÊúâËøô‰∫õÂçèËÆÆÈÉΩÂÖ±‰∫´Áõ∏ÂêåÁöÑ‰ª£Á†ÅÂ∫ìÔºåÂπ∂‰∏î‰∏Ä‰∏™ÂçèËÆÆÁöÑ‰ºòÂåñÂèØ‰ª•Ë¢´Âè¶‰∏Ä‰∏™ÂçèËÆÆÈáçÁî®„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#ÂÖºÂÆπÊÄß","content":" ","version":"dev","tagName":"h2"},{"title":"SchemaÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#schemaÂÖºÂÆπÊÄß","content":" Apache Fory java ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÁ±ªÊû∂ÊûÑÂêëÂâç/ÂêëÂêéÂÖºÂÆπ„ÄÇÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂèØ‰ª•Áã¨Á´ãÊ∑ªÂä†/Âà†Èô§Â≠óÊÆµ„ÄÇ  Êàë‰ª¨ËÆ°ÂàíÂú®ÂÖÉÊï∞ÊçÆÂéãÁº©ÂÆåÊàêÂêéÊîØÊåÅË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñSchemaÂÖºÂÆπÊÄß„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"‰∫åËøõÂà∂ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#‰∫åËøõÂà∂ÂÖºÂÆπÊÄß","content":" Êàë‰ª¨‰ªçÂú®ÊîπËøõÊàë‰ª¨ÁöÑÂçèËÆÆÔºåÁõÆÂâçÊó†Ê≥ïÁ°Æ‰øù fory ÁâàÊú¨‰πãÈó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇÂ¶ÇÊûúÊÇ®Â∞ÜÊù•Ë¶ÅÂçáÁ∫ß foryÔºåËØ∑ shade fory„ÄÇ  Âú® fory 1.0 ‰πãÂâçÂ∞ÜÁ°Æ‰øù‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂÆâÂÖ®‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#ÂÆâÂÖ®","content":" ÈùôÊÄÅÂ∫èÂàóÂåñÔºàÂ¶ÇË°åÊ†ºÂºèÔºâÊú¨Ë¥®‰∏äÊòØÂÆâÂÖ®ÁöÑ„ÄÇ‰ΩÜÂä®ÊÄÅÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÂèçÂ∫èÂàóÂåñÊú™Ê≥®ÂÜåÁöÑÁ±ªÂûãÔºåËøôÂèØËÉΩ‰ºöÂ∏¶Êù•ÂÆâÂÖ®È£éÈô©„ÄÇ  ‰æãÂ¶ÇÔºöÂèçÂ∫èÂàóÂåñÂèØËÉΩ‰ºöË∞ÉÁî® init constructor Êàñ equals/ hashCode ÊñπÊ≥ïÔºåÂ¶ÇÊûúÊñπÊ≥ï‰Ωì‰∏≠ÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÁ≥ªÁªüÂ∞ÜÂ§Ñ‰∫éÂç±Èô©‰πã‰∏≠„ÄÇ  Apache Fory Êèê‰æõ‰∫Ü‰∏Ä‰∏™Á±ªÊ≥®ÂÜåÈÄâÈ°πÔºåÂπ∂ÈªòËÆ§ÂºÄÂêØËØ•ÈÄâÈ°πÔºåÂÆÉÂè™ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÂèó‰ø°‰ªªÁöÑÊ≥®ÂÜåÁ±ªÂûãÊàñÂÜÖÁΩÆÁ±ªÂûã„ÄÇ‰∏çË¶ÅÁ¶ÅÁî®Á±ªÊ≥®ÂÜåÊàñÁ±ªÊ≥®ÂÜåÊ£ÄÊü•ÔºåÈô§ÈùûÊÇ®ÂèØ‰ª•Á°Æ‰øùÊÇ®ÁöÑÁéØÂ¢ÉÁ°ÆÂÆûÊòØÂÆâÂÖ®ÁöÑ„ÄÇÂ¶ÇÊûúÊÇ®Á¶ÅÁî®‰∫Ü class Ê≥®ÂÜåÈÄâÈ°πÔºå‰Ω†ÈúÄË¶ÅËá™Ë°åË¥üË¥£Â∫èÂàóÂåñÁöÑÂÆâÂÖ®ÊÄß„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Ë∑ØÁ∫øÂõæ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#Ë∑ØÁ∫øÂõæ","content":" ÂÖÉÂéãÁº©„ÄÅËá™Âä®ÂÖÉÂÖ±‰∫´ÂíåË∑®ËØ≠Ë®ÄÂÖºÂÆπÊÄßÔºõÁî®‰∫é c++/golang ÁöÑ AOT Ê°ÜÊû∂ÔºåÁî®‰∫éÈùôÊÄÅÁîüÊàê‰ª£Á†ÅÔºõC++/Rust ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÔºõGolang/Rust/NodeJS Ë°åÂ≠òÊ†ºÂºèÊîØÊåÅÔºõProtoBuffer ÂÖºÂÆπÊÄßÊîØÊåÅÔºõÁâπÂæÅÂíåÊ®°ÂûãÂ∫èÂàóÂåñÂçèËÆÆÔºõ‰∏çÊñ≠ÊîπËøõÊàë‰ª¨ÁöÑÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩÔºå‰ª•Êõ¥Âø´ÊîØÊåÅ‰ªª‰ΩïÊñ∞ÁöÑÂçèËÆÆ„ÄÇ  ","version":"dev","tagName":"h2"},{"title":"Â¶Ç‰ΩïË¥°ÁåÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/next/docs/introduction/#Â¶Ç‰ΩïË¥°ÁåÆ","content":" ËØ∑ÈòÖËØªË¥°ÁåÆÊåáÂçó‰ª•Ëé∑ÂèñÊúâÂÖ≥Â¶Ç‰ΩïË¥°ÁåÆÁöÑËØ¥Êòé„ÄÇ ","version":"dev","tagName":"h2"},{"title":"Features","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/introduction/features","content":"Features Â§öÁßçËØ≠Ë®ÄÔºöJava/Python/C++/Golang/Javascript/Rust„ÄÇÈõ∂Êã∑Ë¥ùÔºöÁ±ª‰ººpickle5ÔºåÊîØÊåÅÂ†ÜÂ§ñËØª/ÂÜôÁöÑË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ„ÄÇÈ´òÊÄßËÉΩÔºöÈ´òÂ∫¶ÂèØÊâ©Â±ïÁöÑ JIT Ê°ÜÊû∂ÔºåÂèØÂú®ËøêË°åÊó∂‰ª•ÂºÇÊ≠•Â§öÁ∫øÁ®ãÊñπÂºèÁîüÊàêÂ∫èÂàóÂåñÁ®ãÂ∫è‰ª£Á†ÅÔºå‰ª•Âä†Âø´Â∫èÂàóÂåñÈÄüÂ∫¶ÔºåÈÄöËøá‰ª•‰∏ãÊñπÂºèÊèêÂçá 20-170 ÂÄçÁöÑÈÄüÂ∫¶Ôºö ÂáèÂ∞ëÂú®ÁîüÊàê‰ª£Á†Å‰∏≠ÂÜÖËÅîÂèòÈáèÂáèÂ∞ëÂÜÖÂ≠òËÆøÈóÆÔºõÈÄöËøáÂú®ÁîüÊàêÁöÑ‰ª£Á†Å‰∏≠ÂÜÖËÅîË∞ÉÁî®Êù•ÂáèÂ∞ëËôöÊãüÊñπÊ≥ïË∞ÉÁî®ÔºõÂáèÂ∞ëÊù°‰ª∂ÂàÜÊîØÔºõÂáèÂ∞ëÂìàÂ∏åÊü•ÊâæÔºõ ‰∫åËøõÂà∂ÂçèËÆÆÔºöÂØπË±°Âõæ„ÄÅË°åÊ†ºÂºèÁ≠â„ÄÇ Èô§‰∫ÜË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‰πãÂ§ñÔºåApache Fory‚Ñ¢ ËøòÊîØÊåÅ‰ª•‰∏ãÂäüËÉΩÔºö Áõ¥Êé•ÊõøÊç¢ Java Â∫èÂàóÂåñÊ°ÜÊû∂ÔºåÂ¶Ç JDK/Kryo/HessianÔºåÊó†ÈúÄ‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºå‰ΩÜÈÄüÂ∫¶ÊèêÈ´ò 100 ÂÄç„ÄÇÂÆÉÂèØ‰ª•Â§ßÂ§ßÊèêÈ´ò RPC Ë∞ÉÁî®ÊÄßËÉΩ„ÄÅÊï∞ÊçÆ‰º†ËæìÂíåÂØπË±°ÊåÅ‰πÖÂåñÁöÑÊïàÁéáÔºõJDK Â∫èÂàóÂåñ 100% ÂÖºÂÆπÔºåÂéüÁîüÊîØÊåÅ java Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ writeObject/readObject/writeReplace/readResolve/readObjectNoDataÔºõÊîØÊåÅ golang ÁöÑÂÖ±‰∫´ÂíåÂæ™ÁéØÂºïÁî®ÂØπË±°Â∫èÂàóÂåñÔºõÊîØÊåÅ golang ÁöÑËá™Âä®ÂØπË±°Â∫èÂàóÂåñ„ÄÇ","keywords":"","version":"dev"},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/introduction/benchmark","content":"","keywords":"","version":"dev"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/next/docs/introduction/benchmark#java-Â∫èÂàóÂåñ","content":"         ","version":"dev","tagName":"h3"},{"title":"Java ÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/next/docs/introduction/benchmark#java-ÂèçÂ∫èÂàóÂåñ","content":"         ÊúâÂÖ≥Á±ªÂûãÂêëÂâç/ÂêëÂêéÂÖºÂÆπÊÄß„ÄÅÂ†ÜÂ§ñÊîØÊåÅ„ÄÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÁöÑÊõ¥Â§ö benchmark ÊµãËØïÔºåËØ∑ÂèÇËßÅbenchmarks  ","version":"dev","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/next/docs/introduction/benchmark#javascript","content":"   ËØ•Êù°ÂΩ¢Âõæ‰ΩøÁî®ÁöÑÊï∞ÊçÆÂåÖÊã¨‰∏Ä‰∏™ÂÖ∑ÊúâÂ§öÁßçÂ≠óÊÆµÁ±ªÂûãÁöÑÂ§çÊùÇÂØπË±°ÔºåJSON Êï∞ÊçÆÁöÑÂ§ßÂ∞è‰∏∫ 3KB„ÄÇ  ËØ∑ÂèÇÈòÖbenchmarks benchmark ÊµãËØï‰ª£Á†Å„ÄÇ ","version":"dev","tagName":"h3"},{"title":"ÂÆâË£Ö Apache Fory‚Ñ¢","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/start/install","content":"","keywords":"","version":"dev"},{"title":"Apache Fory‚Ñ¢ Java ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/docs/start/install#apache-fory-java-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä†ÂØπ Apache Fory‚Ñ¢ ÁöÑ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-core&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- row/arrow format support --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-format&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt; --&gt;   ","version":"dev","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ Scala ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/docs/start/install#apache-fory-scala-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_2.13&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_3&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.12.3&quot;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.12.3&quot;   ","version":"dev","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ Kotlin ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory‚Ñ¢","url":"/zh-CN/docs/next/docs/start/install#apache-fory-kotlin-ÂÆâË£Ö","content":" To add a dependency on Apache Fory‚Ñ¢kotlin with maven, use the following:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-kotlin&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;  ","version":"dev","tagName":"h2"},{"title":"Development","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/development","content":"","keywords":"","version":"dev"},{"title":"How to build Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#how-to-build-apache-fory","content":" Please checkout the source tree from https://github.com/apache/fory.  ","version":"dev","tagName":"h2"},{"title":"Build Apache Fory‚Ñ¢ Java‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-java","content":" cd java mvn clean compile -DskipTests   Environment Requirements‚Äã  java 1.8+maven 3.6.3+  ","version":"dev","tagName":"h3"},{"title":"Build Apache Fory‚Ñ¢ Python‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-python","content":" cd python # Uninstall numpy first so that when we install pyarrow, it will install the correct numpy version automatically. # For Python versions less than 3.13, numpy 2 is not currently supported. pip uninstall -y numpy # Install necessary environment for Python &lt; 3.13. pip install pyarrow==15.0.0 Cython wheel pytest # For Python 3.13, pyarrow 18.0.0 is available and requires numpy version greater than 2. # pip install pyarrow==18.0.0 Cython wheel pytest pip install -v -e .   Environment Requirements‚Äã  python 3.6+  ","version":"dev","tagName":"h3"},{"title":"Build Apache Fory‚Ñ¢ C++‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==15.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==15.0.0 bazel build //cpp/fory/encoder:fory_encoder   Environment Requirements‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"dev","tagName":"h3"},{"title":"Build Apache Fory‚Ñ¢ GoLang‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Environment Requirements‚Äã  go 1.13+  ","version":"dev","tagName":"h3"},{"title":"Build Apache Fory‚Ñ¢ Rust‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-rust","content":" cd rust # build cargo build # run test cargo test   Environment Requirements‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"dev","tagName":"h3"},{"title":"Build Apache Fory‚Ñ¢ JavaScript‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#build-apache-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Environment Requirements‚Äã  node 14+npm 8+  ","version":"dev","tagName":"h3"},{"title":"Lint Markdown Docs‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#lint-markdown-docs","content":" # Install prettier globally npm install -g prettier # Fix markdown files prettier --write &quot;**/*.md&quot;   Environment Requirements‚Äã  node 14+npm 8+  ","version":"dev","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"Development","url":"/zh-CN/docs/next/guide/development#contributing","content":" For more information, please refer to How to contribute to Apache Fory‚Ñ¢. ","version":"dev","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ‰ΩøÁî®","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/start/usage","content":"","keywords":"","version":"dev"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#java-Â∫èÂàóÂåñ","content":" import java.util.List; import java.util.Arrays; import io.fory.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. Fory fory = Fory.builder().withLanguage(Language.JAVA) // Allow to deserialize objects unknown types, // more flexible but less secure. // .requireClassRegistration(false) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If secure mode enabled, all custom types must be registered. fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"dev","tagName":"h2"},{"title":"ScalaÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#scalaÂ∫èÂàóÂåñ","content":" import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } } ## KotlinÂ∫èÂàóÂåñ ```kotlin import org.apache.fory.Fory import org.apache.fory.ThreadSafeFory import org.apache.fory.serializer.kotlin.KotlinSerializers data class Person(val name: String, val id: Long, val github: String) data class Point(val x : Int, val y : Int, val z : Int) fun main(args: Array&lt;String&gt;) { // Ê≥®ÊÑè: ‰∏ãÈù¢ÁöÑForyÂàùÂßãÂåñ‰ª£Á†ÅÂ∫îËØ•Âè™ÊâßË°å‰∏ÄÊ¨°ÔºåËÄå‰∏çÊòØÂú®ÊØèÊ¨°Â∫èÂàóÂåñÂâçÈÉΩËøêË°å val fory: ThreadSafeFory = Fory.builder().requireClassRegistration(true).buildThreadSafeFory() KotlinSerializers.registerSerializers(fory) fory.register(Person::class.java) fory.register(Point::class.java) val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) }   ","version":"dev","tagName":"h2"},{"title":"Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#Ë∑®ËØ≠ÔøΩË®ÄÂ∫èÂàóÂåñ","content":" ","version":"dev","tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#java","content":" import com.google.common.collect.ImmutableMap; import io.fory.*; import java.util.Map; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ImmutableMap.of(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;io.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); ; } }   ","version":"dev","tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#python","content":" from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_class(SomeClass, &quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   ","version":"dev","tagName":"h3"},{"title":"Golangs‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#golangs","content":" package main import ( &quot;fmt&quot; forygo &quot;github.com/apache/fory/go/fory&quot; ) func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   ","version":"dev","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#javascript","content":" import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   ","version":"dev","tagName":"h3"},{"title":"Rust‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/next/docs/start/usage#rust","content":" use fory::{from_buffer, to_buffer, Fory}; #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Animal { name: String, category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.bar&quot;)] struct Person { name: String, age: u32, pets: Vec&lt;Animal&gt;, } fn main() { let penson = Person { name: &quot;hello&quot;.to_string(), age: 12, pets: vec![ Animal { name: &quot;world1&quot;.to_string(), category: &quot;cat&quot;.to_string(), }, Animal { name: &quot;world2&quot;.to_string(), category: &quot;dog&quot;.to_string(), }, ], }; let bin = to_buffer(&amp;penson); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(obj, penson); }  ","version":"dev","tagName":"h3"},{"title":"Java Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"dev"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Âø´ÈÄüÂºÄÂßã","content":" Ê≥®ÊÑèÔºåFory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ßÔºåFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî®ÔºåËÄå‰∏çÊòØÊØèÊ¨°ÈÉΩÊñ∞Âª∫„ÄÇ Âª∫ËÆÆÂ∞Ü Fory ‰øùÂ≠òÂú®ÈùôÊÄÅÂÖ®Â±ÄÂèòÈáè„ÄÅÂçï‰æãÂØπË±°ÊàñÊúâÈôêÊï∞ÈáèÁöÑÂÆû‰æãÂèòÈáè‰∏≠„ÄÇ  ÂçïÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Ê≥®ÂÜåÁ±ªÂûãÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄÔºå‰ΩÜ‰∏çÊòØÂº∫Âà∂ÁöÑ„ÄÇ // ÂêØÁî®Á±ªÊ≥®ÂÜåÂêéÔºåÊâÄÊúâËá™ÂÆö‰πâÁ±ªÂûãÈÉΩÂøÖÈ°ªÊ≥®ÂÜå„ÄÇ fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Â§öÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory ÂÆû‰æãÂ§çÁî®Á§∫‰æãÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // Â§çÁî® fory ÂÆû‰æã private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"dev","tagName":"h2"},{"title":"ForyBuilder ÈÖçÁΩÆÈÄâÈ°π‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#forybuilder-ÈÖçÁΩÆÈÄâÈ°π","content":" ÈÄâÈ°πÂêç\tËØ¥Êòé\tÈªòËÆ§ÂÄºtimeRefIgnored\tÊòØÂê¶ÂøΩÁï•ÊâÄÊúâÂú® TimeSerializers Ê≥®ÂÜåÁöÑÊó∂Èó¥Á±ªÂûãÂèäÂÖ∂Â≠êÁ±ªÁöÑÂºïÁî®Ë∑üË∏™ÔºàÂΩìÂºïÁî®Ë∑üË∏™ÂºÄÂêØÊó∂Ôºâ„ÄÇÂ¶ÇÈúÄÂØπÊó∂Èó¥Á±ªÂûãÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂèØÈÄöËøá Fory#registerSerializer(Class, Serializer) Ê≥®ÂÜå„ÄÇ‰æãÂ¶ÇÔºöfory.registerSerializer(Date.class, new DateSerializer(fory, true))„ÄÇÊ≥®ÊÑèÔºåÂêØÁî®ÂºïÁî®Ë∑üË∏™ÈúÄÂú®ÂåÖÂê´Êó∂Èó¥Â≠óÊÆµÁöÑÁ±ªÂûã‰ª£Á†ÅÁîüÊàêÂâçÂÆåÊàêÔºåÂê¶ÂàôËøô‰∫õÂ≠óÊÆµ‰ªç‰ºöË∑≥ËøáÂºïÁî®Ë∑üË∏™„ÄÇ\ttrue compressInt\tÊòØÂê¶ÂêØÁî® int ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressLong\tÊòØÂê¶ÂêØÁî® long ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressString\tÊòØÂê¶ÂêØÁî®Â≠óÁ¨¶‰∏≤ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\tfalse classLoader\tÁ±ªÂä†ËΩΩÂô®‰∏çÂª∫ËÆÆÂä®ÊÄÅÂèòÊõ¥ÔºåFory ‰ºöÁºìÂ≠òÁ±ªÂÖÉÊï∞ÊçÆ„ÄÇÂ¶ÇÈúÄÂèòÊõ¥Á±ªÂä†ËΩΩÂô®ÔºåËØ∑‰ΩøÁî® LoaderBinding Êàñ ThreadSafeFory„ÄÇ\tThread.currentThread().getContextClassLoader() compatibleMode\tÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπÊÄßÈÖçÁΩÆ„ÄÇ‰∏é checkClassVersion ÈÖçÁΩÆÁõ∏ÂÖ≥„ÄÇSCHEMA_CONSISTENTÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÈúÄ‰∏ÄËá¥„ÄÇCOMPATIBLEÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÂèØ‰∏çÂêåÔºåÂèØÁã¨Á´ãÂ¢ûÂà†Â≠óÊÆµ„ÄÇËØ¶ËßÅ„ÄÇ\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tÊòØÂê¶Ê†°È™åÁ±ªÁªìÊûÑ‰∏ÄËá¥ÊÄß„ÄÇÂêØÁî®ÂêéÔºåFory ‰ºöÂÜôÂÖ•Âπ∂Ê†°È™å classVersionHash„ÄÇËã•ÂêØÁî® CompatibleMode#COMPATIBLEÔºåÊ≠§È°π‰ºöËá™Âä®ÂÖ≥Èó≠„ÄÇÈô§ÈùûËÉΩÁ°Æ‰øùÁ±ª‰∏ç‰ºöÊºîÂåñÔºåÂê¶Âàô‰∏çÂª∫ËÆÆÂÖ≥Èó≠„ÄÇ\tfalse checkJdkClassSerializable\tÊòØÂê¶Ê†°È™å java.* ‰∏ãÁöÑÁ±ªÂÆûÁé∞‰∫Ü Serializable Êé•Âè£„ÄÇËã•Êú™ÂÆûÁé∞ÔºåFory ‰ºöÊäõÂá∫ UnsupportedOperationException„ÄÇ\ttrue registerGuavaTypes\tÊòØÂê¶È¢ÑÊ≥®ÂÜå Guava Á±ªÂûãÔºàÂ¶Ç RegularImmutableMap/RegularImmutableListÔºâ„ÄÇËøô‰∫õÁ±ªÂûãËôΩÈùûÂÖ¨ÂºÄ APIÔºå‰ΩÜËæÉ‰∏∫Á®≥ÂÆö„ÄÇ\ttrue requireClassRegistration\tÂÖ≥Èó≠ÂêéÂèØÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ\ttrue suppressClassRegistrationWarnings\tÊòØÂê¶Â±èËîΩÁ±ªÊ≥®ÂÜåË≠¶Âëä„ÄÇË≠¶ÂëäÂèØÁî®‰∫éÂÆâÂÖ®ÂÆ°ËÆ°Ôºå‰ΩÜÂèØËÉΩÂΩ±Âìç‰ΩìÈ™åÔºåÈªòËÆ§ÂºÄÂêØÂ±èËîΩ„ÄÇ\ttrue metaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´Ê®°Âºè„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ scopedMetaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂçïÊ¨°Â∫èÂàóÂåñËåÉÂõ¥ÂÜÖÁöÑÂÖÉÊï∞ÊçÆÁã¨‰∫´„ÄÇËØ•ÂÖÉÊï∞ÊçÆ‰ªÖÂú®Êú¨Ê¨°Â∫èÂàóÂåñ‰∏≠ÊúâÊïàÔºå‰∏ç‰∏éÂÖ∂‰ªñÂ∫èÂàóÂåñÂÖ±‰∫´„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ metaCompressor\tËÆæÁΩÆÂÖÉÊï∞ÊçÆÂéãÁº©Âô®„ÄÇÈªòËÆ§‰ΩøÁî®Âü∫‰∫é Deflater ÁöÑ DeflaterMetaCompressorÔºåÂèØËá™ÂÆö‰πâÂ¶Ç zstd Á≠âÊõ¥È´òÂéãÁº©ÊØîÁöÑÂéãÁº©Âô®„ÄÇÈúÄ‰øùËØÅÁ∫øÁ®ãÂÆâÂÖ®„ÄÇ\tDeflaterMetaCompressor deserializeNonexistentClass\tÊòØÂê¶ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñ/Ë∑≥Ëøá‰∏çÂ≠òÂú®ÁöÑÁ±ªÁöÑÊï∞ÊçÆ„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ codeGenEnabled\tÊòØÂê¶ÂêØÁî®‰ª£Á†ÅÁîüÊàê„ÄÇÂÖ≥Èó≠ÂêéÈ¶ñÊ¨°Â∫èÂàóÂåñÊõ¥Âø´Ôºå‰ΩÜÂêéÁª≠Â∫èÂàóÂåñÊÄßËÉΩËæÉ‰Ωé„ÄÇ\ttrue asyncCompilationEnabled\tÊòØÂê¶ÂêØÁî®ÂºÇÊ≠•ÁºñËØë„ÄÇÂêØÁî®ÂêéÔºåÂ∫èÂàóÂåñÂÖàÁî®Ëß£ÈáäÊ®°ÂºèÔºåJIT ÂÆåÊàêÂêéÂàáÊç¢‰∏∫ JIT Ê®°Âºè„ÄÇ\tfalse scalaOptimizationEnabled\tÊòØÂê¶ÂêØÁî® Scala ÁâπÂÆö‰ºòÂåñ„ÄÇ\tfalse copyRef\tÂÖ≥Èó≠ÂêéÔºåÊ∑±Êã∑Ë¥ùÊÄßËÉΩÊõ¥Â•ΩÔºå‰ΩÜ‰ºöÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®„ÄÇÂØπË±°Âõæ‰∏≠ÁöÑÂêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°„ÄÇ\ttrue serializeEnumByName\tÂêØÁî®ÂêéÔºåÊûö‰∏æÊåâÂêçÁß∞Â∫èÂàóÂåñÔºåÂê¶ÂàôÊåâ ordinal„ÄÇ\tfalse  ","version":"dev","tagName":"h2"},{"title":"È´òÁ∫ßÁî®Ê≥ï‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#È´òÁ∫ßÁî®Ê≥ï","content":" ","version":"dev","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ÂàõÂª∫‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#apache-fory-ÂàõÂª∫","content":" ÂçïÁ∫øÁ®ã Fory Á§∫‰æãÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Á∫øÁ®ãÂÆâÂÖ® Fory Á§∫‰æãÔºö  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) // ÂêØÁî® int ÂéãÁº© // .withIntCompressed(true) // ÂêØÁî® long ÂéãÁº© // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ","version":"dev","tagName":"h3"},{"title":"Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ","content":" Âú®ÂÆûÈôÖÁ≥ªÁªü‰∏≠ÔºåÂ∫èÂàóÂåñÁî®Âà∞ÁöÑÁ±ªÁªìÊûÑÂèØËÉΩ‰ºöÈöèÊó∂Èó¥ÂèòÂåñÔºåÊØîÂ¶ÇÂ≠óÊÆµÁöÑÂ¢ûÂà†„ÄÇÂΩìÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´Ø‰ΩøÁî®‰∏çÂêåÁâàÊú¨ÁöÑ jar Êó∂ÔºåÁ±ªÁªìÊûÑÂèØËÉΩ‰∏ç‰∏ÄËá¥„ÄÇ  Fory ÈªòËÆ§ÈááÁî® CompatibleMode.SCHEMA_CONSISTENTÔºåÂç≥Ë¶ÅÊ±ÇÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ÄËá¥Ôºå‰ª•Ëé∑ÂæóÊúÄÂ∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØÂíåÊúÄÈ´òÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂèçÂ∫èÂàóÂåñ‰ºöÂ§±Ë¥•„ÄÇ  Â¶ÇÈúÄÊîØÊåÅÁ±ªÁªìÊûÑÊºîÂåñÔºàÂâçÂêë/ÂêéÂêëÂÖºÂÆπÔºâÔºåÈúÄÂ∞Ü Fory ÈÖçÁΩÆ‰∏∫ CompatibleMode.COMPATIBLEÔºåÂÖÅËÆ∏Â≠óÊÆµÂ¢ûÂà†ÔºåÂèçÂ∫èÂàóÂåñÁ´ØÂèØËá™Âä®ÈÄÇÈÖç‰∏çÂêåÁªìÊûÑ„ÄÇ  Á§∫‰æãÔºö  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ÂÖºÂÆπÊ®°Âºè‰∏ãÔºåÁ±ªÂÖÉÊï∞ÊçÆ‰ºöÂÜôÂÖ•Â∫èÂàóÂåñÁªìÊûú„ÄÇApache Fory‚Ñ¢ ÈááÁî®È´òÊïàÂéãÁº©ÁÆóÊ≥ïÈôç‰ΩéÂÖÉÊï∞ÊçÆÂºÄÈîÄÔºå‰ΩÜ‰ªç‰ºöÊúâ‰∏ÄÂÆö‰ΩìÁßØÂ¢ûÂä†„ÄÇ‰∏∫Ëøõ‰∏ÄÊ≠•Èôç‰ΩéÂÖÉÊï∞ÊçÆÊàêÊú¨ÔºåApache Fory‚Ñ¢ ÊîØÊåÅÂÖÉÊï∞ÊçÆÂÖ±‰∫´Êú∫Âà∂ÔºåËØ¶ÊÉÖËßÅMeta Sharing„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂéãÁº©‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂéãÁº©","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed ÂèØÁî®‰∫éÂéãÁº© int/long Á±ªÂûã‰ª•ÂáèÂ∞è‰ΩìÁßØ„ÄÇÈªòËÆ§Âùá‰∏∫ÂºÄÂêØ„ÄÇ  Â¶ÇÊûúÂ∫èÂàóÂåñ‰ΩìÁßØ‰∏çÊïèÊÑüÔºàÂ¶Ç‰πãÂâçÁî® flatbuffers Á≠âÊó†ÂéãÁº©Ê†ºÂºèÔºâÔºåÂª∫ËÆÆÂÖ≥Èó≠ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇÂØπ‰∫éÂÖ®‰∏∫Êï∞Â≠óÁöÑÊï∞ÊçÆÔºåÂéãÁº©ÂèØËÉΩÂ∏¶Êù• 80% ÁöÑÊÄßËÉΩÊçüÂ§±„ÄÇ  int ÂéãÁº©ÈááÁî® 1~5 Â≠óËäÇÂèòÈïøÁºñÁ†ÅÔºålong ÂéãÁº©ÊîØÊåÅ‰∏§ÁßçÊñπÂºèÔºö  SLIÔºàSmall long as intÔºåÈªòËÆ§ÔºâÔºölong Âú® [-1073741824, 1073741823] ËåÉÂõ¥ÂÜÖÁî® 4 Â≠óËäÇÁºñÁ†ÅÔºåÂê¶ÂàôÁî® 9 Â≠óËäÇ„ÄÇPVLÔºàProgressive Variable-length LongÔºâÔºöÈááÁî®ÂèòÈïøÁºñÁ†ÅÔºåË¥üÊï∞ÈÄöËøá (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ËΩ¨Êç¢„ÄÇ  Â¶Ç long Á±ªÂûãÊï∞ÊçÆÊó†Ê≥ïÊúâÊïàÂéãÁº©ÔºåÂª∫ËÆÆÂÖ≥Èó≠ long ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÂØπË±°Ê∑±Êã∑Ë¥ù‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂØπË±°Ê∑±Êã∑Ë¥ù","content":" Ê∑±Êã∑Ë¥ùÁ§∫‰æãÔºö  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Â¶ÇÈúÄÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®ÔºàÂç≥ÂØπË±°Âõæ‰∏≠Âêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°ÔºâÔºåÂèØÂÖ≥Èó≠ refCopyÔºö  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"dev","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" Êüê‰∫õÂú∫ÊôØ‰∏ãÈúÄ‰∏∫ÁâπÂÆöÁ±ªÂûãÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÔºåÂ∞§ÂÖ∂ÊòØ JDK writeObject/writeReplace/readObject/readResolve ÊñπÂºèÊïàÁéáËæÉ‰ΩéÊó∂„ÄÇÂ¶Ç‰∏ã‰æãÔºåÈÅøÂÖç Foo#writeObject Ë¢´Ë∞ÉÁî®Ôºö  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®Ôºö  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"dev","tagName":"h3"},{"title":"ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®","content":" ‰∏é Map Á±ª‰ººÔºåÂÆûÁé∞Ëá™ÂÆö‰πâ Collection Á±ªÂûãÁöÑÂ∫èÂàóÂåñÂô®Êó∂ÔºåÈúÄÁªßÊâø CollectionSerializer Êàñ AbstractCollectionSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Âú®‰∫éÔºåAbstractCollectionSerializer ÂèØÁî®‰∫éÂ∫èÂàóÂåñÁ±ª‰ººÈõÜÂêàÁªìÊûÑ‰ΩÜ‰∏çÊòØ Java Collection Â≠êÁ±ªÁöÑÁ±ªÂûã„ÄÇ  ÂØπ‰∫éÈõÜÂêàÂ∫èÂàóÂåñÂô®ÔºåÊúâ‰∏Ä‰∏™ÁâπÊÆäÂèÇÊï∞ supportCodegenHook ÈúÄË¶ÅÈÖçÁΩÆÔºö  ËÆæ‰∏∫ true Êó∂Ôºö ÂêØÁî®ÈõÜÂêàÂÖÉÁ¥†ÁöÑÈ´òÊïàËÆøÈóÆÂíå JIT ÁºñËØëÔºåÊèêÂçáÊÄßËÉΩÁõ¥Êé•Â∫èÂàóÂåñË∞ÉÁî®ÔºåÂÜÖËÅî map ÁöÑ key-valueÔºåÊó†Âä®ÊÄÅÂàÜÂèëÂºÄÈîÄÊé®ËçêÁî®‰∫éÊ†áÂáÜÈõÜÂêàÁ±ªÂûã ËÆæ‰∏∫ false Êó∂Ôºö ÈááÁî®Êé•Âè£ÊñπÂºèËÆøÈóÆÂÖÉÁ¥†ÔºåÂä®ÊÄÅÂàÜÂèëÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÈÄÇÂêàÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±ÇÁöÑËá™ÂÆö‰πâÈõÜÂêàÂèØÂ§ÑÁêÜÂ§çÊùÇÈõÜÂêàÂÆûÁé∞  ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®ÂÆûÁé∞‚Äã  ÂÆûÁé∞ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®Êó∂ÔºåÂèØÂà©Áî® Fory Áé∞ÊúâÁöÑ‰∫åËøõÂà∂Ê†ºÂºèÂíåÈõÜÂêàÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩ„ÄÇÂÖ≥ÈîÆÂú®‰∫éÊ≠£Á°ÆÂÆûÁé∞ onCollectionWrite Âíå newCollection ÊñπÊ≥ï‰ª•Â§ÑÁêÜÂÖÉÊï∞ÊçÆÔºåÂÖ∂‰ΩôÂÖÉÁ¥†Â∫èÂàóÂåñÁî± Fory Ëá™Âä®ÂÆåÊàê„ÄÇ  Á§∫‰æãÔºö  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook ÊéßÂà∂ÊòØÂê¶ÂêØÁî® JIT ÁºñËØë super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // ÂÜôÂÖ•ÈõÜÂêàÂ§ßÂ∞è buffer.writeVarUint32Small7(value.size()); // ÂèØÂÜôÂÖ•È¢ùÂ§ñÈõÜÂêàÂÖÉÊï∞ÊçÆ return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // ÂàõÂª∫Êñ∞ÈõÜÂêàÂÆû‰æã Collection collection = super.newCollection(buffer); // ËØªÂèñÂπ∂ËÆæÁΩÆÈõÜÂêàÂ§ßÂ∞è int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Ê≥®ÊÑèÔºöÂÆûÁé∞ newCollection Êó∂ÈúÄË∞ÉÁî® setNumElementsÔºå‰ª•ÂëäÁü• Fory ÂèçÂ∫èÂàóÂåñÂ§öÂ∞ëÂÖÉÁ¥†„ÄÇ  ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâÈõÜÂêàÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄÂ∫èÂàóÂåñÂ∫ïÂ±Ç‰∏∫ÂéüÂßãÊï∞ÁªÑÊàñÊúâÁâπÊÆäÈúÄÊ±ÇÁöÑÈõÜÂêàÁ±ªÂûãÔºåÊ≠§Êó∂ÂèØÁ¶ÅÁî® JITÔºåÁõ¥Êé•ÈáçÂÜô write Âíå read ÊñπÊ≥ï„ÄÇ  ËøôÁßçÊñπÂºèÔºö  ÂÆåÂÖ®ÊéßÂà∂Â∫èÂàóÂåñÊ†ºÂºèÈÄÇÂêàÂéüÂßãÊï∞ÁªÑË∑≥ËøáÈõÜÂêàËø≠‰ª£ÂºÄÈîÄÂèØÁõ¥Êé•ÂÜÖÂ≠òËÆøÈóÆ  Á§∫‰æãÔºàÂéüÂßã int Êï∞ÁªÑÔºâÔºö  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public void set(int index, int value) { if (index &gt;= size) throw new IndexOutOfBoundsException(); elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends AbstractCollectionSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Á¶ÅÁî® JITÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { buffer.writeVarUint32Small7(value.size()); int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { int size = buffer.readVarUint32Small7(); int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // JIT Á¶ÅÁî®Êó∂‰ª•‰∏ãÊñπÊ≥ï‰∏ç‰ΩøÁî® @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  ÂéüÂßãÊï∞ÁªÑÂ≠òÂÇ®ÔºöÁõ¥Êé•Áî® int[]ÔºåÈÅøÂÖçË£ÖÁÆ±/ÊãÜÁÆ±ÔºåÂÜÖÂ≠òÂ∏ÉÂ±ÄÈ´òÊïà„ÄÇÁõ¥Êé•Â∫èÂàóÂåñÔºöÂÖàÂÜô sizeÔºåÂÜçÂÜôÂéüÂßãÂÄºÔºåÊó†ÈúÄËø≠‰ª£ÔºåÊó†Ë£ÖÁÆ±/ÊãÜÁÆ±„ÄÇÁõ¥Êé•ÂèçÂ∫èÂàóÂåñÔºöÂÖàËØª sizeÔºåÂÜçËØªÂéüÂßãÂÄºÂ°´ÂÖÖÊï∞ÁªÑÔºåÊúÄÂêéÊûÑÈÄ†ÂØπË±°„ÄÇÁ¶ÅÁî® JITÔºösupportCodegenHook=falseÔºåÈáçÂÜô write/readÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÊ†ºÂºè„ÄÇ  ÈÄÇÁî®Âú∫ÊôØÔºö  Âè™Â§ÑÁêÜÂéüÂßãÁ±ªÂûãÊÄßËÉΩÊûÅËá¥Ë¶ÅÊ±ÇÈúÄÊúÄÂ∞èÂÜÖÂ≠òÂºÄÈîÄÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±Ç  ‰ΩøÁî®Á§∫‰æãÔºö  IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); byte[] bytes = fory.serialize(list); IntList newList = (IntList) fory.deserialize(bytes);   ËôΩÁÑ∂ÊîæÂºÉ‰∫Ü Fory ÁöÑÈÉ®ÂàÜ‰ºòÂåñÔºå‰ΩÜÂØπÂéüÂßãÁ±ªÂûãÂíåÁõ¥Êé•Êï∞ÁªÑËÆøÈóÆÂú∫ÊôØÊÄßËÉΩÊûÅÈ´ò„ÄÇ  ÂÆûÁé∞ collection-like Á±ªÂûãÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄ‰∏∫Á±ª‰ººÈõÜÂêà‰ΩÜÈùûÊ†áÂáÜ Java Collection ÁöÑÁ±ªÂûãÂÆûÁé∞Â∫èÂàóÂåñÂô®„ÄÇÂéüÂàôÂ¶Ç‰∏ãÔºö  ÁªßÊâø AbstractCollectionSerializerÂêØÁî® JIT ‰ºòÂåñÔºàsupportCodegenHook=trueÔºâÈÄöËøáËßÜÂõæÁ±ªÈ´òÊïàËÆøÈóÆÂÖÉÁ¥†Ê≠£Á°ÆÁÆ°ÁêÜ size  Á§∫‰æãÔºö  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) throw new IllegalStateException(&quot;Collection is full&quot;); elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends AbstractCollectionSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  Êï∞ÁªÑÂ≠òÂÇ®ÔºåÂÆöÈïøÔºåÁõ¥Êé•ËÆøÈóÆËßÜÂõæÁ±ªÁªßÊâø AbstractCollectionÔºåÂÆûÁé∞Ëø≠‰ª£Âíå addÊîØÊåÅ JIT ‰ºòÂåñÔºåÊï∞ÁªÑÈõ∂Êã∑Ë¥ùÊÄßËÉΩ‰ºòÂÖàÔºåÁÅµÊ¥ªÊÄßÁï•‰Ωé    Â¶ÇÈúÄÁªßÁª≠Ë°•ÂÖÖ map-like Á±ªÂûã„ÄÅÊ≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®„ÄÅExternalizable ÊîØÊåÅÁ≠âÂÜÖÂÆπÔºåËØ∑ÂõûÂ§ç&quot;ÁªßÁª≠&quot;ÔºÅ  ","version":"dev","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâ-map-Â∫èÂàóÂåñÂô®","content":" Ëá™ÂÆö‰πâ Map Á±ªÂûãÂ∫èÂàóÂåñÂô®ÈúÄÁªßÊâø MapSerializer Êàñ AbstractMapSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Á±ª‰ººÈõÜÂêàÂ∫èÂàóÂåñÂô®„ÄÇ  supportCodegenHook=trueÔºöÊé®ËçêÁî®‰∫éÊ†áÂáÜ MapÔºåÊîØÊåÅ JIT ‰ºòÂåñsupportCodegenHook=falseÔºöÈÄÇÂêàÁâπÊÆäÈúÄÊ±ÇÔºåÈúÄÊâãÂä®ÂÆûÁé∞Â∫èÂàóÂåñÈÄªËæë  ÊîØÊåÅ JIT ÁöÑ Map Â∫èÂàóÂåñÂô®Á§∫‰æã‚Äã  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { buffer.writeVarUint32Small7(value.size()); return value; } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new HashMap(numElements); } }   ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã  ÈÄÇÁî®‰∫éÊúâÁâπÊÆäÂ≠óÊÆµÊàñËá™ÂÆö‰πâ‰∫åËøõÂà∂Ê†ºÂºèÁöÑ Map Á±ªÂûã„ÄÇ  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { // ... ÁúÅÁï•ÂÆûÁé∞ ... } class FixedValueMapSerializer extends AbstractMapSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { buffer.writeInt32(value.getFixedValue()); buffer.writeVarUint32Small7(value.getKeys().size()); for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { int fixedValue = buffer.readInt32(); int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   ","version":"dev","tagName":"h3"},{"title":"Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" ÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÂêéÔºåÈúÄÈÄöËøáÂ¶Ç‰∏ãÊñπÂºèÊ≥®ÂÜåÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Ê≥®ÂÜå Map Â∫èÂàóÂåñÂô® fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Ê≥®ÂÜåÈõÜÂêàÂ∫èÂàóÂåñÂô® fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Ê≥®ÊÑè‰∫ãÈ°πÔºö ÂßãÁªàÁªßÊâøÂêàÈÄÇÁöÑÂü∫Á±ªÔºàMap Áî® MapSerializer/AbstractMapSerializerÔºåÈõÜÂêàÁî® CollectionSerializer/AbstractCollectionSerializerÔºâÊ†πÊçÆ supportCodegenHook ÈÄâÊã©ÊÄßËÉΩ‰∏éÁÅµÊ¥ªÊÄßÂ¶ÇÈúÄÂºïÁî®Ë∑üË∏™ÔºåÈúÄÊ≠£Á°ÆÂ§ÑÁêÜsupportCodegenHook=true Êó∂ÔºåÈúÄÁî® setNumElements/getAndClearNumElements ÁÆ°ÁêÜÂÖÉÁ¥†Êï∞Èáè  ","version":"dev","tagName":"h3"},{"title":"ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå","content":" ForyBuilder#requireClassRegistration ÂèØÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÊ†°È™åÔºåÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ª‰ΩÜÊúâÂÆâÂÖ®È£éÈô©„ÄÇ  Â¶ÇÊó†Ê≥ïÁ°Æ‰øùÁéØÂ¢ÉÂÆâÂÖ®ÔºåÂàáÂãøÂÖ≥Èó≠Á±ªÊ≥®ÂÜå„ÄÇ ÂèçÂ∫èÂàóÂåñÊú™Áü•/‰∏çÂèó‰ø°‰ªªÁ±ªÂûãÊó∂ÔºåÊÅ∂ÊÑè‰ª£Á†ÅÂèØËÉΩÂú® init/equals/hashCode Á≠âÊñπÊ≥ï‰∏≠Ë¢´ÊâßË°å„ÄÇ  Á±ªÊ≥®ÂÜå‰∏ç‰ªÖÊèêÂçáÂÆâÂÖ®ÊÄßÔºåËøòÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄ„ÄÇÊ≥®ÂÜåÈ°∫Â∫èÈúÄ‰øùÊåÅÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´Ø‰∏ÄËá¥„ÄÇ  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   Â¶ÇÈúÄÂÖ≥Èó≠Ê≥®ÂÜåÊ†°È™åÔºåÂèØÈÄöËøá ClassResolver#setClassChecker Ëá™ÂÆö‰πâÂÖÅËÆ∏ÁöÑÁ±ªÂêçÔºö  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   Êàñ‰ΩøÁî® AllowListCheckerÔºö  AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory Êèê‰æõ‰∫Ü org.apache.fory.resolver.AllowListCheckerÔºå‰πüÂèØËá™Ë°åÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊ†°È™åÈÄªËæë„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª","content":" Êåâ id Ê≥®ÂÜåÁ±ªÊÄßËÉΩÂíå‰ΩìÁßØÊõ¥‰ºòÔºå‰ΩÜÂ¶ÇÈúÄÁÆ°ÁêÜÂ§ßÈáèÁ±ªÂûã idÔºåÂèØÁî® register(Class&lt;?&gt; cls, String namespace, String typeName) ÊåâÂêçÁß∞Ê≥®ÂÜåÔºö  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   Â¶ÇÊó†ÈáçÂêçÔºånamespace ÂèØ‰∏∫Á©∫‰ª•ÂáèÂ∞ë‰ΩìÁßØ„ÄÇ  ‰∏çÂª∫ËÆÆÁî®ÂêçÁß∞Ê≥®ÂÜåÔºåÂõ†Â∫èÂàóÂåñ‰ΩìÁßØ‰ºöÊòæËëóÂ¢ûÂä†„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÔºåÂèØÈ´òÊïàÂ§ÑÁêÜÂ§ßÂØπË±°ÊàñÁõ¥Êé•ÂÜÖÂ≠òÁºìÂÜ≤Âå∫„ÄÇÁ§∫‰æãÔºö  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂ§çÁî®Ôºå‰∏çË¶ÅÊØèÊ¨°Êñ∞Âª∫ static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"dev","tagName":"h3"},{"title":"ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºàMeta SharingÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂÖÉÊï∞ÊçÆÂÖ±‰∫´meta-sharing","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂú®Âêå‰∏Ä‰∏ä‰∏ãÊñáÔºàÂ¶Ç TCP ËøûÊé•ÔºâÂÜÖÂÖ±‰∫´Á±ªÂûãÂÖÉÊï∞ÊçÆÔºàÁ±ªÂêç„ÄÅÂ≠óÊÆµÂêç„ÄÅÊúÄÁªàÂ≠óÊÆµÁ±ªÂûãÁ≠âÔºâ„ÄÇÈ¶ñÊ¨°Â∫èÂàóÂåñÊó∂ÂÖÉÊï∞ÊçÆ‰ºöÂèëÈÄÅÂà∞ÂØπÁ´ØÔºåÂØπÁ´ØÂèØÂü∫‰∫éÂÖÉÊï∞ÊçÆÈáçÂª∫ÂèçÂ∫èÂàóÂåñÂô®ÔºåÂêéÁª≠Â∫èÂàóÂåñÊó†ÈúÄÈáçÂ§ç‰º†ËæìÂÖÉÊï∞ÊçÆÔºå‰ªéËÄåÂáèÂ∞ëÁΩëÁªúÊµÅÈáèÂπ∂Ëá™Âä®ÊîØÊåÅÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ„ÄÇ  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // Ë∑®Â∫èÂàóÂåñÂÖ±‰∫´ÂÖÉÊï∞ÊçÆ // .withMetaContextShare(true) // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"dev","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª„ÄÇÈÄöËøá ForyBuilder#deserializeNonexistentClass(true) ÂêØÁî®„ÄÇÂΩìÂêØÁî®‰∏îÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÂºÄÂêØÊó∂ÔºåFory ‰ºöÂ∞ÜËØ•Á±ªÂûãÁöÑÊï∞ÊçÆÂ≠òÂÇ®‰∏∫ Map ÁöÑÊÉ∞ÊÄßÂ≠êÁ±ªÔºåÈÅøÂÖçÂèçÂ∫èÂàóÂåñÊó∂Â°´ÂÖÖ Map ÁöÑÈáçÊéíÂºÄÈîÄÔºåÊèêÂçáÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÊï∞ÊçÆË¢´ÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™ËøõÁ®ã‰∏îËØ•Á±ªÂ≠òÂú®ÔºåÂàôÂèØÊó†ÊçüËøòÂéü‰∏∫ÂéüÁ±ªÂûãÂØπË±°„ÄÇ  Ëã•Êú™ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºåÂàôÊñ∞Á±ªÊï∞ÊçÆ‰ºöË¢´Ë∑≥ËøáÔºåËøîÂõû NonexistentSkipClass Âç†‰ΩçÂØπË±°„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"Á±ªÂûãÊò†Â∞ÑÔºàË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ù/Êò†Â∞ÑÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Á±ªÂûãÊò†Â∞ÑË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ùÊò†Â∞Ñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™Á±ªÂûãÁöÑÂØπË±°Ê∑±Êã∑Ë¥ù/Êò†Â∞Ñ‰∏∫Âè¶‰∏Ä‰∏™Á±ªÂûã„ÄÇÊ≥®ÊÑè‰∫ãÈ°πÔºö  ËØ•Êò†Â∞Ñ‰ºöÊâßË°åÊ∑±Êã∑Ë¥ùÔºåÊâÄÊúâÊò†Â∞ÑÂ≠óÊÆµ‰ºöÂÖàÂ∫èÂàóÂåñ‰∏∫‰∫åËøõÂà∂ÔºåÂÜçÂèçÂ∫èÂàóÂåñ‰∏∫ÁõÆÊ†áÁ±ªÂûã„ÄÇÊâÄÊúâÁªìÊûÑ‰ΩìÁ±ªÂûãÂøÖÈ°ªÁî®Áõ∏Âêå ID Ê≥®ÂÜåÔºåÂê¶ÂàôÊó†Ê≥ïÊ≠£Á°ÆÊò†Â∞Ñ„ÄÇÂä°ÂøÖ‰øùËØÅÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÊ≥®ÂÜåÈ°∫Â∫è‰∏ÄËá¥„ÄÇ  Á§∫‰æãÔºö  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"dev","tagName":"h3"},{"title":"ËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ËøÅÁßª","content":" ","version":"dev","tagName":"h2"},{"title":"JDK Â∫èÂàóÂåñËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#jdk-Â∫èÂàóÂåñËøÅÁßª","content":" Â¶ÇÊûú‰πãÂâç‰ΩøÁî® JDK Â∫èÂàóÂåñÔºå‰∏îÊó†Ê≥ïÂêåÊó∂ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂíåÊúçÂä°Á´ØÔºàÂ¶ÇÁ∫ø‰∏äÂ∫îÁî®Â∏∏ËßÅÂú∫ÊôØÔºâÔºåFory Êèê‰æõ org.apache.fory.serializer.JavaSerializer.serializedByJDK Â∑•ÂÖ∑ÊñπÊ≥ïÂà§Êñ≠‰∫åËøõÂà∂Êï∞ÊçÆÊòØÂê¶‰∏∫ JDK Â∫èÂàóÂåñÁîüÊàê„ÄÇÂèØÁî®Â¶Ç‰∏ãÊ®°ÂºèÂÆûÁé∞ÂçèËÆÆÂÖºÂÆπÔºåÊîØÊåÅÂºÇÊ≠•ÊªöÂä®ÂçáÁ∫ßÔºö  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"dev","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ÁâàÊú¨ÂçáÁ∫ß‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#apache-fory-ÁâàÊú¨ÂçáÁ∫ß","content":" ÁõÆÂâç‰ªÖ‰øùËØÅÂ∞èÁâàÊú¨Èó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ‰æãÂ¶ÇÔºåfory v0.11.1 ÂçáÁ∫ßÂà∞ v0.11.2 ÂèØÁõ¥Êé•ÂÖºÂÆπÔºåÂçáÁ∫ßÂà∞ v0.12.0 Âàô‰∏ç‰øùËØÅÂÖºÂÆπ„ÄÇÂ§ßÂ§öÊï∞Âú∫ÊôØÊó†ÈúÄÈ¢ëÁπÅÂçáÁ∫ß‰∏ªÁâàÊú¨ÔºåÂΩìÂâçÁâàÊú¨Â∑≤Ë∂≥Â§üÈ´òÊïàÁ¥ßÂáëÔºåËÄÅÁâàÊú¨‰πü‰ºöÊåÅÁª≠Áª¥Êä§ bugfix„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"ÊïÖÈöúÊéíÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÊïÖÈöúÊéíÊü•","content":" ","version":"dev","tagName":"h2"},{"title":"Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å","content":" Ëã•Êú™ËÆæÁΩÆ CompatibleMode ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLEÔºåÂá∫Áé∞Â∫èÂàóÂåñÂºÇÂ∏∏ÔºåÂèØËÉΩÊòØÂ∫èÂàóÂåñÁ´ØÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥„ÄÇ  Ê≠§Êó∂ÂèØÁî® ForyBuilder#withClassVersionCheck ÂàõÂª∫ Fory ËøõË°åÊ†°È™åÔºåËã•ÂèçÂ∫èÂàóÂåñÊäõÂá∫ org.apache.fory.exception.ClassNotCompatibleExceptionÔºåËØ¥ÊòéÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂ∫îÊîπÁî® ForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE)„ÄÇ  CompatibleMode.COMPATIBLE ‰ºöÂ∏¶Êù•‰∏ÄÂÆöÊÄßËÉΩÂíå‰ΩìÁßØÂºÄÈîÄÔºåËã•Á±ªÁªìÊûÑÂßãÁªà‰∏ÄËá¥Ôºå‰∏çÂª∫ËÆÆÈªòËÆ§ÂºÄÂêØ„ÄÇ  ","version":"dev","tagName":"h3"},{"title":"POJO Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#pojo-Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™ POJO Â∫èÂàóÂåñÂêéÂèçÂ∫èÂàóÂåñ‰∏∫‰∏çÂêåÁªìÊûÑÁöÑ POJO„ÄÇÊ≠§Êó∂ÈúÄÂ∞Ü CompatibleMode ËÆæ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLE„ÄÇ  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"dev","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ API ‰ΩøÁî®ÈîôËØØ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ-api-‰ΩøÁî®ÈîôËØØ","content":" Áî® Fory#serialize Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserialize ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObject„ÄÇÁî® Fory#serializeJavaObject Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObject ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObjectAndClass Êàñ Fory#deserialize„ÄÇÁî® Fory#serializeJavaObjectAndClass Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObjectAndClass ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî®ÂÖ∂‰ªñ API„ÄÇ ","version":"dev","tagName":"h3"},{"title":"GraalVM Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/graalvm_guide","content":"","keywords":"","version":"dev"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#graalvm-native-image","content":" GraalVM native image can compile java code into native code ahead to build faster, smaller, leaner applications. The native image doesn't have a JIT compiler to compile bytecode into machine code, and doesn't support reflection unless configure reflection file.  Apache Fory‚Ñ¢ runs on GraalVM native image pretty well. Apache Fory‚Ñ¢ generates all serializer code for Fory JIT framework and MethodHandle/LambdaMetafactory at graalvm build time. Then use those generated code for serialization at runtime without any extra cost, the performance is great.  In order to use Apache Fory‚Ñ¢ on graalvm native image, you must create Fory as an static field of a class, and register all classes at the enclosing class initialize time. Then configure native-image.properties underresources/META-INF/native-image/$xxx/native-image.properties to tell graalvm to init the class at native image build time. For example, here we configure org.apache.fory.graalvm.Example class be init at build time:  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   Another benefit using fory is that you don't have to configure reflection json andserialization json, which is very tedious, cumbersome and inconvenient. When using fory, you just need to invokeorg.apache.fory.Fory.register(Class&lt;?&gt;, boolean) for every type you want to serialize.  Note that Fory asyncCompilationEnabled option will be disabled automatically for graalvm native image since graalvm native image doesn't support JIT at the image run time.  ","version":"dev","tagName":"h2"},{"title":"Not thread-safe Fory‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#not-thread-safe-fory","content":" Example:  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // register and generate serializer code. fory.register(Record.class, true); // ensure lazy initialized serializers being compiled by fory. fory.ensureSerializersCompiled(); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   Then add org.apache.fory.graalvm.Example build time init to native-image.properties configuration:  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"dev","tagName":"h2"},{"title":"Thread-safe Fory‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#thread-safe-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // register and generate serializer code. f.register(Foo.class, true); // ensure lazy initialized serializers being compiled by fory. fory.ensureSerializersCompiled(); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   Then add org.apache.fory.graalvm.ThreadSafeExample build time init to native-image.properties configuration:  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"dev","tagName":"h2"},{"title":"Framework Integration‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#framework-integration","content":" For framework developers, if you want to integrate fory for serialization, you can provided a configuration file to let the users to list all the classes they want to serialize, then you can load those classes and invokeorg.apache.fory.Fory.register(Class&lt;?&gt;, boolean) to register those classes in your Fory integration class, and configure that class be initialized at graalvm native image build time.  ","version":"dev","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#benchmark","content":" Here we give two class benchmarks between Fory and Graalvm Serialization.  When Fory compression is disabled:  Struct: Fory is 46x speed, 43% size compared to JDK.Pojo: Fory is 12x speed, 56% size compared to JDK.  When Fory compression is enabled:  Struct: Fory is 24x speed, 31% size compared to JDK.Pojo: Fory is 12x speed, 48% size compared to JDK.  See [Benchmark.java] for benchmark code.  ","version":"dev","tagName":"h2"},{"title":"Struct Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#struct-benchmark","content":" Class Fields‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark Results‚Äã  No compression:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   Compress number:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"dev","tagName":"h3"},{"title":"Pojo Benchmark‚Äã","type":1,"pageTitle":"GraalVM Guide","url":"/zh-CN/docs/next/guide/graalvm_guide#pojo-benchmark","content":" Class Fields‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark Results‚Äã  No compression:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   Compress number:  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"dev","tagName":"h3"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"dev"},{"title":"Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide#Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ","version":"dev","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã","content":" Apache Fory‚Ñ¢ ÂèØ‰ª•Ëá™Âä®Â∫èÂàóÂåñÁºñÁ®ãËØ≠Ë®ÄÁöÑÂ∏∏ËßÅÊï∞ÊçÆÁ±ªÂûãÔºöprimitive numeric types, string, binary, array, list, map Á≠â„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"dev","tagName":"h3"},{"title":"Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã","content":" Â∫èÂàóÂåñÁî®Êà∑ÂÆö‰πâÁöÑÁ±ªÂûãÈúÄË¶Å‰ΩøÁî®Ê≥®ÂÜå API Ê≥®ÂÜåËá™ÂÆö‰πâÁ±ªÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåËØ≠Ë®Ä‰∏≠Âª∫Á´ãÁ±ªÂûã‰πãÈó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"dev","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®","content":" ÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÂèØ‰ª•Ë¢´Ëá™Âä®Â∫èÂàóÂåñÔºå‰∏ç‰ºö‰∫ßÁîüÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØ„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), bar: Type.object(&quot;example.foo&quot;), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data = { foo: &quot;hello fory&quot;, }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   Rust  Áî±‰∫é Rust ÊâÄÊúâÊùÉÈôêÂà∂ÔºåÊöÇ‰∏çÊîØÊåÅÂºïÁî®Á±ªÂûãÁöÑÂ∫èÂàóÂåñ  ","version":"dev","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/next/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializers.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"dev","tagName":"h3"},{"title":"Row Format Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/row_format_guide","content":"","keywords":"","version":"dev"},{"title":"Java‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // Can be zero-copy read by python BinaryRow binaryRow = encoder.toRow(foo); // can be data from python Foo newFoo = encoder.fromRow(binaryRow); // zero-copy read List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // zero-copy read List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // zero-copy read 11th element of `readList&lt;Bar&gt; f4` BinaryRow barStruct = binaryArray4.getStruct(10); // zero-copy read 6th of f2 of 11th element of `readList&lt;Bar&gt; f4` barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // deserialize part of data. Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"dev","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"dev","tagName":"h2"},{"title":"Apache Arrow Support‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#apache-arrow-support","content":" Apache Fory‚Ñ¢ Row Format also supports automatic conversion from/to Arrow Table/RecordBatch.  Java:  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"dev","tagName":"h3"},{"title":"Support for Interface and Extension Types‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#support-for-interface-and-extension-types","content":" Fory now supports row format mapping for Java interface types and subclassed (extends) types, enabling more dynamic and flexible data schemas.  These enhancements were introduced in #2243, #2250, and #2256.  ","version":"dev","tagName":"h2"},{"title":"Example: Interface Mapping with RowEncoder‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#example-interface-mapping-with-rowencoder","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // Encode and decode using RowEncoder with interface type RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"dev","tagName":"h3"},{"title":"Example: Extension Type with RowEncoder‚Äã","type":1,"pageTitle":"Row Format Guide","url":"/zh-CN/docs/next/guide/row_format_guide#example-extension-type-with-rowencoder","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // Encode and decode using RowEncoder with parent class type RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python:  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"dev","tagName":"h3"},{"title":"Scala Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/scala_guide","content":"","keywords":"","version":"dev"},{"title":"Install‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#install","content":" To add a dependency on Apache Fory‚Ñ¢ scala for with sbt, use the following:  libraryDependencies += &quot;org.apache.fory&quot; %% &quot;fory-scala&quot; % &quot;0.12.2&quot;   ","version":"dev","tagName":"h2"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#quick-start","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"dev","tagName":"h2"},{"title":"Fory creation‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#fory-creation","content":" When using fory for scala serialization, you should create fory at least with following options:  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory)   Depending on the object types you serialize, you may need to register some scala internal types:  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   If you want to avoid such registration, you can disable class registration by ForyBuilder#requireClassRegistration(false). Note that this option allow to deserialize objects unknown types, more flexible but may be insecure if the classes contains malicious code.  And circular references are common in scala, Reference tracking should be enabled by ForyBuilder#withRefTracking(true). If you don't enable reference tracking, StackOverflowError may happen for some scala versions when serializing scala Enumeration.  Note that fory instance should be shared between multiple serialization, the creation of fory instance is not cheap.  If you use shared fory instance across multiple threads, you should create ThreadSafeFory instead by ForyBuilder#buildThreadSafeFory() instead.  ","version":"dev","tagName":"h2"},{"title":"Serialize case class‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-case-class","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"dev","tagName":"h2"},{"title":"Serialize pojo‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"dev","tagName":"h2"},{"title":"Serialize object singleton‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-object-singleton","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"dev","tagName":"h2"},{"title":"Serialize collection‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-collection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"dev","tagName":"h2"},{"title":"Serialize Tuple‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-tuple","content":" val tuple = (100, 10000L) //Tuple2 println(fory.deserialize(fory.serialize(tuple))) val tuple = (100, 10000L, 10000L, &quot;str&quot;) //Tuple4 println(fory.deserialize(fory.serialize(tuple)))   ","version":"dev","tagName":"h2"},{"title":"Serialize Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-enum","content":" ","version":"dev","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"dev","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"dev","tagName":"h3"},{"title":"Serialize Option‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#serialize-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))   ","version":"dev","tagName":"h2"},{"title":"Scala Class Default Values Support‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#scala-class-default-values-support","content":" Fory supports Scala class default values during deserialization when using compatible mode. This feature enables forward/backward compatibility when case classes or regular Scala classes have default parameters.  ","version":"dev","tagName":"h2"},{"title":"Overview‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#overview","content":" When a Scala class has default parameters, the Scala compiler generates methods in the companion object (for case classes) or in the class itself (for regular Scala classes) like apply$default$1, apply$default$2, etc. that return the default values. Fory can detect these methods and use them when deserializing objects where certain fields are missing from the serialized data.  ","version":"dev","tagName":"h3"},{"title":"Supported Class Types‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#supported-class-types","content":" Fory supports default values for:  Case classes with default parametersRegular Scala classes with default parameters in their primary constructorNested case classes with default parametersDeeply nested case classes with default parameters  ","version":"dev","tagName":"h3"},{"title":"How It Works‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#how-it-works","content":" Detection: Fory detects if a class is a Scala class by checking for the presence of default value methods (apply$default$N or $default$N). Default Value Discovery: For case classes: Fory scans the companion object for methods named apply$default$1, apply$default$2, etc.For regular Scala classes: Fory scans the class itself for methods named $default$1, $default$2, etc. Field Mapping: During deserialization, Fory identifies fields that exist in the target class but are missing from the serialized data. Value Application: After reading all available fields from the serialized data, Fory applies default values to any missing fields using direct field access for optimal performance.  ","version":"dev","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#usage","content":" This feature is automatically enabled when:  Compatible mode is enabled (withCompatibleMode(CompatibleMode.COMPATIBLE))The target class is detected as a Scala class with default valuesA field is missing from the serialized data but exists in the target class  No additional configuration is required.  ","version":"dev","tagName":"h3"},{"title":"Examples‚Äã","type":1,"pageTitle":"Scala Serialization Guide","url":"/zh-CN/docs/next/guide/scala_guide#examples","content":" Case Class with Default Values‚Äã  // Class WITHOUT default values (for serialization) case class PersonNoDefaults(name: String) // Class WITH default values (for deserialization) case class PersonWithDefaults(name: String, age: Int = 25, city: String = &quot;Unknown&quot;) val fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .withScalaOptimizationEnabled(true) .build() // Serialize using class without default values val original = PersonNoDefaults(&quot;John&quot;) val serialized = fory.serialize(original) // Deserialize into class with default values - missing fields will use defaults val deserialized = fory.deserialize(serialized, classOf[PersonWithDefaults]) // deserialized.name will be &quot;John&quot; // deserialized.age will be 25 (default) // deserialized.city will be &quot;Unknown&quot; (default)   Regular Scala Class with Default Values‚Äã  // Class WITHOUT default values (for serialization) class EmployeeNoDefaults(val name: String) // Class WITH default values (for deserialization) class EmployeeWithDefaults(val name: String, val age: Int = 30, val department: String = &quot;Engineering&quot;) val fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .withScalaOptimizationEnabled(true) .build() // Serialize using class without default values val original = new EmployeeNoDefaults(&quot;Jane&quot;) val serialized = fory.serialize(original) // Deserialize into class with default values - missing fields will use defaults val deserialized = fory.deserialize(serialized, classOf[EmployeeWithDefaults]) // deserialized.name will be &quot;Jane&quot; // deserialized.age will be 30 (default) // deserialized.department will be &quot;Engineering&quot; (default)   Complex Default Values‚Äã  // Class WITHOUT default values (for serialization) case class ConfigurationNoDefaults(name: String) // Class WITH default values (for deserialization) case class ConfigurationWithDefaults( name: String, settings: Map[String, String] = Map(&quot;default&quot; -&gt; &quot;value&quot;), tags: List[String] = List(&quot;default&quot;), enabled: Boolean = true ) val fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .withScalaOptimizationEnabled(true) .build() // Serialize using class without default values val original = ConfigurationNoDefaults(&quot;myConfig&quot;) val serialized = fory.serialize(original) // Deserialize into class with default values - missing fields will use defaults val deserialized = fory.deserialize(serialized, classOf[ConfigurationWithDefaults]) // deserialized.name will be &quot;myConfig&quot; // deserialized.settings will be Map(&quot;default&quot; -&gt; &quot;value&quot;) // deserialized.tags will be List(&quot;default&quot;) // deserialized.enabled will be true   Nested Case Classes‚Äã  object NestedClasses { // Class WITHOUT default values (for serialization) case class SimplePerson(name: String) // Class WITH default values (for deserialization) case class Address(street: String, city: String = &quot;DefaultCity&quot;) case class PersonWithDefaults(name: String, address: Address = Address(&quot;DefaultStreet&quot;)) } val fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .withScalaOptimizationEnabled(true) .build() // Serialize using class without default values val original = NestedClasses.SimplePerson(&quot;Alice&quot;) val serialized = fory.serialize(original) // Deserialize into class with default values - missing address field will use default val deserialized = fory.deserialize(serialized, classOf[NestedClasses.PersonWithDefaults]) // deserialized.name will be &quot;Alice&quot; // deserialized.address will be Address(&quot;DefaultStreet&quot;, &quot;DefaultCity&quot;)  ","version":"dev","tagName":"h3"},{"title":"Type Mapping of Xlang Serialization","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/xlang_type_mapping","content":"","keywords":"","version":"dev"},{"title":"Type Mapping‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/next/guide/xlang_type_mapping#type-mapping","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"dev","tagName":"h2"},{"title":"Type info(not implemented currently)‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/next/guide/xlang_type_mapping#type-infonot-implemented-currently","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages.  If the user notices that one type on a language corresponds to multiple types in Fory type systems, for example, longin java has type int64/varint64/sliint64, it means the language lacks some types, and the user must provide extra type info when using Fory.  ","version":"dev","tagName":"h2"},{"title":"Type annotation‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/next/guide/xlang_type_mapping#type-annotation","content":" If the type is a field of another class, users can provide meta hints for fields of a type, or for the whole type. Such information can be provided in other languages too:  java: use annotation.cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  Here is en example:  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"dev","tagName":"h2"},{"title":"Type wrapper‚Äã","type":1,"pageTitle":"Type Mapping of Xlang Serialization","url":"/zh-CN/docs/next/guide/xlang_type_mapping#type-wrapper","content":" If the type is not a field of a class, the user must wrap this type with a Fory type to pass the extra type info.  For example, suppose Fory Java provide a VarInt64 type, when a user invoke fory.serialize(long_value), he need to invoke like fory.serialize(new VarInt64(long_value)). ","version":"dev","tagName":"h2"},{"title":"Java Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec","content":"","keywords":"","version":"dev"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#spec-overview","content":" Apache Fory‚Ñ¢ Java Serialization is an automatic object serialization framework that supports reference and polymorphism. Apache Fory‚Ñ¢ will convert an object from/to fory java serialization binary format. Apache Fory‚Ñ¢ has two core concepts for java serialization:  Apache Fory‚Ñ¢ Java Binary formatFramework to convert object to/from Apache Fory‚Ñ¢ Java Binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Apache Fory‚Ñ¢ flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  Here is the overall format:  | fory header | object ref meta | object class meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"dev","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | optional 4 bytes | +---------------+-------+-------+--------+-------+------------------------------------+ | reserved bits | oob | xlang | endian | null | unsigned int for meta start offset |   null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"dev","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a class), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  ","version":"dev","tagName":"h2"},{"title":"Class Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#class-meta","content":" Fory supports to register class by an optional id, the registration can be used for security check and class identification. If a class is registered, it will have a user-provided or an auto-growing unsigned int i.e. class_id.  Depending on whether meta share mode and registration is enabled for current class, Fory will write class meta differently.  ","version":"dev","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#schema-consistent","content":" If schema consistent mode is enabled globally or enabled for current class, class meta will be written as follows:  If class is registered, it will be written as a fory unsigned varint: class_id &lt;&lt; 1.If class is not registered: If class is not an array, fory will write one byte 0bxxxxxxx1 first, then write class name. The first little bit is 1, which is different from first bit 0 of encoded class id. Fory can use this information to determine whether to read class by class id for deserialization. If class is not registered and class is an array, fory will write one byte dimensions &lt;&lt; 1 | 1 first, then write component class subsequently. This can reduce array class name cost if component class is or will be serialized.Class will be written as two enumerated fory unsigned by default: package name and class name. If meta share mode is enabled, class will be written as an unsigned varint which points to index in MetaContext.  ","version":"dev","tagName":"h3"},{"title":"Schema evolution‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#schema-evolution","content":" If schema evolution mode is enabled globally or enabled for current class, class meta will be written as follows:  If meta share mode is not enabled, class meta will be written as schema consistent mode. Additionally, field meta such as field type and name will be written with the field value using a key-value like layout.If meta share mode is enabled, class meta will be written as a meta-share encoded binary if class hasn't been written before, otherwise an unsigned varint id which references to previous written class meta will be written.  ","version":"dev","tagName":"h3"},{"title":"Meta share‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#meta-share","content":" This mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure doesn't lost shared meta. Meta streamline will be supported in the future for enclosed meta sharing which doesn't cross multiple serializations of different objects.  For Schema consistent mode, class will be encoded as an enumerated string by full class name. Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes global meta header | 1~2 bytes | variable bytes | variable bytes | variable bytes | +-------------------------------+-------------|--------------------+-------------------+----------------+ | 50 bits hash + 14 bits header | type header | current class meta | parent class meta | ... |   Class meta are encoded from parent class to leaf class, only class with serializable fields will be encoded.  ","version":"dev","tagName":"h2"},{"title":"Global meta header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#global-meta-header","content":" Meta header is a 64 bits number value encoded in little endian order.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  ","version":"dev","tagName":"h3"},{"title":"Type header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#type-header","content":" Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current class doesn't has parent class, or parent class doesn't have fields to serialize, or we're in a context which serialize fields of current class only(ObjectStreamSerializer#SlotInfo is an example), num classes will be 1.Other 4 bits are preserved to future extensions.If num classes are greater than or equal to 0b1111, write num_classes - 0b1111 as varuint next.  ","version":"dev","tagName":"h3"},{"title":"Single layer class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#single-layer-class-meta","content":" | unsigned varint | meta string | meta string | field info: variable bytes | variable bytes | ... | +----------------------------+-----------------------+---------------------+-------------------------------+-----------------+-----+ | num fields + register flag | header + package name | header + class name | header + type id + field name | next field info | ... |   num fields: encode num fields &lt;&lt; 1 | register flag(1 when class registered) as unsigned varint. If class is registered, then an unsigned varint class id will be written next, package and class name will be omitted.If current class is schema consistent, then num field will be 0 to flag it.If current class isn't schema consistent, then num field will be the number of compatible fields. For example, users can use tag id to mark some field as compatible field in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields. Package name encoding(omitted when class is registered): encoding algorithm: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIALHeader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Class name encoding(omitted when class is registered): encoding algorithm: UTF8/LOWER_UPPER_DIGIT_SPECIAL/FIRST_TO_LOWER_SPECIAL/ALL_TO_LOWER_SPECIALheader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Field info: header(8 bits): 3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag. Users can use annotation to provide those info. 2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be 11. size of field name: The 3 bits size: 0~7 will be used to indicate length 1~7, the value 6 the size read more bytes, the encoding will encode size - 7 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.polymorphism: when set to 1, the actual type of field will be the declared field type even the type if not final. type id: For registered type-consistent classes, it will be the registered class id.Otherwise it will be encoded as OBJECT_ID if it isn't final and FINAL_OBJECT_ID if it's final. The meta for such types is written separately instead of inlining here is to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too. Field name: If type id is set, type id will be used instead. Otherwise meta string encoding length and data will be written instead.  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory field comparator. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"dev","tagName":"h3"},{"title":"Other layers class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#other-layers-class-meta","content":" Same encoding algorithm as the previous layer except:  header + package name: Header: If package name has been written before: varint index + sharing flag(set) will be writtenIf package name hasn't been written before: If meta string encoding is LOWER_SPECIAL and the length of encoded string &lt;= 64, then header will be6 bits size + encoding flag(set) + sharing flag(unset).Otherwise, header will be 3 bits unset + 3 bits encoding flags + encoding flag(unset) + sharing flag(unset)  ","version":"dev","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as class name and field names.  ","version":"dev","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._$|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z[c1,c2] except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z[c1,c2]\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z[c1,c2]\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  For package name encoding, c1,c2 should be ._; For field/type name encoding, c1,c2 should be _$;Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"dev","tagName":"h3"},{"title":"Shared meta string‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#shared-meta-string","content":" The shared meta string format consists of header and encoded string binary. Header of encoded string binary will be inlined in shared meta header.  Header is written using little endian order, Fory can read this flag first to determine how to deserialize the data.  Write by data‚Äã  If string hasn't been written before, the data will be written as follows:  | unsigned varint: string binary size + 1 bit: not written before | 56 bits: unique hash | 3 bits encoding flags + string binary |   If string binary size is less than 16 bytes, the hash will be omitted to save spaces. Unique hash can be omitted too if caller pass a flag to disable it. In such cases, the format will be:  | unsigned varint: string binary size + 1 bit: not written before | 3 bits encoding flags + string binary |   Write by ref‚Äã  If string has been written before, the data will be written as follows:  | unsigned varint: written string id + 1 bit: written before |   ","version":"dev","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#value-format","content":" ","version":"dev","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#basic-types","content":" Bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  Byte‚Äã  size: 1 byteformat: write as pure byte.  Short‚Äã  size: 2 bytebyte order: little endian order  Char‚Äã  size: 2 bytebyte order: little endian order  Unsigned int‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  Signed int‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encoding it as an unsigned int.  Unsigned long‚Äã  size: 1~9 byteFory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  Signed long‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  Float‚Äã  size: 4 byteformat: convert float to 4 bytes int by Float.floatToRawIntBits, then write as binary by little endian order.  Double‚Äã  size: 8 byteformat: convert double to 8 bytes int by Double.doubleToRawLongBits, then write as binary by little endian order.  ","version":"dev","tagName":"h3"},{"title":"String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#string","content":" Format:  | header: size &lt;&lt; 2 | 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned var long. The little 2 bits is used for encoding: 0 for latin, 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. But currently fory doesn't enable utf-8 encoding by default for java. Cross-language string serialization of fory uses utf-8 by default.  ","version":"dev","tagName":"h3"},{"title":"Collection‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#collection","content":" All collection serializers must extend CollectionLikeSerializer.  Format:  length(unsigned varint) | collection header | elements header | elements data   Collection header‚Äã  For ArrayList/LinkedArrayList/HashSet/LinkedHashSet, this will be empty.For TreeSet, this will be ComparatorFor subclass of ArrayList, this may be extra object field info.  Elements header‚Äã  In most cases, all collection elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the collection has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the collection element types are the declared type, use the 3rd bit 0b100 of the header to flag it.If the collection element types are same, use the 4th bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom class field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element class info.  CollectionSerializer#write/read can be taken as an example.  ","version":"dev","tagName":"h3"},{"title":"Array‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#array","content":" Primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types.  Object array‚Äã  Object array is serialized using the collection format. Object component type will be taken as collection element generic type.  ","version":"dev","tagName":"h3"},{"title":"Map‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#map","content":" All Map serializers must extend MapLikeSerializer.  Format:  | length(unsigned varint) | map header | key value pairs data |   Map header‚Äã  For HashMap/LinkedHashMap, this will be empty.For TreeMap, this will be ComparatorFor other Map, this may be extra object field info.  Map Key-Value data‚Äã  Map iteration is too expensive, Fory won't compute the header like for collection before since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize map chunk by chunk, every chunk has 127 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  ","version":"dev","tagName":"h3"},{"title":"Enum‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"dev","tagName":"h3"},{"title":"Object‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#object","content":" Object means object of pojo/struct/bean/record type. Object will be serialized by writing its fields data in fory order.  Depending on schema compatibility, objects will have different formats.  Field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.boxed primitive fields: same order as primitive fieldsfinal fields: same type together, then sorted by field name lexicographically.collection fields: same order as final fieldsmap fields: same order as final fieldsother fields: same order as final fields  Schema consistent‚Äã  Object fields will be serialized one by one using following format:  Primitive field value: | var bytes | +----------------+ | value data | +----------------+ Boxed field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | class meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | class meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For this object type itself, schema consistent mode will write class by id/name, but schema evolution mode will write class field names, types and other meta too, see Class meta.Class meta of final custom type needs to be written too, because peers may not have this class defined.  ","version":"dev","tagName":"h3"},{"title":"Class‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#class","content":" Class will be serialized using class meta format.  ","version":"dev","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/next/specification/fory_java_serialization_spec#implementation-guidelines","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches. ","version":"dev","tagName":"h2"},{"title":"Row Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/specification/fory_row_format_spec","content":"","keywords":"","version":"dev"},{"title":"Row Format‚Äã","type":1,"pageTitle":"Row Format","url":"/zh-CN/docs/next/specification/fory_row_format_spec#row-format","content":" Coming soon ","version":"dev","tagName":"h2"},{"title":"Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/","content":"","keywords":"","version":"0.12"},{"title":"ÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#ÈÇÆ‰ª∂ÂàóË°®","content":" ÈÇÆ‰ª∂ÂàóË°®\tÊèèËø∞\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÊ¥ªÂä®dev@fory.apache.org\tÂºÄÂèëÁõ∏ÂÖ≥ËÆ®ËÆ∫\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂèëÈÄÅÈÇÆ‰ª∂\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä® commits@fory.apache.org\t‰ªìÂ∫ìÁöÑÊâÄÊúâ commits\tËÆ¢ÈòÖ\tÂèñÊ∂àËÆ¢ÈòÖ\tÂè™ËØªÁöÑÈÇÆ‰ª∂ÂàóË°®\tÈÇÆ‰ª∂ÂàóË°®Ê¥ªÂä®  Âú®Â∞ùËØïÂèëÈÄÅÈÇÆ‰ª∂‰πãÂâçÔºåËØ∑Á°Æ‰øùËÆ¢ÈòÖ‰∏äËø∞ÁöÑÈÇÆ‰ª∂ÂàóË°®„ÄÇ  Â¶ÇÊûúÊÇ®Ê≤°ÊúâËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®ÔºåÊÇ®ÁöÑÈÇÆ‰ª∂Â∞ÜË¢´ÊãíÁªùÊàñ‰∏ç‰ºöÊî∂Âà∞ÂõûÂ§ç„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#Â¶Ç‰ΩïËÆ¢ÈòÖÈÇÆ‰ª∂ÂàóË°®","content":" Ë¶ÅÂèëÈÄÅÈÇÆ‰ª∂Ëá≥ÈÇÆ‰ª∂ÂàóË°®ÔºåËØ∑ÂÖàÈÄöËøá‰ª•‰∏ãÊñπÂºèËÆ¢ÈòÖÔºö  ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ listname-subscribe@fory.apache.orgÔºåÂπ∂Áõ∏Â∫îÊõøÊç¢ listnameÔºõÂõûÂ§çÊÇ®Â∞ÜÊî∂Âà∞ÁöÑÁ°ÆËÆ§ÁîµÂ≠êÈÇÆ‰ª∂Ôºå‰øùÊåÅÈÇÆ‰ª∂‰∏ªÈ¢òË°åÂÆåÊï¥ÔºõÁÑ∂ÂêéÊÇ®Â∞ÜÊî∂Âà∞‰∏ÄÂ∞ÅÊ¨¢ËøéÁöÑÁîµÂ≠êÈÇÆ‰ª∂ÔºåËÆ¢ÈòÖÊàêÂäü„ÄÇ  Âú®ËÆ®ËÆ∫ÁîµÂ≠êÈÇÆ‰ª∂‰∏≠ÁöÑ‰ª£Á†ÅÁâáÊÆµÊó∂ÔºåËØ∑Á°Æ‰øùÔºö  ÊÇ®‰∏çË¶ÅÈìæÊé•Âà∞Â§ñÈÉ®ÊúçÂä°‰∏≠ÁöÑÊñá‰ª∂ÔºåÂõ†‰∏∫Ê≠§Á±ªÊñá‰ª∂ÂèØËÉΩ‰ºöÊõ¥Êîπ„ÄÅË¢´Âà†Èô§ÊàñÈìæÊé•ÂèØËÉΩ‰ºö‰∏≠Êñ≠Ôºå‰ªéËÄå‰ΩøÂ≠òÊ°£ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Á∫øÁ®ãÂèòÂæóÊó†Áî®ÔºõÊÇ®Á≤òË¥¥ÊñáÊú¨ËÄå‰∏çÊòØÊñáÊú¨Â±èÂπïÊà™ÂõæÔºõÁ≤òË¥¥‰ª£Á†ÅÊó∂‰øùÊåÅÊ†ºÂºèÔºå‰ª•‰øùÊåÅ‰ª£Á†ÅÂèØËØªÔºõÊúâË∂≥Â§üÁöÑÂØºÂÖ•ËØ≠Âè•‰ª•ÈÅøÂÖç‰∫ßÁîü‰ª£Á†ÅÊ≠ß‰πâ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Slack‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#slack","content":" ÊÇ®ÂèØ‰ª•Âä†ÂÖ•Slack ‰∏äÁöÑ Apache Fory‚Ñ¢ Á§æÂå∫„ÄÇ  ËøôÈáåÊúâ‰∏Ä‰∫õÁ§æÂå∫ËßÑÂàôÔºö  ‰øùÊåÅÂ∞äÈáçÂíåÂèãÂñÑÔºõÊâÄÊúâÈáçË¶ÅÁöÑÂÜ≥ÂÆöÂíåÁªìËÆ∫ÈÉΩÂøÖÈ°ªÂèçÊò†Âà∞ÈÇÆ‰ª∂ÂàóË°®‰∏≠„ÄÇ ‚ÄúÂ¶ÇÊûúËøôÊ≤°ÊúâÂú®ÈÇÆ‰ª∂ÂàóË°®‰∏≠ÊúâÁõ∏ÂÖ≥ÁöÑËÆ®ËÆ∫ËÆ∞ÂΩïÔºåÂàô‰ª£Ë°®ÂÆÉ‰∏çÁîüÊïà‚Äù ÔºõThe Apache WayÔºõ‰ΩøÁî® Slack Á∫øÁ®ãÊù•Èò≤Ê≠¢Âπ∂Ë°åÂØπËØùÊ∑πÊ≤°ÂΩìÂâçÁöÑÂØπËØùÈ¢ëÈÅìÔºõËØ∑‰∏çË¶ÅÁõ¥Êé•ÂêëÈÇÆ‰ª∂ÂàóË°®ÂèëÈÄÅ Bug fix„ÄÅIssue ÂàÜÈÖçÂíå Code Review Ê∂àÊÅØ„ÄÇËøô‰∫õÂÜÖÂÆπÂ∫îËØ•Ë¢´Á§æÂå∫Ë¥°ÁåÆËÄÖËá™ÊÑøÂ§ÑÁêÜÂπ∂ÂàÜÈÖç„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Issue Ë∑üË∏™‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#issue-Ë∑üË∏™","content":" Êàë‰ª¨‰ΩøÁî® GitHub Issues Êù•Ë∑üË∏™ÊâÄÊúâ IssuesÔºö  ‰ª£Á†ÅÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory/issuesÁΩëÁ´ôÁõ∏ÂÖ≥ÈóÆÈ¢òÔºöhttps://github.com/apache/fory-site/issues  ÊÇ®ÈúÄË¶ÅÊúâ‰∏Ä‰∏™ GitHub Â∏êÊà∑ ÊâçËÉΩÂàõÂª∫ÈóÆÈ¢ò„ÄÇ Â¶ÇÊûúÊÇ®Ê≤°Êúâ GitHub Â∏êÊà∑ÔºåÊÇ®ÂèØ‰ª•ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ dev@fory.apache.org„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Êä•Âëä Bug‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#Êä•Âëä-bug","content":" ÊÇ®Âú®Êä•Âëä Bug ‰πãÂâçÔºåÂ∫îËØ•Ôºö  È™åËØÅËØ• Bug Á°ÆÂÆûÂ≠òÂú®ÔºõÊêúÁ¥¢ Issue List ‰ª•Á°Æ‰øù‰∏çÂ≠òÂú®Áõ∏ÂÖ≥ Bug„ÄÇÂú® Issue List ‰∏≠ÂàõÂª∫ bug Êä•Âëä„ÄÇÂ¶ÇÊûúÂèØËÉΩÁöÑËØùÔºåÊ∑±ÂÖ•Á†îÁ©∂ Apache Fory‚Ñ¢ ÁöÑÊ∫ê‰ª£Á†ÅÔºåÂπ∂ÈíàÂØπÊÇ®Êä•ÂëäÁöÑ Bug Êèê‰∫§Ë°•‰∏ÅÔºåËøôÊúâÂä©‰∫éÂø´ÈÄü‰øÆÂ§ç Bug„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#Êä•ÂëäÂÆâÂÖ®ÊºèÊ¥û","content":" Apache Fory‚Ñ¢ ÊòØ Apache ËΩØ‰ª∂Âü∫Èáë‰ºö ÁöÑ‰∏Ä‰∏™È°πÁõÆÔºåÈÅµÂæ™ ASF ÊºèÊ¥ûÂ§ÑÁêÜÊµÅÁ®ã„ÄÇ  Ë¶ÅÊä•ÂëäÊÇ®ÂèëÁé∞ÁöÑÊñ∞ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÔºåËØ∑ÈÅµÂæ™ ASF ÊºèÊ¥ûÊä•ÂëäÊµÅÁ®ãÔºåËØ•ÊµÅÁ®ãËß£Èáä‰∫ÜÂ¶Ç‰ΩïÁßÅ‰∏ãÂêëÁ§æÂå∫Áª¥Êä§ËÄÖÂèëÈÄÅËØ¶ÁªÜÁöÑÊºèÊ¥û‰ø°ÊÅØ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"New Feature‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#new-feature","content":" Ê¨¢ËøéÊÇ®Â¢ûÂº∫ÂäüËÉΩÊàñÊñ∞ÂäüËÉΩÂª∫ËÆÆ„ÄÇÊèêÊ°àË∂äÂÖ∑‰Ωì„ÄÅË∂äÂêàÁêÜÔºåÊÇ®Âú® Fory Á§æÂå∫ÁöÑÂΩ±ÂìçÂäõÂ∞±Ë∂äÂ§ß„ÄÇÂÆÉÊúâÂèØËÉΩÂú®‰πãÂêéÁâàÊú¨ÂèëÂ∏É„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"È°πÁõÆÊ∫ê‰ª£Á†Å‚Äã","type":1,"pageTitle":"Á§æÂå∫","url":"/zh-CN/docs/community/#È°πÁõÆÊ∫ê‰ª£Á†Å","content":" Fory Core Â≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/foryFory ÁΩëÁ´ôÂ≠òÂÇ®Â∫ìÔºöhttps://github.com/apache/fory-site ","version":"0.12","tagName":"h3"},{"title":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_join_community","content":"","keywords":"","version":"0.12"},{"title":"Apache Fory‚Ñ¢ Ë¥°ÁåÆÊåáÂçó‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#apache-fory-Ë¥°ÁåÆÊåáÂçó","content":" Apache Fory‚Ñ¢ Âõ¢ÈòüÈÄöÂ∏∏Âú® github ‰∏äËøõË°åÂºÄÂèëÂíå issue Áª¥Êä§ÔºåËØ∑ÊâìÂºÄ¬†Github ÁΩëÁ´ôÔºåÁÇπÂáªÂè≥‰∏äËßí¬†Sign up¬†ÊåâÈíÆÔºåÊ≥®ÂÜå‰∏Ä‰∏™Ëá™Â∑±ÁöÑË¥¶Âè∑ÔºåÂºÄÂêØ‰Ω†ÂºÄÊ∫ê‰πãÊóÖÁöÑÁ¨¨‰∏ÄÊ≠•„ÄÇ  Âú®¬†Apache Fory‚Ñ¢ ‰ªìÂ∫ì‰∏≠ÔºåÊàë‰ª¨Êúâ‰∏Ä‰ªΩÈù¢ÂêëÊâÄÊúâÂºÄÊ∫êË¥°ÁåÆËÄÖÁöÑÊåáÂçóÔºå‰ªãÁªç‰∫ÜÊúâÂÖ≥ÁâàÊú¨ÁÆ°ÁêÜ„ÄÅÂàÜÊîØÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåËØ∑Ëä±Âá†ÂàÜÈíüÊó∂Èó¥ÈòÖËØª‰∫ÜËß£‰∏Ä‰∏ã„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™-pull-request","content":" ","version":"0.12","tagName":"h2"},{"title":"Step0ÔºöÂÆâË£Ö Git‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step0ÂÆâË£Ö-git","content":" Git ÊòØ‰∏ÄÁßçÁâàÊú¨ÊéßÂà∂Á≥ªÁªüÔºåÁî®‰∫éË∑üË∏™ÂíåÁÆ°ÁêÜËΩØ‰ª∂ÂºÄÂèëÈ°πÁõÆ‰∏≠ÁöÑ‰ª£Á†ÅÂèòÊõ¥„ÄÇÂÆÉÂ∏ÆÂä©ÂºÄÂèëËÄÖËÆ∞ÂΩïÂíåÁÆ°ÁêÜ‰ª£Á†ÅÁöÑÂéÜÂè≤ËÆ∞ÂΩïÔºåÊñπ‰æøÂõ¢ÈòüÂçè‰Ωú„ÄÅ‰ª£Á†ÅÁâàÊú¨ÊéßÂà∂„ÄÅÂêàÂπ∂‰ª£Á†ÅÁ≠âÊìç‰Ωú„ÄÇÈÄöËøá GitÔºåÊÇ®ÂèØ‰ª•ËøΩË∏™ÊØè‰∏™Êñá‰ª∂ÁöÑÊØè‰∏™ÁâàÊú¨ÔºåÂπ∂ËΩªÊùæÂú∞Âú®‰∏çÂêåÁâàÊú¨‰πãÈó¥ËøõË°åÂàáÊç¢ÂíåÊØîËæÉ„ÄÇGit ËøòÊèê‰æõ‰∫ÜÂàÜÊîØÁÆ°ÁêÜÂäüËÉΩÔºå‰ΩøÂæóÂèØ‰ª•ÂêåÊó∂ËøõË°åÂ§ö‰∏™Âπ∂Ë°åÂºÄÂèë‰ªªÂä°„ÄÇ  ËÆøÈóÆ Git ÂÆòÊñπÁΩëÁ´ôÔºöhttps://git-scm.com‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨ÁöÑ Git ÂÆâË£ÖÁ®ãÂ∫è„ÄÇËøêË°å‰∏ãËΩΩÁöÑÂÆâË£ÖÁ®ãÂ∫èÔºåÊåâÁÖßÂÆâË£ÖÂêëÂØºÁöÑÊèêÁ§∫ËøõË°åÂÆâË£Ö„ÄÇÂÆâË£ÖÂÆåÊàêÂêéÔºå‰Ω†ÂèØ‰ª•ÈÄöËøáÂëΩ‰ª§Ë°å‰ΩøÁî®¬†git version¬†ÂëΩ‰ª§Á°ÆËÆ§ÂÆâË£ÖÊàêÂäü„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Step1ÔºöFork È°πÁõÆ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step1fork-È°πÁõÆ","content":" È¶ñÂÖàÈúÄË¶Å fork Ëøô‰∏™È°πÁõÆÔºåËøõÂÖ•ForyÈ°πÁõÆÈ°µÈù¢ÔºåÁÇπÂáªÂè≥‰∏äËßíÁöÑ Fork ÊåâÈíÆ‰Ω†ÁöÑ github Â∏êÂè∑‰∏≠‰ºöÂá∫Áé∞ xxxx(‰Ω†ÁöÑ github Áî®Êà∑Âêç)/fory Ëøô‰∏™È°πÁõÆÂú®Êú¨Âú∞ÁîµËÑë‰∏ä‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§: ÂæóÂà∞‰∏Ä‰∏™ fory Êñá‰ª∂Â§π  // ssh git clone git@github.com:xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git // https git clone https://github.com/xxxx(‰Ω†ÁöÑgithubÁî®Êà∑Âêç)/fory.git   ","version":"0.12","tagName":"h3"},{"title":"Step2ÔºöËé∑ÂèñÈ°πÁõÆ‰ª£Á†Å‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step2Ëé∑ÂèñÈ°πÁõÆ‰ª£Á†Å","content":" ËøõÂÖ• fory Êñá‰ª∂Â§πÔºåÊ∑ªÂä† fory ÁöÑËøúÁ®ãÂú∞ÂùÄ  git remote add upstream https://github.com/apache/fory.git   ","version":"0.12","tagName":"h3"},{"title":"Step3ÔºöÂàõÂª∫ÂàÜÊîØ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step3ÂàõÂª∫ÂàÜÊîØ","content":" Â•Ω‰∫ÜÔºåÁé∞Âú®ÂèØ‰ª•ÂºÄÂßãË¥°ÁåÆÊàë‰ª¨ÁöÑ‰ª£Á†Å‰∫Ü„ÄÇfory ÈªòËÆ§ÂàÜÊîØ‰∏∫ main ÂàÜÊîØ„ÄÇÊó†ËÆ∫ÊòØÂäüËÉΩÂºÄÂèë„ÄÅbug ‰øÆÂ§ç„ÄÅÊñáÊ°£ÁºñÂÜôÔºåÈÉΩËØ∑Êñ∞Âª∫Á´ã‰∏Ä‰∏™ÂàÜÊîØÔºåÂÜçÂêàÂπ∂Âà∞ main ÂàÜÊîØ‰∏ä„ÄÇ‰ΩøÁî®‰ª•‰∏ã‰ª£Á†ÅÂàõÂª∫ÂàÜÊîØÔºö  // ÂàõÂª∫ÂäüËÉΩÂºÄÂèëÂàÜÊîØ git checkout -b feat/xxxx // ÂàõÂª∫ÈóÆÈ¢ò‰øÆÂ§çÂºÄÂèëÂàÜÊîØ git checkout -b fix/xxxx // ÂàõÂª∫ÊñáÊ°£„ÄÅdemoÂàÜÊîØ git checkout -b docs/add-java-demo   ÂÅáËÆæÊàë‰ª¨ÂàõÂª∫‰∫ÜÊñáÊ°£‰øÆÊîπÂàÜÊîØ¬†docs/add-java-demo  ÂÅáËÆæÊàë‰ª¨Â∑≤ÁªèÊ∑ªÂä†‰∫Ü‰∏Ä‰∫õ‰ª£Á†ÅÔºåÊèê‰∫§Âà∞‰ª£Á†ÅÂ∫ì git add . git commit -a -m &quot;docs: add java demo and related docs&quot; „ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Step4ÔºöÂêàÂπ∂‰øÆÊîπ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step4ÂêàÂπ∂‰øÆÊîπ","content":" ÂàáÊç¢ÂõûËá™Â∑±ÁöÑÂºÄÂèëÂàÜÊîØ:  git checkout docs/add-java-demo   ÊääÊõ¥Êñ∞‰ª£Á†ÅÊèê‰∫§Âà∞Ëá™Â∑±ÁöÑÂàÜÊîØ‰∏≠:  git push origin docs/add-java-demo   ","version":"0.12","tagName":"h3"},{"title":"Step5ÔºöÊèê‰∫§ Pull Request‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#step5Êèê‰∫§-pull-request","content":" ‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑ github ‰ª£Á†Å‰ªìÂ∫ìÈ°µÈù¢ÁÇπÂáª¬†Compare &amp; pull request¬†ÊåâÈíÆ„ÄÇÊàñÈÄöËøá¬†contribute¬†ÊåâÈíÆÂàõÂª∫„ÄÇ  Â°´ÂÜôËøôÊòØ‰ªÄ‰πàÁ±ªÂûãÁöÑ‰øÆÊîπÂ°´ÂÜôÂÖ≥ËÅîÁöÑ issueËã•ÊúâÂ§çÊùÇÂèòÊõ¥ÔºåËØ∑ËØ¥ÊòéËÉåÊôØÂíåËß£ÂÜ≥ÊñπÊ°à  Áõ∏ÂÖ≥‰ø°ÊÅØÂ°´ÂÜôÂÆåÊàêÂêéÔºåÁÇπÂáª Create pull request Êèê‰∫§„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ËΩªÊùæÊ≠•ÂÖ• Apache Fory‚Ñ¢ ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#ËΩªÊùæÊ≠•ÂÖ•-apache-fory-ÂºÄÊ∫êË¥°ÁåÆ‰πãÊóÖ","content":" &quot;good first issue&quot; ÊòØ‰∏Ä‰∏™Âú®ÂºÄÊ∫êÁ§æÂå∫Â∏∏ËßÅÁöÑÊ†áÁ≠æÔºåËøô‰∏™Ê†áÁ≠æÁöÑÁõÆÁöÑÊòØÂ∏ÆÂä©Êñ∞Ë¥°ÁåÆËÄÖÊâæÂà∞ÈÄÇÂêàÂÖ•Èó®ÁöÑÈóÆÈ¢ò„ÄÇ  Apache Fory‚Ñ¢ ÁöÑÂÖ•Èó®ÈóÆÈ¢òÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá¬†issue ÂàóË°®Êü•Áúã„ÄÇ  Â¶ÇÊûú‰Ω†ÂΩìÂâçÊúâÊó∂Èó¥ÂíåÊÑèÊÑøÂèÇ‰∏éÂà∞Á§æÂå∫Ë¥°ÁåÆÔºåÂèØ‰ª•Âú® issue ÈáåÁúã‰∏ÄÁúã¬†good first issueÔºåÈÄâÊã©‰∏Ä‰∏™ÊÑüÂÖ¥Ë∂£„ÄÅÈÄÇÂêàËá™Â∑±ÁöÑËÆ§È¢Ü„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Êã•Êä± Apache Fory‚Ñ¢ Á§æÂå∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂä†ÂÖ• Apache Fory‚Ñ¢ Á§æÂå∫","url":"/zh-CN/docs/community/how_to_join_community#Êã•Êä±-apache-fory-Á§æÂå∫","content":" Âú®‰Ω†‰∏∫ Apache Fory‚Ñ¢ Ë¥°ÁåÆ‰ª£Á†Å‰πã‰ΩôÔºåÊàë‰ª¨ÈºìÂä±‰Ω†ÂèÇ‰∏éÂÖ∂‰ªñËÆ©Á§æÂå∫Êõ¥Âä†ÁπÅËç£ÁöÑ‰∫ãÊÉÖÔºåÊØîÂ¶ÇÔºö  ‰∏∫È°πÁõÆÁöÑÂèëÂ±ï„ÄÅÂäüËÉΩËßÑÂàí Á≠âÊèêÂª∫ËÆÆ„ÄÇÂàõ‰ΩúÊñáÁ´†„ÄÅËßÜÈ¢ëÔºåÂºÄÂäûËÆ≤Â∫ßÊù•ÂÆ£‰º† Apache Fory‚Ñ¢ „ÄÇÊí∞ÂÜôÊé®ÂπøËÆ°ÂàíÔºåÂêåÂõ¢Èòü‰∏ÄÂêåÊâßË°å„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Xlang Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec","content":"","keywords":"","version":"dev"},{"title":"Cross-language Serialization Specification‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#cross-language-serialization-specification","content":" Format Version History: Version 0.1 - serialization spec formalized  Apache Fory‚Ñ¢ xlang serialization is an automatic object serialization framework that supports reference and polymorphism. Apache Fory‚Ñ¢ will convert an object from/to fory xlang serialization binary format. Apache Fory‚Ñ¢ has two core concepts for xlang serialization:  Apache Fory‚Ñ¢ xlang binary formatFramework implemented in different languages to convert object to/from Apache Fory‚Ñ¢ xlang binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Apache Fory‚Ñ¢ flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  ","version":"dev","tagName":"h2"},{"title":"Type Systems‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type-systems","content":" ","version":"dev","tagName":"h2"},{"title":"Data Types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#data-types","content":" bool: a boolean value (true or false).int8: a 8-bit signed integer.int16: a 16-bit signed integer.int32: a 32-bit signed integer.var_int32: a 32-bit signed integer which use fory var_int32 encoding.int64: a 64-bit signed integer.var_int64: a 64-bit signed integer which use fory PVL encoding.sli_int64: a 64-bit signed integer which use fory SLI encoding.float16: a 16-bit floating point number.float32: a 32-bit floating point number.float64: a 64-bit floating point number including NaN and Infinity.string: a text string encoded using Latin1/UTF16/UTF-8 encoding.enum: a data type consisting of a set of named values. Rust enum with non-predefined field values are not supported as an enum.named_enum: an enum whose value will be serialized as the registered name.struct: a morphic(final) type serialized by Fory Struct serializer. i.e. it doesn't have subclasses. Suppose we're deserializing List&lt;SomeClass&gt;, we can save dynamic serializer dispatch since SomeClass is morphic(final).compatible_struct: a morphic(final) type serialized by Fory compatible Struct serializer.named_struct: a struct whose type mapping will be encoded as a name.named_compatible_struct: a compatible_struct whose type mapping will be encoded as a name.ext: a type which will be serialized by a customized serializer.named_ext: an ext type whose type mapping will be encoded as a name.list: a sequence of objects.set: an unordered set of unique elements.map: a map of key-value pairs. Mutable types such as list/map/set/array/tensor/arrow are not allowed as key of map.duration: an absolute length of time, independent of any calendar/timezone, as a count of nanoseconds.timestamp: a point in time, independent of any calendar/timezone, as a count of nanoseconds. The count is relative to an epoch at UTC midnight on January 1, 1970.local_date: a naive date without timezone. The count is days relative to an epoch at UTC midnight on Jan 1, 1970.decimal: exact decimal value represented as an integer value in two's complement.binary: an variable-length array of bytes.array: only allow 1d numeric components. Other arrays will be taken as List. The implementation should support the interoperability between array and list. bool_array: one dimensional int16 array.int8_array: one dimensional int8 array.int16_array: one dimensional int16 array.int32_array: one dimensional int32 array.int64_array: one dimensional int64 array.float16_array: one dimensional half_float_16 array.float32_array: one dimensional float32 array.float64_array: one dimensional float64 array. tensor: multidimensional array which every sub-array have same size and type.arrow record batch: an arrow record batch object.arrow table: an arrow table object.  Note:  Unsigned int/long are not added here, since not every language support those types.  ","version":"dev","tagName":"h3"},{"title":"Polymorphisms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#polymorphisms","content":" For polymorphism, if one non-final class is registered, and only one subclass is registered, then we can take all elements in List/Map have same type, thus reduce runtime check cost.  Collection/Array polymorphism are not fully supported, since some languages such as golang have only one collection type. If users want to get exactly the type he passed, he must pass that type when deserializing or annotate that type to the field of struct.  ","version":"dev","tagName":"h3"},{"title":"Type disambiguation‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type-disambiguation","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages. When deserializing, Fory use the target data structure type and the data type in the data jointly to determine how to deserialize and populate the target data structure. For example:  class Foo { int[] intArray; Object[] objects; List&lt;Object&gt; objectList; } class Foo2 { int[] intArray; List&lt;Object&gt; objects; List&lt;Object&gt; objectList; }   intArray has an int32_array type. But both objects and objectList fields in the serialize data have list data type. When deserializing, the implementation will create an Object array for objects, but create a ArrayListfor objectList to populate its elements. And the serialized data of Foo can be deserialized into Foo2 too.  Users can also provide meta hints for fields of a type, or the type whole. Here is an example in java which use annotation to provide such information.  @ForyObject(fieldsNullable = false, trackingRef = false) class Foo { @ForyField(trackingRef = false) int[] intArray; @ForyField(polymorphic = true) Object object; @ForyField(tagId = 1, nullable = true) List&lt;Object&gt; objectList; }   Such information can be provided in other languages too:  cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  ","version":"dev","tagName":"h3"},{"title":"Type ID‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type-id","content":" All internal data types are expressed using an ID in range 0~64. Users can use 0~4096 for representing their types.  ","version":"dev","tagName":"h3"},{"title":"Type mapping‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type-mapping","content":" See Type mapping  ","version":"dev","tagName":"h3"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#spec-overview","content":" Here is the overall format:  | fory header | object ref meta | object type meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"dev","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 2 bytes | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | 1 byte | optional 4 bytes | +--------------+---------------+-------+-------+--------+-------+------------+------------------------------------+ | magic number | reserved bits | oob | xlang | endian | null | language | unsigned int for meta start offset |   magic number: used to identify fory serialization protocol, current version use 0x62d4.null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.language: the language when serializing objects, such as JAVA, PYTHON, GO, etc. Fory can use this flag to determine whether spend more time on serialization to make the deserialization faster for dynamic languages.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"dev","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a type), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  For languages which doesn't support reference such as rust, reference tracking must be disabled for correct deserialization by fory rust implementation.  For languages whose object values are not null by default:  In rust, Fory takes Option:None as a null valueIn c++, Fory takes std::nullopt as a null valueIn golang, Fory takes null interface/pointer as a null value  If one want to deserialize in languages like Java/Python/JavaScript, he should mark the type with all fields not-null by default, or using schema-evolution mode to carry the not-null fields info in the data.  ","version":"dev","tagName":"h2"},{"title":"Type Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type-meta","content":" For every type to be serialized, it have a type id to indicate its type.  basic types: the type idenum: Type.ENUM + registered idType.NAMED_ENUM + registered namespace+typename list: Type.Listset: Type.SETmap: Type.MAPext: Type.EXT + registered idType.NAMED_EXT + registered namespace+typename struct: Type.STRUCT + struct metaType.NAMED_STRUCT + struct meta  Every type must be registered with an ID or name first. The registration can be used for security check and type identification.  Struct is a special type, depending whether schema compatibility is enabled, Fory will write struct meta differently.  ","version":"dev","tagName":"h2"},{"title":"Struct Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#struct-schema-consistent","content":" If schema consistent mode is enabled globally when creating fory, type meta will be written as a fory unsigned varint of type_id. Schema evolution related meta will be ignored.If schema evolution mode is enabled globally when creating fory, and current class is configured to use schema consistent mode like struct vs table in flatbuffers: Type meta will be add to captured_type_defs: captured_type_defs[type def stub] = map size ahead when registering type.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.  ","version":"dev","tagName":"h3"},{"title":"Struct Schema evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#struct-schema-evolution","content":" If schema evolution mode is enabled globally when creating fory, and enabled for current type, type meta will be written using one of the following mode. Which mode to use is configured when creating fory.  Normal mode(meta share not enabled): If type meta hasn't been written before, add type defto captured_type_defs: captured_type_defs[type def] = map size.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.After finished the serialization of the object graph, fory will start to write captured_type_defs: Firstly, set current to meta start offset of fory header Then write captured_type_defs one by one: buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs)) for type_meta in writting_type_defs: if not type_meta.is_stub(): type_meta.write_type_def(buffer) writing_type_defs = copy(schema_consistent_type_def_stubs) Meta share mode: the writing steps are same as the normal mode, but captured_type_defs will be shared across multiple serializations of different objects. For example, suppose we have a batch to serialize: captured_type_defs = {} stream = ... # add `Type1` to `captured_type_defs` and write `Type1` fory.serialize(stream, [Type1()]) # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before. fory.serialize(stream, [Type1(), Type2()]) # `Type1` and `Type2` are written before, no need to write meta. fory.serialize(stream, [Type1(), Type2()]) Streaming mode(streaming mode doesn't support meta share): If type meta hasn't been written before, the data will be written as: | unsigned varint: 0b11111111 | type def | If type meta has been written before, the data will be written as: | unsigned varint: written index &lt;&lt; 1 | written index is the id in captured_type_defs. With this mode, meta start offset can be omitted.  The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure in meta share mode doesn't lost shared meta.  Type Def‚Äã  Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | +----------------------+--------------------+-------------------+ | global binary header | meta header | fields meta |   For languages which support inheritance, if parent class and subclass has fields with same name, using field in subclass.  Global binary header‚Äã  50 bits hash + 1bit compress flag + write fields meta + 12 bits meta size. Right is the lower bits.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  Meta header‚Äã  Meta header is a 8 bits number value.  Lowest 5 digits 0b00000~0b11110 are used to record num fields. 0b11111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. Note that num_fields is the number of compatible fields. Users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields.The 6th bit: 0 for registered by id, 1 for registered by name.Remaining 2 bits are reserved for future extension.  Fields meta‚Äã  Format:  | field info: variable bytes | variable bytes | ... | +---------------------------------+-----------------+-----+ | header + type info + field name | next field info | ... |   Field Header‚Äã  Field Header is 8 bits, annotation can be used to provide more specific info. If annotation not exists, fory will infer those info automatically.  The format for field header is:  2 bits field name encoding + 4 bits size + nullability flag + ref tracking flag   Detailed spec:  2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, field name will be written by an unsigned varint tag id, and 2 bits encoding will be 11. size of field name: The 4 bits size: 0~14 will be used to indicate length 1~15, the value 15 indicates to read more bytes, the encoding will encode size - 15 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.  Field Type Info‚Äã  Field type info is written as unsigned int8. Detailed id spec is:  For struct registered by id, it will be Type.STRUCT.For struct registered by name, it will be Type.NAMED_STRUCT.For enum registered by id, it will be Type.ENUM.For enum registered by name, it will be Type.NAMED_ENUM.For ext type registered by id, it will be Type.EXT.For ext type registered by name, it will be Type.NAMED_EXT.For list/set type, it will be written as Type.LIST/SET, then write element type recursively.For 1D primitive array type, it will be written as Type.XXX_ARRAY.For multi-dimensional primitive array type with same size on each dim, it will be written as Type.TENSOR.For other array type, it will be written as Type.LIST, then write element type recursively.For map type, it will be written as Type.MAP, then write key and value type recursively.For other types supported by fory directly, it will be fory type id for that type.For other types not determined at compile time, write Type.UNKNOWN instead. For such types, actual type will be written when serializing such field values.  Polymorphism spec:  struct/named_struct/ext/named_ext are taken as polymorphic, the meta for those types are written separately instead of inlining here to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too.enum is taken as morphic, if deserialization doesn't have this field, or the type is not enum, enum value will be skipped.list/map/set are taken as morphic, when serializing values of those type, the concrete types won't be written again.Other types that fory supported are taken as morphic too.  List/Set/Map nested type spec:  list: | list type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |set: | set type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |map: | set type id | key type info | value type info | Key type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |Value type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |  Field Name‚Äã  If tag id is set, tag id will be used instead. Otherwise meta string of field name will be written instead.  Field order‚Äã  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory fields sort algorithms. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"dev","tagName":"h3"},{"title":"Extended Type Meta with Inheritance support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#extended-type-meta-with-inheritance-support","content":" If one want to support inheritance for struct, one can implement following spec.  ","version":"dev","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#schema-consistent","content":" Fields are serialized from parent type to leaf type. Fields are sorted using fory struct fields sort algorithms.  ","version":"dev","tagName":"h3"},{"title":"Schema Evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#schema-evolution","content":" Meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | variable bytes | variable bytes | +----------------------+----------------+----------------+--------------------+--------------------+ | global binary header | meta header | fields meta | parent meta header | parent fields meta |   Meta header‚Äã  Meta header is a 64 bits number value encoded in little endian order.  Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current type doesn't has parent type, or parent type doesn't have fields to serialize, or we're in a context which serialize fields of current type only, num classes will be 1.The 5th bit is used to indicate whether this type needs schema evolution.Other 56 bits are used to store the unique hash of flags + all layers type meta.  Single layer type meta‚Äã  | unsigned varint | var uint | field info: variable bytes | variable bytes | ... | +-----------------+----------+-------------------------------+-----------------+-----+ | num_fields | type id | header + type id + field name | next field info | ... |   Other layers type meta‚Äã  Same encoding algorithm as the previous layer.  ","version":"dev","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as field names.  ","version":"dev","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"dev","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#value-format","content":" ","version":"dev","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#basic-types","content":" bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  int8‚Äã  size: 1 byteformat: write as pure byte.  int16‚Äã  size: 2 bytebyte order: raw bytes of little endian order  unsigned int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  unsigned varint32‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  signed int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  signed varint32‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encode it as an unsigned varint.  unsigned int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  unsigned varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [0, 2147483647], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  signed int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  signed varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  float32‚Äã  size: 4 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;single format&quot; bit layout, preserving Not-a-Number (NaN) values, then write as binary by little endian order.  float64‚Äã  size: 8 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;double format&quot; bit layout, preserving Not-a-Number (NaN) values. then write as binary by little endian order.  ","version":"dev","tagName":"h3"},{"title":"string‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#string","content":" Format:  | unsigned varint64: size &lt;&lt; 2 `bitor` 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned varint64. The little 2 bits is used for encoding: 0 for latin1(ISO-8859-1), 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. Cross-language string serialization of fory uses utf-8 by default.  ","version":"dev","tagName":"h3"},{"title":"collection/list‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#collectionlist","content":" Format:  | unsigned varint64: length | 1 byte elements header | elements data |   elements header‚Äã  In most cases, all elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the elements have null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the element types are the declared type, use the 3rd bit 0b100 of the header to flag it.If the element types are smae, use the 4th bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom type field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element type info.  fory = ... buffer = ... elems = ... if element_type_is_same: if not is_declared_type: fory.write_type(buffer, elem_type) elem_serializer = get_serializer(...) if track_ref: for elem in elems: if not ref_resolver.write_ref_or_null(buffer, elem): elem_serializer.write(buffer, elem) elif has_null: for elem in elems: if elem is None: buffer.write_byte(null_flag) else: buffer.write_byte(not_null_flag) elem_serializer.write(buffer, elem) else: for elem in elems: elem_serializer.write(buffer, elem) else: if track_ref: for elem in elems: fory.write_ref(buffer, elem) elif has_null: for elem in elems: fory.write_nullable(buffer, elem) else: for elem in elems: fory.write_value(buffer, elem)   CollectionSerializer#writeElementscan be taken as an example.  ","version":"dev","tagName":"h3"},{"title":"array‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#array","content":" primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types or mark it as list type.  Tensor‚Äã  Tensor is a special primitive multi-dimensional array which all dimensions have same size and type. The serialization format is:  | num_dims(unsigned varint) | shape[0](unsigned varint) | shape[...] | shape[N] | element type | data |   The data is continuous to reduce copy and may zero-copy in some cases.  object array‚Äã  Object array is serialized using the list format. Object component type will be taken as list element generic type.  ","version":"dev","tagName":"h3"},{"title":"map‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#map","content":" Map uses a chunk by chunk based Format:  | length(unsigned varint) | key value chunk data | ... | key value chunk data |   map key-value chunk data‚Äã  Map iteration is too expensive, Fory won't compute the header like for list since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide the header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize the map chunk by chunk, every chunk has 255 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. For languages such as golang, this can be computed in advance for non-interface types most times. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Why serialize chunk by chunk?‚Äã  When fory will use first key-value pair to predict header optimistically, it can't know how many pairs have same meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at least X bytes to take up a place for later to update the number which has same elements, X is the num_bytes for encoding varint encoding of map size.  And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust, which object are not reference by default.  Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share meta.  The implementation can accumulate read count with map size to decide whether to read more chunks.  ","version":"dev","tagName":"h3"},{"title":"enum‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"dev","tagName":"h3"},{"title":"decimal‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#decimal","content":" Not supported for now.  ","version":"dev","tagName":"h3"},{"title":"struct‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#struct","content":" Struct means object of class/pojo/struct/bean/record type. Struct will be serialized by writing its fields data in fory order.  Depending on schema compatibility, structs will have different formats.  field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.when same size, sort by type idwhen same size and type id, sort by snake case field nametypes: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64 nullable primitive fields: same order as primitive fieldsmorphic fields: same type together, then sorted by field name lexicographically using snake case style.unknown fields: same sort algorithms as morphic fieldslist fields: same sort algorithms as morphic fieldsset fields: same sort algorithms as morphic fieldsmap fields: same sort algorithms as morphic fields  Field order‚Äã  Fields in a struct are sorted in a ascending order by:  primitive fields first: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64, sorted by type id.nullable primitive fieldsmorphic types except list/set/mapunknown typeslist typesset typesmap types  If two fields have same type, then sort by snake_case styled field name.  schema consistent‚Äã  Object will be written as:  | 4 byte | variable bytes | +---------------+------------------+ | type hash | field values |   Type hash is used to check the type schema consistency across languages. Type hash will be the first 32 bits of 56 bits value of the type meta.  Object fields will be serialized one by one using following format:  not null primitive field value: | var bytes | +----------------+ | value data | +----------------+ nullable primitive field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | type meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | type meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For the object type, schema consistent mode will write type by id only, but schema evolution mode will write type consisting of field names, types and other meta too, see Type meta.Type meta of final custom type needs to be written too, because peers may not have this type defined.  ","version":"dev","tagName":"h3"},{"title":"Type‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#type","content":" Type will be serialized using type meta format.  ","version":"dev","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#implementation-guidelines","content":" ","version":"dev","tagName":"h2"},{"title":"How to reduce memory read/write code‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#how-to-reduce-memory-readwrite-code","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches.  ","version":"dev","tagName":"h3"},{"title":"Fast deserialization for static languages without runtime codegen support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/next/specification/fory_xlang_serialization_spec#fast-deserialization-for-static-languages-without-runtime-codegen-support","content":" For type evolution, the serializer will encode the type meta into the serialized data. The deserializer will compare this meta with class meta in the current process, and use the diff to determine how to deserialize the data.  For java/javascript/python, we can use the diff to generate serializer code at runtime and load it as class/function for deserialization. In this way, the type evolution will be as fast as type consist mode.  For C++/Rust, we can't generate the serializer code at runtime. So we need to generate the code at compile-time using meta programming. But at that time, we don't know the type schema in other processes, so we can't generate the serializer code for such inconsistent types. We may need to generate the code which has a loop and compare field name one by one to decide whether to deserialize and assign the field or skip the field value.  One fast way is that we can optimize the string comparison into jump instructions:  Assume the current type has n fields, and the peer type has n1 fields.Generate an auto growing field id from 0 for every sorted field in the current type at the compile time.Compare the received type meta with current type, generate same id if the field name is same, otherwise generate an auto growing id starting from n, cache this meta at runtime.Iterate the fields of received type meta, use a switch to compare the field id to deserialize data and assign/skip field value. Continuous field id will be optimized into jump in switch block, so it will very fast.  Here is an example, suppose process A has a class Foo with version 1 defined as Foo1, process B has a class Foowith version 2 defined as Foo2:  // class Foo with version 1 class Foo1 { int32_t v1; // id 0 std::string v2; // id 1 }; // class Foo with version 2 class Foo2 { // id 0, but will have id 2 in process A bool v0; // id 1, but will have id 0 in process A int32_t v1; // id 2, but will have id 3 in process A int64_t long_value; // id 3, but will have id 1 in process A std::string v2; // id 4, but will have id 4 in process A std::vector&lt;std::string&gt; list; };   When process A received serialized Foo2 from process B, here is how it deserialize the data:  Foo1 foo1 = ...; const std::vector&lt;fory::FieldInfo&gt; &amp;field_infos = type_meta.field_infos; for (const auto &amp;field_info : field_infos) { switch (field_info.field_id) { case 0: foo1.v1 = buffer.read_varint32(); break; case 1: foo1.v2 = fory.read_string(); break; default: fory.skip_data(field_info); } }  ","version":"dev","tagName":"h3"},{"title":"Xlang Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/xlang_object_graph_guide","content":"","keywords":"","version":"dev"},{"title":"Serialize built-in types‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/next/guide/xlang_object_graph_guide#serialize-built-in-types","content":" Common types can be serialized automatically: primitive numeric types, string, binary, array, list, map and so on.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"dev","tagName":"h2"},{"title":"Serialize custom types‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/next/guide/xlang_object_graph_guide#serialize-custom-types","content":" Serializing user-defined types needs registering the custom type using the register API to establish the mapping relationship between the type in different languages.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_type(SomeClass1, typename=&quot;example.SomeClass1&quot;) f.register_type(SomeClass2, typename=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"dev","tagName":"h2"},{"title":"Serialize Shared Reference and Circular Reference‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/next/guide/xlang_object_graph_guide#serialize-shared-reference-and-circular-reference","content":" Shared reference and circular reference can be serialized automatically, no duplicate data or recursion error.  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from '@apache-fory/fory'; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@apache-fory/hps'; const description = Type.object('example.foo', { foo: Type.string(), bar: Type.object('example.foo'), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data: any = { foo: 'hello fory', }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   JavaScriptReference cannot be implemented because of rust ownership restrictions  ","version":"dev","tagName":"h2"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Xlang Serialization Guide","url":"/zh-CN/docs/next/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"dev","tagName":"h2"},{"title":"Â¶Ç‰ΩïÂèëÂ∏É","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_release","content":"","keywords":"","version":"0.12"},{"title":"‰ªãÁªç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#‰ªãÁªç","content":" Ê∫ê‰ª£Á†ÅÂèëÂ∏ÉÊòØ Apache ÊúÄÈáçËßÜ‰ª•ÂèäÊúÄÈáçË¶ÅÁöÑÈÉ®ÂàÜ„ÄÇ  ËØ∑Ê≥®ÊÑèËÆ∏ÂèØËØÅÂíåÂèëÂ∏ÉÁöÑËΩØ‰ª∂Á≠æÂêçÈóÆÈ¢ò„ÄÇÂèëÂ∏ÉËΩØ‰ª∂ÊòØ‰∏Ä‰ª∂‰∏•ËÇÉÁöÑ‰∫ãÊÉÖÔºåÂπ∂‰ºö‰∫ßÁîüÁõ∏Â∫îÁöÑÊ≥ïÂæãÂêéÊûú„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"release manager Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#release-manager-Á¨¨‰∏ÄÊ¨°ÂèëÂ∏É","content":" ","version":"0.12","tagName":"h2"},{"title":"ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÁéØÂ¢ÉË¶ÅÊ±Ç","content":" Ê≠§ÂèëÂ∏ÉËøáÁ®ãÂú® Ubuntu Á≥ªÁªü‰∏≠ËøêË°åÔºåÈúÄË¶Å‰ª•‰∏ãÂá†‰∏™ÁéØÂ¢É‰æùËµñÔºö  JDK 1.8+Apache Maven 3.x+Python 3.8GnuPG 2.xGitSVNÔºàApache Âü∫Èáë‰ºö‰ΩøÁî® svn Êù•ÊâòÁÆ°È°πÁõÆÂèëÂ∏ÉÔºâËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÔºöÂ¶ÇÊûúÊÇ®Âú®‰∏çÂêåÁöÑÁõÆÂΩï‰∏ãÈÖçÁΩÆ‰∫Ü gpg ÂØÜÈí•ÔºåËØ∑ÊâßË°å export GNUPGHOME=$(xxx) ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂáÜÂ§á GPG ÂØÜÈí•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂáÜÂ§á-gpg-ÂØÜÈí•","content":" Â¶ÇÊûúÊÇ®ÊòØÁ¨¨‰∏ÄÊ¨°‰Ωú‰∏∫ËΩØ‰ª∂ÂèëÂ∏ÉËÄÖÔºåÊÇ®ÈúÄË¶ÅÂáÜÂ§á‰∏Ä‰∏™ GPG ÂØÜÈí•„ÄÇ  ÊÇ®ÂèØ‰ª•ÂèÇËÄÉËøôÈáåÁöÑÂø´ÈÄüÂºÄÂßãËé∑Âèñ‰∏Ä‰∏™ GPG ÂØÜÈí•ÊàñËÄÖËé∑ÂèñÊõ¥Â§öÁõ∏ÂÖ≥‰ø°ÊÅØ„ÄÇ  ÂÆâË£Ö GPG‚Äã  sudo apt install gnupg2   ÁîüÊàê GPG ÂØÜÈí•‚Äã  ËØ∑‰ΩøÁî®ÊÇ®ÁöÑ Apache ÂêçÂ≠óÂíåÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁîüÊàê GPG ÂØÜÈí•Ôºö  $ gpg --full-gen-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 # input 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 # input 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n years Key is valid for? (0) 0 # input 0 Key does not expire at all Is this correct? (y/N) y # input y GnuPG needs to construct a user ID to identify your key. Real name: Chaokun Yang # input your name Email address: chaokunyang@apache.org # input your email Comment: CODE SIGNING KEY # input some annotations, optional You selected this USER-ID: &quot;Chaokun &lt;chaokunyang@apache.org&gt;&quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. # Input the security key ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Please enter this passphrase ‚îÇ ‚îÇ ‚îÇ ‚îÇ Passphrase: _______________________________ ‚îÇ ‚îÇ ‚îÇ ‚îÇ &lt;OK&gt; &lt;Cancel&gt; ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò # key generation will be done after your inputting the key with the following output gpg: key E49B00F626B marked as ultimately trusted gpg: revocation certificate stored as '/Users/chaokunyang/.gnupg/openpgp-revocs.d/1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4.rev' public and secret key created and signed. pub rsa4096 2022-07-12 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] Chaokun &lt;chaokunyang@apache.org&gt; sub rsa4096 2022-07-12 [E]   ‰∏ä‰º†ÂÖ¨Èí•Ëá≥ GPG ÂØÜÈí•ÊúçÂä°Âô®‚Äã  È¶ñÂÖàÔºåÂàóÂá∫ÊÇ®ÊâÄÂàõÂª∫ÁöÑ GPG ÂØÜÈí•Ôºö  gpg --list-keys   ÊâßË°åÁõ∏ÂÖ≥ÂëΩ‰ª§‰πãÂêéÔºåÊÇ®Â∞ÜÁúãÂà∞Â¶Ç‰∏ãËæìÂá∫Ôºö  -------------------------------------------------- pub rsa4096 2024-03-27 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; sub rsa4096 2024-03-27 [E]   ÁÑ∂ÂêéÔºåÂ∞ÜÊÇ®ÁöÑÂØÜÈí• ID ÂèëÈÄÅÂà∞ÂØÜÈí•ÊúçÂä°Âô®Ôºö  gpg --keyserver keys.openpgp.org --send-key &lt;key-id&gt; # e.g., 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4   ÂÖ∂‰∏≠Ôºåkeys.openpgp.org ÊòØ‰∏Ä‰∏™ÈöèÊú∫ÈÄâÊã©ÁöÑÂØÜÈí•ÊúçÂä°Âô®ÔºåÂèØ‰ª•‰ΩøÁî® keyserver.ubuntu.com Êàñ‰ªª‰ΩïÂÖ∂‰ªñÂäüËÉΩÂÆåÂ§áÁöÑÂØÜÈí•ÊúçÂä°Âô®„ÄÇ  Ê£ÄÊü•ÂØÜÈí•ÊòØÂê¶ÂàõÂª∫ÊàêÂäü‚Äã  ‰∏ä‰º†Â§ßÁ∫¶ÈúÄË¶Å‰∏ÄÂàÜÈíüÔºõ‰πãÂêéÔºåÊÇ®ÂèØ‰ª•ÈÄöËøáÁîµÂ≠êÈÇÆ‰ª∂Âú®Áõ∏Â∫îÁöÑÂØÜÈí•ÊúçÂä°Âô®‰∏äÊ£ÄÊü•„ÄÇ  Â∞ÜÂØÜÈí•‰∏ä‰º†Âà∞ÂØÜÈí•ÊúçÂä°Âô®ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØ‰∏∫‰∫ÜÂä†ÂÖ•‰∏Ä‰∏™ÂèØ‰ø°ÁöÑ‰ø°‰ªªÁΩëÁªú„ÄÇ  Â∞Ü GPG ÂÖ¨Èí•Ê∑ªÂä†Âà∞È°πÁõÆ KEYS Êñá‰ª∂‰∏≠‚Äã  ÂèëÂ∏ÉÂàÜÊîØÁöÑ svn ‰ªìÂ∫ìÊòØÔºöhttps://dist.apache.org/repos/dist/release/incubator/fory  ËØ∑Âú®ÂèëÂ∏ÉÂàÜÊîØÁöÑ KEYS ‰∏≠Ê∑ªÂä†ÂÖ¨Èí•Ôºö  svn co https://dist.apache.org/repos/dist/release/incubator/fory fory-dist # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. cd fory-dist (gpg --list-sigs YOUR_NAME@apache.org &amp;&amp; gpg --export --armor YOUR_NAME@apache.org) &gt;&gt; KEYS # Append your key to the KEYS file svn add . # It is not needed if the KEYS document exists before. svn ci -m &quot;add gpg key for YOUR_NAME&quot; # Later on, if you are asked to enter a username and password, just use your apache username and password.   Â∞Ü GPG ÂÖ¨Èí•‰∏ä‰º†Âà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑‚Äã  ËæìÂÖ• https://github.com/settings/keys ‰ª•Ê∑ªÂä†ÊÇ®ÁöÑ GPG ÂØÜÈí•„ÄÇÂ¶ÇÊûúÊ∑ªÂä†ÂêéÂèëÁé∞‚ÄúÊú™È™åËØÅ‚ÄùÂ≠óÊ†∑ÔºåËØ∑Â∞Ü GPG ÂØÜÈí•‰∏≠‰ΩøÁî®ÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁªëÂÆöÂà∞ÊÇ®ÁöÑ GitHub Â∏êÊà∑Ôºàhttps://github.com/settings/emailsÔºâ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Âª∂‰º∏ÈòÖËØª‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#Âª∂‰º∏ÈòÖËØª","content":" Âª∫ËÆÆÊÇ®Âú®ÂèëÂ∏É‰πãÂâçÈòÖËØª‰ª•‰∏ãÊñáÊ°£Ôºå‰∫ÜËß£ÊúâÂÖ≥ Apache Âü∫Èáë‰ºöÂèëÂ∏ÉËΩØ‰ª∂ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºå‰ΩÜËøô‰∏çÊòØÂøÖÈ°ªÁöÑÔºö  ÂèëÂ∏ÉÊîøÁ≠ñÔºöhttps://www.apache.org/legal/release-policy.htmlTLP ÁâàÊú¨Ôºöhttps://infra.apache.org/release-distributionÂèëÂ∏ÉÊ†áÂøóÔºöhttps://infra.apache.org/release-signing.htmlÂèëÂ∏ÉÂèëÂ∏ÉÔºöhttps://infra.apache.org/release-publishing.htmlÂèëÂ∏É‰∏ãËΩΩÈ°µÈù¢Ôºöhttps://infra.apache.org/release-download-pages.htmlÂèëÂ∏É maven artifactsÔºöhttps://infra.apache.org/publishing-maven-artifacts.html  ","version":"0.12","tagName":"h3"},{"title":"ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂºÄÂßãÊúâÂÖ≥ÂèëÂ∏ÉÁöÑËÆ®ËÆ∫","content":" ÈÄöËøáÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥‰ª•‰∏ãÂú∞ÂùÄÂèëËµ∑ÊúâÂÖ≥‰∏ã‰∏Ä‰∏™ÁâàÊú¨ÁöÑËÆ®ËÆ∫Ôºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [DISCUSS] Release Apache Fory(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community, This is a call for a discussion to release Apache Fory(incubating) version ${release_version}. The change lists about this release: https://github.com/apache/fory/compare/v0.4.1...v0.5.0 Please leave your comments here about this release plan. We will bump the version in repo and start the release process after the discussion. Thanks, ${name}   ","version":"0.12","tagName":"h2"},{"title":"ÂáÜÂ§áÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂáÜÂ§áÂèëÂ∏É","content":" Â¶ÇÊûúËÆ®ËÆ∫ÁªìÊûú‰∏≠Ê≤°ÊúâÂá∫Áé∞ÂèçÂØπÂ£∞Èü≥ÔºåÊÇ®ÈúÄË¶ÅÂÅö‰∏Ä‰∫õÂèëÂ∏ÉÁâàÊú¨ÁöÑÂáÜÂ§áÂ∑•‰Ωú„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Github ÂàÜÊîØÂíåÊ†áÁ≠æ‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#github-ÂàÜÊîØÂíåÊ†áÁ≠æ","content":" ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ releases-0.5.0ÈÄöËøáÊâßË°åÂëΩ‰ª§Â∞ÜÁâàÊú¨ $version ÂçáÁ∫ßÂà∞ python ci/release.py bump_version -l all -version $versionÊâßË°å git commit Âπ∂Â∞ÜÂàÜÊîØÊé®ÈÄÅÂà∞ git@github.com:apache/fory.gitÈÄöËøá git tag v0.5.0-rc1 ÂàõÂª∫‰∏Ä‰∏™Êñ∞Ê†áÁ≠æÔºåÁÑ∂ÂêéÂ∞ÜÂÖ∂Êé®ÈÄÅÂà∞ git@github.com:apache/fory.git  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ artifacts Âπ∂‰∏ä‰º†Âà∞ SVN dist/dev ‰ªìÂ∫ì‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÊûÑÂª∫-artifacts-Âπ∂‰∏ä‰º†Âà∞-svn-distdev-‰ªìÂ∫ì","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÈÄöËøá python ci/release.py build -v $version ÊûÑÂª∫È¢ÑÂèëÂ∏É artifacts„ÄÇ  ÁÑ∂ÂêéÊÇ®ÈúÄË¶ÅÊääÂÆÉ‰∏ä‰º†Âà∞ svn dist repo„ÄÇdev ÂàÜÊîØÁöÑ dist ‰ªìÂ∫ìÂú∞ÂùÄÊòØÔºöhttps://dist.apache.org/repos/dist/dev/incubator/fory  # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. svn co https://dist.apache.org/repos/dist/dev/incubator/fory fory-dist-dev   ÁÑ∂ÂêéÔºå‰∏ä‰º†È°πÁõÆÔºö  cd fory-dist-dev # create a directory named by version mkdir ${release_version}-${rc_version} # copy source code and signature package to the versioned directory cp ${repo_dir}/dist/* ${release_version}-${rc_version} # check svn status svn status # add to svn svn add ${release_version}-${rc_version} # check svn status svn status # commit to SVN remote server svn commit -m &quot;Prepare for fory ${release_version}-${rc_version}&quot;   ËÆøÈóÆ https://dist.apache.org/repos/dist/dev/incubator/fory/ ‰ª•Ê£ÄÊü• artifacts ÊòØÂê¶Ê≠£Á°Æ‰∏ä‰º†„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#Â¶ÇÊûúÂá∫Áé∞ÈóÆÈ¢òËØ•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊüê‰∫õÊñá‰ª∂ÊòØÊÑèÂ§ñÂá∫Áé∞ÊàñËÄÖÂèëÁîüÊüê‰∫õÈîôËØØÔºåÂàôÈúÄË¶ÅÂà†Èô§Áõ∏ÂÖ≥ÂÜÖÂÆπÂπ∂ÊâßË°å svn deleteÔºåÁÑ∂ÂêéÈáçÂ§ç‰∏äËø∞‰∏ä‰º†ËøáÁ®ã„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÊäïÁ•®","content":" Êñ∞ÁâàÊú¨ÂèëÂ∏ÉÈúÄË¶Å Apache Fory Á§æÂå∫ÁöÑÊäïÁ•®„ÄÇ  release_versionÔºöFory ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0„ÄÇrelease_candidate_versionÔºöÊäïÁ•®ÁöÑÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1„ÄÇmaven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001. ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂèØ‰ª•ÈÄöËøáÊêúÁ¥¢ ‚Äúfory‚Äù Êù•ÊâæÂà∞ maven_artifact_number https://repository.apache.org/#stagingRepositories.  ","version":"0.12","tagName":"h2"},{"title":"Fory Á§æÂå∫ÊäïÁ•®‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#fory-Á§æÂå∫ÊäïÁ•®","content":" ÂèëÈÄÅÁîµÂ≠êÈÇÆ‰ª∂Ëá≥ Fory CommunityÔºödev@fory.apache.orgÔºö  Ê†áÈ¢òÔºö  [VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community: This is a call for vote to release Apache Fory(Incubating) version release-0.5.0-rc3. Apache Fory(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The change lists about this release: https://github.com/apache/fory/compare/v0.4.1...v0.5.0-rc3 The release candidates: https://dist.apache.org/repos/dist/dev/incubator/fory/0.5.0-rc3/ The maven staging for this release: https://repository.apache.org/content/repositories/orgapachefory-1003 Git tag for the release: https://github.com/apache/fory/releases/tag/v0.5.0-rc3 Git commit for the release: https://github.com/apache/fory/commit/fae06330edd049bb960536e978a45b97bca66faf The artifacts signed with PGP key [5E580BA4], corresponding to [chaokunyang@apache.org], that can be found in keys file: https://downloads.apache.org/incubator/fory/KEYS The vote will be open for at least 72 hours until the necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about Fory, please see https://fory.apache.org/ *Valid check is a requirement for a vote. *Checklist for reference: [ ] Download Fory is valid. [ ] Checksums and PGP signatures are valid. [ ] Source code distributions have correct names matching the current release. [ ] LICENSE and NOTICE files are correct. [ ] All files have license headers if necessary. [ ] No compiled archives bundled in source archive. [ ] Can compile from source. More detail checklist please refer: https://cwiki.apache.org/confluence/display/INCUBATOR/Incubator+Release+Checklist How to Build and Test, please refer to: https://github.com/apache/fory/blob/main/docs/guide/DEVELOPMENT.md Thanks, Chaokun Yang   Âú®Ëá≥Â∞ëËé∑Âæó 3 + 1 ‰∏îÂÖ∑ÊúâÁ∫¶ÊùüÂäõÁöÑÊäïÁ•®ÔºàÊù•Ëá™ Fory Podling PMC ÊàêÂëòÂíåÊèê‰∫§ËÄÖÔºâÂπ∂Ê≤°ÊúâÊî∂Âà∞Âê¶ÂÜ≥Á•®‰πãÂêéÔºåÂèëÂ∏ÉÊäïÁ•®ÁªìÊûúÔºö  Ê†áÈ¢òÔºö  [RESULT][VOTE] Release Apache Fory(incubating) v${release_version}-${rc_version}   ÂÜÖÂÆπÔºö  Hello, Apache Fory(incubating) Community, The vote to release Apache Fory(Incubating) v${release_version}-${rc_version} has passed. The vote PASSED with 3 binding +1 and 0 -1 vote: Binding votes: - xxx - yyy - zzz Vote thread: ${vote_thread_url} Thanks, ${name}   ","version":"0.12","tagName":"h3"},{"title":"Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÊÄé‰πàÂäû","content":" Â¶ÇÊûúÊäïÁ•®Â§±Ë¥•ÔºåËØ∑ÂçïÂáª‚ÄúÂà†Èô§‚Äù‰ª•Âà†Èô§ÊöÇÂ≠òÁöÑ Maven artifacts„ÄÇ  Ëß£ÂÜ≥ÊèêÂá∫ÁöÑÈóÆÈ¢òÔºåÁÑ∂ÂêéÂÜçÊ¨°ÊèêÂá∫ rc_version ÁöÑÊñ∞ÊäïÁ•®„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂÆòÊñπÂèëÂ∏É‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂÆòÊñπÂèëÂ∏É","content":" ","version":"0.12","tagName":"h2"},{"title":"Â∞Ü artifacts ÂèëÂ∏ÉÂà∞ SVN ÂèëÂ∏ÉÁõÆÂΩï‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#Â∞Ü-artifacts-ÂèëÂ∏ÉÂà∞-svn-ÂèëÂ∏ÉÁõÆÂΩï","content":" release_versionÔºöFory ÁöÑÂèëÂ∏ÉÁâàÊú¨ÔºåÂ¶Ç 0.5.0release_candidate_versionÔºöÊäïÁ•®ÁâàÊú¨ÔºåÂ¶Ç 0.5.0-rc1  svn mv https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version} https://dist.apache.org/repos/dist/release/incubator/fory/${release_version} -m &quot;Release fory ${release_version}&quot;   ","version":"0.12","tagName":"h3"},{"title":"Êõ¥Êîπ Fory ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#Êõ¥Êîπ-fory-ÁΩëÁ´ô‰∏ãËΩΩÈìæÊé•","content":" Êèê‰∫§ PR Âà∞ https://github.com/apache/fory-site ‰ªìÂ∫ìÊõ¥Êñ∞ Fory ÁâàÊú¨Ôºå‰∏ãËΩΩÈ°µÈù¢  ","version":"0.12","tagName":"h3"},{"title":"ÂèëÂ∏É Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂèëÂ∏É-maven-artifacts","content":" maven_artifact_numberÔºöMaven ÊöÇÂ≠ò artifacts ÁöÑÊï∞Èáè„ÄÇÂ¶Ç 1001„ÄÇÊâìÂºÄhttps://repository.apache.org/#stagingRepositories.ÊâæÂà∞ artifacts orgapachefory-${maven_artifact_number}ÔºåÁÇπÂáª‚ÄúÂèëÂ∏É‚Äù„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂèëÈÄÅÂÖ¨Âëä‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÂèëÂ∏É","url":"/zh-CN/docs/community/how_to_release#ÂèëÈÄÅÂÖ¨Âëä","content":" Â∞ÜÂèëÂ∏ÉÂÖ¨ÂëäÂèëÈÄÅÁªô dev@fory.apache.org Âπ∂‰∏îÊäÑÈÄÅÁªô announce@apache.org„ÄÇ  Ê†áÈ¢òÔºö  [ANNOUNCE] Release Apache Fory(incubating) ${release_version}   ÂÜÖÂÆπÔºö  Hi all, The Apache Fory(incubating) community is pleased to announce that Apache Fory(incubating) {release_version} has been released! Apache Fory(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The release notes are available here: https://github.com/apache/fory/releases/tag/v${release_version} For the complete list of changes: https://github.com/apache/fory/compare/v0.5.0...v${release_version} Apache Fory website: https://fory.apache.org/ Download Links: https://fory.apache.org/download Fory Resources: - Fory github repo: https://github.com/apache/fory - Issue: https://github.com/apache/fory/issues - Mailing list: dev@fory.apache.org We are looking to grow our community and welcome new contributors. If you are interested in contributing to Fory, please contact us on the mailing list or on GitHub. We will be happy to help you get started. ------------------ Best Regards, ${your_name}   Ëá≥Ê≠§ÔºåÊï¥‰∏™ÂèëÂ∏ÉÊµÅÁ®ãÁªìÊùü„ÄÇ ","version":"0.12","tagName":"h3"},{"title":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_verify","content":"","keywords":"","version":"0.12"},{"title":"‰∏ãËΩΩ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/community/how_to_verify#‰∏ãËΩΩ-apache-fory","content":" # If there is svn locally, you can clone to the local svn co https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/ # You can download the material file directly wget https://dist.apache.org/repos/dist/dev/incubator/fory/${release_version}-${rc_version}/xxx.xxx   ","version":"0.12","tagName":"h2"},{"title":"È™åËØÅ checksums Âíå signatures‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/community/how_to_verify#È™åËØÅ-checksums-Âíå-signatures","content":" È¶ñÂÖàÔºåÊÇ®ÈúÄË¶ÅÂÆâË£Ö gpgÔºö  apt-get install gnupg # or yum install gnupg # or brew install gnupg   ‰πãÂêéÔºåÂØºÂÖ• Apache Fory‚Ñ¢ release manager ÁöÑÂÖ¨Èí•Ôºö  curl https://downloads.apache.org/incubator/fory/KEYS &gt; KEYS # Download KEYS gpg --import KEYS # Import KEYS to local # Then, trust the public key: gpg --edit-key &lt;KEY-used-in-this-version&gt; # Edit the key(mentioned in vote email) # It will enter the interactive mode, use the following command to trust the key: gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; gpg&gt; trust pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: ultimate validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please note that the shown key validity is not necessarily correct unless you restart the program.   Êé•‰∏ãÊù•È™åËØÅÁ≠æÂêçÔºö  for i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done   Â¶ÇÊûúÂá∫Áé∞Â¶Ç‰∏ãÂÜÖÂÆπÔºåÂàôË°®Á§∫Á≠æÂêçÊ≠£Á°ÆÔºö  apache-fory-incubating-0.5.0-src.tar.gz gpg: Signature made Wed 17 Apr 2024 11:49:45 PM CST using RSA key ID 5E580BA4 gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Good signature from &quot;chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt;&quot;   ÁÑ∂ÂêéÈ™åËØÅ checksumÔºö  for i in *.tar.gz; do echo $i; sha512sum --check $i.sha512; done   ÂÆÉÂ∫îËØ•ËæìÂá∫Â¶Ç‰∏ãÂÜÖÂÆπÔºö  apache-fory-incubating-0.5.0-src.tar.gz apache-fory-incubating-0.5.0-src.tar.gz: OK   ","version":"0.12","tagName":"h2"},{"title":"Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/community/how_to_verify#Ê£ÄÊü•Ê∫êÁ†ÅÂåÖ‰∏≠ÁöÑÊñá‰ª∂","content":" Ëß£ÂéãÁº© apache-fory-${release_version}-${rc_version}-src.tar.gz Âπ∂Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  Ê≠§Â≠òÂÇ®Â∫ì LICENSE Âíå NOTICE Êñá‰ª∂ÊòØÊ≠£Á°ÆÁöÑÔºõÂ¶ÇÊúâÂøÖË¶ÅÔºåÊâÄÊúâÊñá‰ª∂ÈÉΩÊúâ ASF ËÆ∏ÂèØËØÅÊ†áÂ§¥ÔºõÈ°πÁõÆÊûÑÂª∫ÈÄöËøá„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Ê£ÄÊü• fory-java ÁöÑ Maven artifacts‚Äã","type":1,"pageTitle":"Â¶Ç‰ΩïÈ™åËØÅ Apache Fory‚Ñ¢","url":"/zh-CN/docs/community/how_to_verify#Ê£ÄÊü•-fory-java-ÁöÑ-maven-artifacts","content":" ‰∏ãËΩΩ Apache ForyÔºöhttps://repository.apache.org/content/repositories/orgapachefory-${maven_artifact_number}/.  ÊÇ®ÂèØ‰ª•Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπÔºö  JAR ÁöÑ Checksum ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ checksum Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR ÁöÑ signature ‰∏éÈ°πÁõÆÁªëÂÆöÁöÑ signature Êñá‰ª∂‰∏ÄËá¥„ÄÇJAR Âú®Êú¨Âú∞ÊòØÂèØÈáçÂ§çÁöÑ„ÄÇËøôÊÑèÂë≥ÁùÄÊÇ®ÂèØ‰ª•Âú®ËÆ°ÁÆóÊú∫‰∏äÊûÑÂª∫ JARÔºåÂπ∂È™åËØÅ checksum Âíå‰∏éÈ°πÁõÆÁªëÂÆöÁöÑÁõ∏Âêå„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Nominate Committer","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/nominate_committer","content":"","keywords":"","version":"0.12"},{"title":"Discusstion‚Äã","type":1,"pageTitle":"Nominate Committer","url":"/zh-CN/docs/community/nominate_committer#discusstion","content":" Start a discusstion abouthe the candidate via sending email to: private@fory.apache.org  To: private@[project].apache.org Subject: [DISCUSS] New committer: [Candidate Name] I propose to add [Candidate Name] as a committer. [State reasons that you believe they are a good candidate.] [State contribution statistics, if available and relevant.] Please remember that should this candidate be elected as a PMC member at some later date, they will have access to our archives, and be able to read this, so phrase your comments constructively with this in mind.   ","version":"0.12","tagName":"h2"},{"title":"Start vote about the candidate‚Äã","type":1,"pageTitle":"Nominate Committer","url":"/zh-CN/docs/community/nominate_committer#start-vote-about-the-candidate","content":" Start a vote about the candidate via sending email to: private@fory.apache.org:  candidate name: The full name of the candidate.candidate github_id: The GitHub id of the candidate.  Email Template:  To: private@[PROJECT].apache.org Subject: [VOTE] New committer: [Candidate Name] This is a VOTE to add [Candidate Name] as a committer. This has been discussed here: [Link to DISCUSS thread on lists.apache.org] If you have more to add to the discussion, please do so there, rather than in this VOTE thread. [+1] Yes, add this committer [0] Abstain [-1] No, do not add this committer Voting ends one week from today, i.e. midnight UTC on YYYY-MM-DD https://www.timeanddate.com/counters/customcounter.html?year=YYYY&amp;month=MM&amp;day=DD See voting guidelines at https://community.apache.org/pmc/adding-committers.html   ","version":"0.12","tagName":"h2"},{"title":"Add the candidate to the committer list‚Äã","type":1,"pageTitle":"Nominate Committer","url":"/zh-CN/docs/community/nominate_committer#add-the-candidate-to-the-committer-list","content":" After the candidate accepts the invitation and the iCLA is recorded, add the candidate to the committer list by whimsy roster tools  ","version":"0.12","tagName":"h2"},{"title":"Announcement‚Äã","type":1,"pageTitle":"Nominate Committer","url":"/zh-CN/docs/community/nominate_committer#announcement","content":" Once the nominee accepts the invitation and the commit bit is granted, it's encouraged to send an announcement email to dev@fory.apache.org to welcome the new committers. Here is an email template:  To: dev@[PROJECT].apache.org Subject: New committer: [Committer Name] The Project Management Committee (PMC) for Apache [PROJECT] has invited [Committer Name] to become a committer and we are pleased to announce that they have accepted. Please join us in welcoming [Committer Name] to their new role and responsibility in our project community. [Your Name] On behalf of the [Project] PMC  ","version":"0.12","tagName":"h2"},{"title":"Java Serialization Guide","type":0,"sectionRef":"#","url":"/zh-CN/docs/next/guide/java_object_graph_guide","content":"","keywords":"","version":"dev"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#quick-start","content":" Note that fory creation is not cheap, the fory instances should be reused between serializations instead of creating it everytime. You should keep fory to a static global variable, or instance variable of some singleton object or limited objects.  Fory for single-thread usage:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If class registration enabled, all custom types must be registered. fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory for multiple-thread usage:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory instances reuse example:  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // reuse fory. private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"dev","tagName":"h2"},{"title":"ForyBuilder options‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#forybuilder-options","content":" Option Name\tDescription\tDefault ValuetimeRefIgnored\tWhether to ignore reference tracking of all time types registered in TimeSerializers and subclasses of those types when ref tracking is enabled. If ignored, ref tracking of every time type can be enabled by invoking Fory#registerSerializer(Class, Serializer). For example, fory.registerSerializer(Date.class, new DateSerializer(fory, true)). Note that enabling ref tracking should happen before serializer codegen of any types which contain time fields. Otherwise, those fields will still skip ref tracking.\ttrue compressInt\tEnables or disables int compression for smaller size.\ttrue compressLong\tEnables or disables long compression for smaller size.\ttrue compressIntArray\tEnables or disables SIMD-accelerated compression for int arrays when values can fit in smaller data types. Requires Java 16+.\ttrue compressLongArray\tEnables or disables SIMD-accelerated compression for long arrays when values can fit in smaller data types. Requires Java 16+.\ttrue compressString\tEnables or disables string compression for smaller size.\tfalse classLoader\tThe classloader should not be updated; Fory caches class metadata. Use LoaderBinding or ThreadSafeFory for classloader updates.\tThread.currentThread().getContextClassLoader() compatibleMode\tType forward/backward compatibility config. Also Related to checkClassVersion config. SCHEMA_CONSISTENT: Class schema must be consistent between serialization peer and deserialization peer. COMPATIBLE: Class schema can be different between serialization peer and deserialization peer. They can add/delete fields independently. See more.\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tDetermines whether to check the consistency of the class schema. If enabled, Fory checks, writes, and checks consistency using the classVersionHash. It will be automatically disabled when CompatibleMode#COMPATIBLE is enabled. Disabling is not recommended unless you can ensure the class won't evolve.\tfalse checkJdkClassSerializable\tEnables or disables checking of Serializable interface for classes under java.*. If a class under java.* is not Serializable, Fory will throw an UnsupportedOperationException.\ttrue registerGuavaTypes\tWhether to pre-register Guava types such as RegularImmutableMap/RegularImmutableList. These types are not public API, but seem pretty stable.\ttrue requireClassRegistration\tDisabling may allow unknown classes to be deserialized, potentially causing security risks.\ttrue requireClassRegistration\tSet max depth for deserialization, when depth exceeds, an exception will be thrown. This can be used to refuse deserialization DDOS attack.\t50  | suppressClassRegistrationWarnings | Whether to suppress class registration warnings. The warnings can be used for security audit, but may be annoying, this suppression will be enabled by default. | true | | metaShareEnabled | Enables or disables meta share mode. | true if CompatibleMode.Compatible is set, otherwise false. | | scopedMetaShareEnabled | Scoped meta share focuses on a single serialization process. Metadata created or identified during this process is exclusive to it and is not shared with by other serializations. | true if CompatibleMode.Compatible is set, otherwise false. | | metaCompressor | Set a compressor for meta compression. Note that the passed MetaCompressor should be thread-safe. By default, a Deflater based compressor DeflaterMetaCompressor will be used. Users can pass other compressor such as zstd for better compression rate. | DeflaterMetaCompressor | | deserializeNonexistentClass | Enables or disables deserialization/skipping of data for non-existent classes. | true if CompatibleMode.Compatible is set, otherwise false. | | codeGenEnabled | Disabling may result in faster initial serialization but slower subsequent serializations. | true | | asyncCompilationEnabled | If enabled, serialization uses interpreter mode first and switches to JIT serialization after async serializer JIT for a class is finished. | false | | scalaOptimizationEnabled | Enables or disables Scala-specific serialization optimization. | false | | copyRef | When disabled, the copy performance will be better. But fory deep copy will ignore circular and shared reference. Same reference of an object graph will be copied into different objects in one Fory#copy. | true | | serializeEnumByName | When Enabled, fory serialize enum by name instead of ordinal. | false |  ","version":"dev","tagName":"h2"},{"title":"Advanced Usage‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#advanced-usage","content":" ","version":"dev","tagName":"h2"},{"title":"Fory creation‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#fory-creation","content":" Single thread fory:  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Thread-safe fory:  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) // compress int for smaller size // .withIntCompressed(true) // compress long for smaller size // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Note that calling buildThreadSafeFory() on ForyBuilder will create an instance of ThreadLocalFory. This may not be appropriate in environments where virtual threads are used, as each thread will create its own fory instance, a relatively expensive operation. An alternative for virtual threads is to use buildThreadSafeForyPool.  ","version":"dev","tagName":"h3"},{"title":"Handling Class Schema Evolution in Serialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#handling-class-schema-evolution-in-serialization","content":" In many systems, the schema of a class used for serialization may change over time. For instance, fields within a class may be added or removed. When serialization and deserialization processes use different versions of jars, the schema of the class being deserialized may differ from the one used during serialization.  By default, Fory serializes objects using the CompatibleMode.SCHEMA_CONSISTENT mode. This mode assumes that the deserialization process uses the same class schema as the serialization process, minimizing payload overhead. However, if there is a schema inconsistency, deserialization will fail.  If the schema is expected to change, to make deserialization succeed, i.e. schema forward/backward compatibility. Users must configure Fory to use CompatibleMode.COMPATIBLE. This can be done using theForyBuilder#withCompatibleMode(CompatibleMode.COMPATIBLE) method. In this compatible mode, deserialization can handle schema changes such as missing or extra fields, allowing it to succeed even when the serialization and deserialization processes have different class schemas.  Here is an example of creating Fory to support schema evolution:  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   This compatible mode involves serializing class metadata into the serialized output. Despite Fory's use of sophisticated compression techniques to minimize overhead, there is still some additional space cost associated with class metadata.  To further reduce metadata costs, Fory introduces a class metadata sharing mechanism, which allows the metadata to be sent to the deserialization process only once. For more details, please refer to the Meta Sharing specification.  ","version":"dev","tagName":"h3"},{"title":"Compression‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#compression","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed can be used to compress int/long for smaller size. Normally compress int is enough.  Both compression are enabled by default, if the serialized is not important, for example, you use flatbuffers for serialization before, which doesn't compress anything, then you should disable compression. If your data are all numbers, the compression may bring 80% performance regression.  For int compression, fory use 1~5 bytes for encoding. First bit in every byte indicate whether has next byte. if first bit is set, then next byte will be read util first bit of next byte is unset.  For long compression, fory support two encoding:  Fory SLI(Small long as int) Encoding (used by default): If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First bit in every byte indicate whether has next byte. if first bit is set, then next byte will be read util first bit of next byte is unset.Negative number will be converted to positive number by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) to reduce cost of small negative numbers.  If a number are long type, it can't be represented by smaller bytes mostly, the compression won't get good enough result, not worthy compared to performance cost. Maybe you should try to disable long compression if you find it didn't bring much space savings.  ","version":"dev","tagName":"h3"},{"title":"Array Compression‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#array-compression","content":" Fory supports SIMD-accelerated compression for primitive arrays (int[] and long[]) when array values can fit in smaller data types. This feature is available on Java 16+ and uses the Vector API for optimal performance.  How Array Compression Works‚Äã  Array compression analyzes arrays to determine if values can be stored using fewer bytes:  int[] ‚Üí byte[]: When all values are in range [-128, 127] (75% size reduction)int[] ‚Üí short[]: When all values are in range [-32768, 32767] (50% size reduction)long[] ‚Üí int[]: When all values fit in integer range (50% size reduction)  Configuration and Registration‚Äã  To enable array compression you must explicitly register the serializers:  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // Enable int array compression .withIntArrayCompressed(true) // Enable long array compression .withLongArrayCompressed(true) .build(); // You must explicitly register compressed array serializers CompressedArraySerializers.registerSerializers(fory);   Note: The fory-simd module must be included in your dependencies for compressed array serializers to be available.  For Maven:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-simd&lt;/artifactId&gt; &lt;version&gt;0.13.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt;   ","version":"dev","tagName":"h3"},{"title":"Object deep copy‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#object-deep-copy","content":" Deep copy example:  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Make fory deep copy ignore circular and shared reference, this deep copy mode will ignore circular and shared reference. Same reference of an object graph will be copied into different objects in one Fory#copy.  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"dev","tagName":"h3"},{"title":"Implement a customized serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#implement-a-customized-serializer","content":" In some cases, you may want to implement a serializer for your type, especially some class customize serialization by JDK writeObject/writeReplace/readObject/readResolve, which is very inefficient. For example, if you don't want following Foo#writeObject got invoked, you can take following FooSerializer as an example:  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Register serializer:  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"dev","tagName":"h3"},{"title":"Implement Collection Serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#implement-collection-serializer","content":" Similar to maps, when implementing a serializer for a custom Collection type, you must extend CollectionSerializer or CollectionLikeSerializer. The key difference between these two is that CollectionLikeSerializer can serialize a class which has a collection-like structure but is not a java Collection subtype.  For collection serializer, this is a special parameter supportCodegenHook needs be configured:  When true: Enables optimized access to collection elements and JIT compilation for better performanceDirect serialization invocation and inline for map key-value items without dynamic serializer dispatch cost.Better performance for standard collection typesRecommended for most collections When false: Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higher costMore flexible for custom collection typesRequired when collection has special serialization needsHandles complex collection implementations  Implement Collection Serializer with JIT support‚Äã  When implementing a Collection serializer with JIT support, you can leverage Fory's existing binary format and collection serialization infrastructure. The key is to properly implement the onCollectionWrite and newCollection methods to handle metadata while letting Fory handle the element serialization.  Here's an example:  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook controls whether to use JIT compilation super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // Write collection size buffer.writeVarUint32Small7(value.size()); // Write any additional collection metadata return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // Create new collection instance Collection collection = super.newCollection(buffer); // Read and set collection size int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Note that please invoke setNumElements when implementing newCollection to let fory know how many elements to deserialize.  Implement a totally-customzied Collection Serializer without JIT‚Äã  Sometimes you need to serialize a collection type that uses primitive arrays or has special requirements. In such cases, you can implement a serializer with JIT disabled and directly override the write and read methods.  This approach:  Gives you full control over serializationWorks well with primitive arraysBypasses collection iteration overheadAllows direct memory access  Here's an example of a custom integer list backed by a primitive array:  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) { throw new NoSuchElementException(); } return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } return elements[index]; } public void set(int index, int value) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends CollectionLikeSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Disable JIT since we're handling serialization directly super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { // Write size buffer.writeVarUint32Small7(value.size()); // Write elements directly as primitive ints int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { // Read size int size = buffer.readVarUint32Small7(); // Create array and read elements int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // These methods are not used when JIT is disabled @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   Key Points:  Primitive Array Storage: Uses int[] for direct storageAvoids boxing/unboxing overheadProvides efficient memory layoutEnables direct array access Direct Serialization: Write size firstWrite primitive values directlyNo iteration overheadNo boxing/unboxing during serialization Direct Deserialization: Read size firstCreate primitive arrayRead values directly into arrayCreate list with populated array Disabled JIT: Set supportCodegenHook=falseOverride write/read methodsSkip collection view patternFull control over serialization format  When to Use: this approach is best when:  Working with primitive typesNeed maximum performanceWant to minimize memory overheadHave special serialization requirements  Usage Example:  // Create and populate list IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); // Serialize byte[] bytes = fory.serialize(list); // Deserialize IntList newList = (IntList) fory.deserialize(bytes);   This implementation is particularly efficient for scenarios where:  You're working exclusively with integersPerformance is criticalMemory efficiency is importantSerialization overhead needs to be minimized  Remember that while this approach gives up some of Fory's optimizations, it can provide better performance for specific use cases involving primitive types and direct array access.  Implement Serializer for Collection-like Types‚Äã  Sometimes you may want to implement a serializer for a type that behaves like a collection but isn't a standard Java Collection. This section demonstrates how to implement a serializer for such types.  The key principles for collection-like type serialization are:  Extend CollectionLikeSerializer for custom collection-like typesEnable JIT optimization with supportCodegenHookProvide efficient element access through viewsMaintain proper size tracking  Here's an example:  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } // Constructor for wrapping existing array public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) { throw new IndexOutOfBoundsException(); } return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } // A view class that extends AbstractCollection for simpler implementation class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; // Constructor for serialization (wrapping existing array) public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } // Constructor for deserialization public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) { throw new NoSuchElementException(); } return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) { throw new IllegalStateException(&quot;Collection is full&quot;); } elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends CollectionLikeSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   Key takeways:  Collection Structure: Array-based storage for elementsFixed size after creationDirect element accessSize tracking View Implementation: Extends AbstractCollection for simplicityProvides iterator for element accessImplements add() for deserializationShares array reference with original type Serializer Features: Uses supportCodegenHook=true for JIT optimizationShares array references when possibleMaintains proper size trackingUses view pattern for serialization Performance Aspects: Direct array accessMinimal object creationArray sharing between instancesEfficient iteration  Note that this implementation provides better performance at the cost of flexibility. Consider your specific use case when choosing this approach.  ","version":"dev","tagName":"h3"},{"title":"Implement Map Serializer‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#implement-map-serializer","content":" When implementing a serializer for a custom Map type, you must extend MapSerializer or MapLikeSerializer. The key difference between these two is that MapLikeSerializer can serialize a class which has a map-like structure but is not a java Map subtype.  Similar to collection serializer, this is a special parameter supportCodegenHook needs be configured:  When true: Enables optimized access to map elements and JIT compilation for better performanceDirect serialization invocation and inline for map key-value items without dynamic serializer dispatch cost.Better performance for standard map typesRecommended for most maps When false: Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higher costMore flexible for custom map typesRequired when map has special serialization needsHandles complex map implementations  Implement Map Serializer with JIT support‚Äã  When implementing a Map serializer with JIT support, you can leverage Fory's existing chunk-based binary format and map serialization infrastructure. The key is to properly implement the onMapWrite and newMap methods to handle metadata while letting Fory handle the map key-value serialization.  Here's an example of implementing a custom map serializer:  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook is a critical parameter that determines serialization behavior super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { // Write map size buffer.writeVarUint32Small7(value.size()); // Write any additional map metadata here return value; } @Override public Map newMap(MemoryBuffer buffer) { // Read map size int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); // Create and return new map instance T map = (T) new HashMap(numElements); fory.getRefResolver().reference(map); return map; } }   Note that please invoke setNumElements when implementing newMap to let fory know how many elements to deserialize.  Implement a totally-customzied Map Serializer without JIT‚Äã  Sometimes you may need complete control over the serialization process, or your map type might have special requirements that don't fit the standard patterns. In such cases, you can implement a serializer with supportCodegenHook=false and directly override the write and read methods.  This approach:  Gives you full control over serializationAllows custom binary formatBypasses the standard map serialization patternMay be simpler for special cases  Here's an example:  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { private final Set&lt;String&gt; keys; private final int fixedValue; public FixedValueMap(Set&lt;String&gt; keys, int fixedValue) { this.keys = keys; this.fixedValue = fixedValue; } @Override public Set&lt;Entry&lt;String, Integer&gt;&gt; entrySet() { Set&lt;Entry&lt;String, Integer&gt;&gt; entries = new HashSet&lt;&gt;(); for (String key : keys) { entries.add(new SimpleEntry&lt;&gt;(key, fixedValue)); } return entries; } @Override public Integer get(Object key) { return keys.contains(key) ? fixedValue : null; } public Set&lt;String&gt; getKeys() { return keys; } public int getFixedValue() { return fixedValue; } } class FixedValueMapSerializer extends MapLikeSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { // Disable codegen since we're handling serialization directly super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { // Write the fixed value buffer.writeInt32(value.getFixedValue()); // Write the number of keys buffer.writeVarUint32Small7(value.getKeys().size()); // Write each key for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { // Read the fixed value int fixedValue = buffer.readInt32(); // Read the number of keys int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } // These methods are not used when supportCodegenHook is false @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   Key Points:  Disable Codegen: Set supportCodegenHook=false in constructorFory will use your write/read methods directlyNo JIT optimization will be appliedFull control over serialization format Write Method: Handle all serialization manuallyWrite custom fields firstWrite map entries in your preferred formatControl the exact binary layout Read Method: Handle all deserialization manuallyRead in same order as writtenCreate and populate map instanceRestore custom fields Unused Methods: onMapWrite, onMapRead, onMapCopy are not usedCan throw UnsupportedOperationExceptionOnly write and read are important  When to Use: this approach is best when  Map has custom fields or metadataSpecial serialization format is neededComplete control over binary format is requiredStandard map patterns don't fit  Trade-offs  Advantages: Complete control over serializationCustom binary format possibleSimpler implementation for special casesDirect handling of custom fields Disadvantages: No JIT optimizationPotentially lower performanceManual handling of all serializationMore code to maintain  Remember that disabling codegen means giving up some performance optimizations that Fory provides. Only use this approach when the standard map serialization pattern doesn't meet your needs.  Implement Serializer for Map-like Types‚Äã  Sometimes you may want to implement a serializer for a type that behaves like a map but isn't a standard Java map. This section demonstrates how to implement a serializer for such types.  The key principles for map-like type serialization are:  Extend MapLikeSerializer for custom collection-like typesEnable JIT optimization with supportCodegenHookProvide efficient element access through viewsMaintain proper size tracking  Here's a complete example:  // It's better to make it to implements the java.util.Map interface, in this way we don't have to implement such serializers by ourself. class CustomMapLike { private final Object[] keyArray; private final Object[] valueArray; private final int size; // Constructor for creating new instance public CustomMapLike(int initialCapacity) { this.keyArray = new Object[initialCapacity]; this.valueArray = new Object[initialCapacity]; this.size = 0; } // Constructor for wrapping existing arrays public CustomMapLike(Object[] keyArray, Object[] valueArray, int size) { this.keyArray = keyArray; this.valueArray = valueArray; this.size = size; } public Integer get(String key) { for (int i = 0; i &lt; size; i++) { if (key.equals(keyArray[i])) { return (Integer) valueArray[i]; } } return null; } public int size() { return size; } public Object[] getKeyArray() { return keyArray; } public Object[] getValueArray() { return valueArray; } } class MapView extends AbstractMap&lt;Object, Object&gt; { private final Object[] keyArray; private final Object[] valueArray; private final int size; private int writeIndex; // Constructor for serialization (wrapping existing CustomMapLike) public MapView(CustomMapLike mapLike) { this.size = mapLike.size(); this.keyArray = mapLike.getKeyArray(); this.valueArray = mapLike.getValueArray(); } // Constructor for deserialization public MapView(int size) { this.size = size; this.keyArray = new Object[size]; this.valueArray = new Object[size]; } @Override public Set&lt;Entry&lt;Object, Object&gt;&gt; entrySet() { return new AbstractSet&lt;Entry&lt;Object, Object&gt;&gt;() { @Override public Iterator&lt;Entry&lt;Object, Object&gt;&gt; iterator() { return new Iterator&lt;Entry&lt;Object, Object&gt;&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Entry&lt;Object, Object&gt; next() { if (!hasNext()) { throw new NoSuchElementException(); } final int currentIndex = index++; return new SimpleEntry&lt;&gt;( keyArray[currentIndex], valueArray[currentIndex] ); } }; } @Override public int size() { return size; } }; } @Override public Object put(Object key, Object value) { if (writeIndex &gt;= size) { throw new IllegalStateException(&quot;Map is full&quot;); } keyArray[writeIndex] = key; valueArray[writeIndex] = value; writeIndex++; return null; } public Object[] getKeyArray() { return keyArray; } public Object[] getValueArray() { return valueArray; } public int size() { return size; } } class CustomMapLikeSerializer extends MapLikeSerializer&lt;CustomMapLike&gt; { public CustomMapLikeSerializer(Fory fory) { super(fory, CustomMapLike.class, true); } @Override public Map onMapWrite(MemoryBuffer buffer, CustomMapLike value) { buffer.writeVarUint32Small7(value.size()); // Return a zero-copy view using the same underlying arrays return new MapView(value); } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); // Create a view with new arrays for deserialization return new MapView(numElements); } @Override public CustomMapLike onMapRead(Map map) { MapView view = (MapView) map; // Just pass the arrays directly - no copying needed return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size()); } @Override public CustomMapLike onMapCopy(Map map) { MapView view = (MapView) map; // Just pass the arrays directly - no copying needed return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size()); } }   ","version":"dev","tagName":"h3"},{"title":"Register Custom Serializers‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#register-custom-serializers","content":" After implementing your custom serializer, register it with Fory:  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Register map serializer fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Register collection serializer fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Note that when implementing custom map or collection serializers:  Always extend the appropriate base class (MapSerializer/MapLikeSerializer for maps, CollectionSerializer/CollectionLikeSerializer for collections)Consider the impact of supportCodegenHook on performance and functionalityProperly handle reference tracking if neededImplement proper size management using setNumElements and getAndClearNumElements when supportCodegenHook is true  Besides registering serializes, one can also implement java.io.Externalizable for a class to customize serialization logic, such type will be serialized by fory ExternalizableSerializer.  ","version":"dev","tagName":"h3"},{"title":"Memory Allocation Customization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#memory-allocation-customization","content":" Fory provides a MemoryAllocator interface that allows you to customize how memory buffers are allocated and grown during serialization operations. This can be useful for performance optimization, memory pooling, or debugging memory usage.  MemoryAllocator Interface‚Äã  The MemoryAllocator interface defines two key methods:  public interface MemoryAllocator { /** * Allocates a new MemoryBuffer with the specified initial capacity. */ MemoryBuffer allocate(int initialCapacity); /** * Grows an existing buffer to accommodate the new capacity. * The implementation must grow the buffer in-place by modifying * the existing buffer instance. */ MemoryBuffer grow(MemoryBuffer buffer, int newCapacity); }   Using Custom Memory Allocators‚Äã  You can set a global memory allocator that will be used by all MemoryBuffer instances:  // Create a custom allocator MemoryAllocator customAllocator = new MemoryAllocator() { @Override public MemoryBuffer allocate(int initialCapacity) { // Add extra capacity for debugging or pooling return MemoryBuffer.fromByteArray(new byte[initialCapacity + 100]); } @Override public MemoryBuffer grow(MemoryBuffer buffer, int newCapacity) { if (newCapacity &lt;= buffer.size()) { return buffer; } // Custom growth strategy - add 100% extra capacity int newSize = (int) (newCapacity * 2); byte[] data = new byte[newSize]; buffer.copyToUnsafe(0, data, Platform.BYTE_ARRAY_OFFSET, buffer.size()); buffer.initHeapBuffer(data, 0, data.length); return buffer; } }; // Set the custom allocator globally MemoryBuffer.setGlobalAllocator(customAllocator); // All subsequent MemoryBuffer allocations will use your custom allocator Fory fory = Fory.builder().withLanguage(Language.JAVA).build(); byte[] bytes = fory.serialize(someObject); // Uses custom allocator   Default Memory Allocator Behavior‚Äã  The default allocator uses the following growth strategy:  For buffers smaller than BUFFER_GROW_STEP_THRESHOLD (100MB): multiply capacity by 2For larger buffers: multiply capacity by 1.5 (capped at Integer.MAX_VALUE - 8)  This provides a balance between avoiding frequent reallocations and preventing excessive memory usage.  Use Cases‚Äã  Custom memory allocators are useful for:  Memory Pooling: Reuse allocated buffers to reduce GC pressurePerformance Tuning: Use different growth strategies based on your workloadDebugging: Add logging or tracking to monitor memory usageOff-heap Memory: Integrate with off-heap memory management systems  ","version":"dev","tagName":"h3"},{"title":"Security‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#security","content":" Class Registration‚Äã  ForyBuilder#requireClassRegistration can be used to disable class registration, this will allow to deserialize objects unknown types, more flexible but may be insecure if the classes contains malicious code.  Do not disable class registration unless you can ensure your environment is secure. Malicious code in init/equals/hashCode can be executed when deserializing unknown/untrusted types when this option disabled.  Class registration can not only reduce security risks, but also avoid classname serialization cost.  You can register class with API Fory#register.  Note that class registration order is important, serialization and deserialization peer should have same registration order.  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   If you invoke ForyBuilder#requireClassRegistration(false) to disable class registration check, you can set org.apache.fory.resolver.ClassChecker by ClassResolver#setClassChecker to control which classes are allowed for serialization. For example, you can allow classes started with org.example.* by:  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory also provided a org.apache.fory.resolver.AllowListChecker which is allowed/disallowed list based checker to simplify the customization of class check mechanism. You can use this checker or implement more sophisticated checker by yourself.  Limit max deserization depth‚Äã  Fory also provides a ForyBuilder#withMaxDepth to limit max deserialization depth. The default max depth is 50.  If max depth is reached, Fory will throw ForyException. This can be used to prevent malicious data from causing stack overflow or other issues.  ","version":"dev","tagName":"h3"},{"title":"Register class by name‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#register-class-by-name","content":" Register class by id will have better performance and smaller space overhead. But in some cases, management for a bunch of type id is complex. In such cases, registering class by name using APIregister(Class&lt;?&gt; cls, String namespace, String typeName) is recommended.  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   If there are no duplicate name for type, namespace can be left as empty to reduce serialized size.  Do not use this API to register class since it will increase serialized size a lot compared to register class by id  ","version":"dev","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#zero-copy-serialization","content":" import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Note that fory instance should be reused instead of creation every time. static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"dev","tagName":"h3"},{"title":"Meta Sharing‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#meta-sharing","content":" Fory supports share type metadata (class name, field name, final field type information, etc.) between multiple serializations in a context (ex. TCP connection), and this information will be sent to the peer during the first serialization in the context. Based on this metadata, the peer can rebuild the same deserializer, which avoids transmitting metadata for subsequent serializations and reduces network traffic pressure and supports type forward/backward compatibility automatically.  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // share meta across serialization. // .withMetaContextShare(true) // Not thread-safe fory. MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // Not thread-safe fory. MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Thread-safe fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // thread-safe fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   Note that MetaContext is not thread-safe and cannot be reused across instances of fory or multiple threads. In cases of multi-threading, a separate MetaContext must be created for each fory instance.  ","version":"dev","tagName":"h3"},{"title":"Deserialize non-existent classes‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#deserialize-non-existent-classes","content":" Fory support deserializing non-existent classes, this feature can be enabled by ForyBuilder#deserializeNonexistentClass(true). When enabled, and metadata sharing enabled, Fory will store the deserialized data of this type in a lazy subclass of Map. By using the lazy map implemented by Fory, the rebalance cost of filling map during deserialization can be avoided, which further improves performance. If this data is sent to another process and the class exists in this process, the data will be deserialized into the object of this type without losing any information.  If metadata sharing is not enabled, the new class data will be skipped and an NonexistentSkipClass stub object will be returned.  ","version":"dev","tagName":"h3"},{"title":"Copy/Map object from one type to another type‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#copymap-object-from-one-type-to-another-type","content":" Fory support mapping object from one type to another type.  Notes: This mapping will execute a deep copy, all mapped fields are serialized into binary and deserialized from that binary to map into another type.All struct types must be registered with same ID, otherwise Fory can not mapping to correct struct type. Be careful when you use Fory#register(Class), because fory will allocate an auto-grown ID which might be inconsistent if you register classes with different order between Fory instance.  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"dev","tagName":"h3"},{"title":"Migration‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#migration","content":" ","version":"dev","tagName":"h2"},{"title":"JDK migration‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#jdk-migration","content":" If you use jdk serialization before, and you can't upgrade your client and server at the same time, which is common for online application. Fory provided an util method org.apache.fory.serializer.JavaSerializer.serializedByJDK to check whether the binary are generated by jdk serialization, you use following pattern to make exiting serialization protocol-aware, then upgrade serialization to fory in an async rolling-up way:  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"dev","tagName":"h3"},{"title":"Upgrade fory‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#upgrade-fory","content":" Currently binary compatibility is ensured for minor versions only. For example, if you are using foryv0.2.0, binary compatibility will be provided if you upgrade to fory v0.2.1. But if upgrade to fory v0.4.1, no binary compatibility are ensured. Most of the time there is no need to upgrade fory to newer major version, the current version is fast and compact enough, and we provide some minor fix for recent older versions.  But if you do want to upgrade fory for better performance and smaller size, you need to write fory version as header to serialized data using code like following to keep binary compatibility:  MemoryBuffer buffer = xxx; buffer.writeVarInt32(2); fory.serialize(buffer, obj);   Then for deserialization, you need:  MemoryBuffer buffer = xxx; int foryVersion = buffer.readVarInt32(); Fory fory = getFory(foryVersion); fory.deserialize(buffer);   getFory is a method to load corresponding fory, you can shade and relocate different version of fory to different package, and load fory by version.  If you upgrade fory by minor version, or you won't have data serialized by older fory, you can upgrade fory directly, no need to versioning the data.  ","version":"dev","tagName":"h3"},{"title":"Trouble shooting‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#trouble-shooting","content":" ","version":"dev","tagName":"h2"},{"title":"Class inconsistency and class version check‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#class-inconsistency-and-class-version-check","content":" If you create fory without setting CompatibleMode to org.apache.fory.config.CompatibleMode.COMPATIBLE, and you got a strange serialization error, it may be caused by class inconsistency between serialization peer and deserialization peer.  In such cases, you can invoke ForyBuilder#withClassVersionCheck to create fory to validate it, if deserialization throws org.apache.fory.exception.ClassNotCompatibleException, it shows class are inconsistent, and you should create fory withForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE).  CompatibleMode.COMPATIBLE has more performance and space cost, do not set it by default if your classes are always consistent between serialization and deserialization.  ","version":"dev","tagName":"h3"},{"title":"Deserialize POJO into another type‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#deserialize-pojo-into-another-type","content":" Fory allows you to serialize one POJO and deserialize it into a different POJO. The different POJO means the schema inconsistency. Users must to configure Fory withCompatibleMode set to org.apache.fory.config.CompatibleMode.COMPATIBLE.  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"dev","tagName":"h3"},{"title":"Use wrong API for deserialization‚Äã","type":1,"pageTitle":"Java Serialization Guide","url":"/zh-CN/docs/next/guide/java_object_graph_guide#use-wrong-api-for-deserialization","content":" If you serialize an object by invoking Fory#serialize, you should invoke Fory#deserialize for deserialization instead ofFory#deserializeJavaObject.  If you serialize an object by invoking Fory#serializeJavaObject, you should invoke Fory#deserializeJavaObject for deserialization instead of Fory#deserializeJavaObjectAndClass/Fory#deserialize.  If you serialize an object by invoking Fory#serializeJavaObjectAndClass, you should invoke Fory#deserializeJavaObjectAndClass for deserialization instead of Fory#deserializeJavaObject/Fory#deserialize. ","version":"dev","tagName":"h3"},{"title":"ÂºÄÂèëÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/development","content":"","keywords":"","version":"0.12"},{"title":"Êú¨Âú∞ÊûÑÂª∫ Apache Fory‚Ñ¢‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#Êú¨Âú∞ÊûÑÂª∫-apache-fory","content":" ‰ªé Github ‰ª£Á†ÅÂ∫ì ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Java‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-java","content":" cd java mvn clean compile -DskipTests   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  java 1.8+maven 3.6.3+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Python‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  python 3.6+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ C++‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==14.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fory/encoder:fory_encoder   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ GoLang‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  go 1.13+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ Rust‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-rust","content":" cd rust # build cargo build # run test cargo test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory‚Ñ¢ JavaScript‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/docs/guide/development#ÊûÑÂª∫-apache-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  node 14+npm 8+ ","version":"0.12","tagName":"h3"},{"title":"GraalVM Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/graalvm_guide","content":"","keywords":"","version":"0.12"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#graalvm-native-image","content":" GraalVM ÁöÑ native image ËÉΩÂ∞Ü Java ‰ª£Á†ÅÊèêÂâçÁºñËØë‰∏∫Êú¨Âú∞‰ª£Á†ÅÔºå‰ªéËÄåÊûÑÂª∫Êõ¥Âø´„ÄÅÊõ¥Â∞è„ÄÅÊõ¥Á≤æÁÆÄÁöÑÂ∫îÁî®„ÄÇ Native image ‰∏çÂåÖÂê´ JIT ÁºñËØëÂô®ÔºåÊó†Ê≥ïÂú®ËøêË°åÊó∂Â∞ÜÂ≠óËäÇÁ†ÅÁºñËØë‰∏∫Êú∫Âô®Á†ÅÔºå‰πü‰∏çÊîØÊåÅÂèçÂ∞ÑÔºåÈô§ÈùûÈÖçÁΩÆÂèçÂ∞ÑÂÖÉÊï∞ÊçÆÊñá‰ª∂„ÄÇ  Apache Fory‚Ñ¢ Âú®GraalVM native image ‰∏ãËøêË°åËâØÂ•Ω„ÄÇFory ‰ºöÂú® graalvm ÊûÑÂª∫Èò∂ÊÆµ‰∏∫ Fory JIT framework Âíå MethodHandle/LambdaMetafactory ÁîüÊàêÊâÄÊúâÂ∫èÂàóÂåñÂô®‰ª£Á†ÅÔºåËøêË°åÊó∂Áõ¥Êé•‰ΩøÁî®Ëøô‰∫õÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂ∫èÂàóÂåñÔºåÊó†ÈúÄÈ¢ùÂ§ñÂºÄÈîÄÔºåÊÄßËÉΩ‰ºòÂºÇ„ÄÇ  Âú® graalvm native image ‰∏ã‰ΩøÁî® Fory Êó∂ÔºåÂøÖÈ°ªÂ∞Ü Fory ÂàõÂª∫‰∏∫Á±ªÁöÑÈùôÊÄÅÂ≠óÊÆµÔºåÂπ∂Âú®Á±ªÂàùÂßãÂåñÊó∂Ê≥®ÂÜåÊâÄÊúâÁ±ªÂûã„ÄÇÁÑ∂ÂêéÂú® resources/META-INF/native-image/$xxx/native-image.properties ‰∏ãÈÖçÁΩÆ native-image.propertiesÔºåÂëäÁü• graalvm Âú® native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñËØ•Á±ª„ÄÇ‰æãÂ¶ÇÔºåÈÖçÁΩÆ org.apache.fory.graalvm.Example Á±ªÂú®ÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ‰ΩøÁî® fory ÁöÑÂè¶‰∏Ä‰∏™Â•ΩÂ§ÑÊòØÊó†ÈúÄÈÖçÁΩÆÁπÅÁêêÁöÑ reflection json Âíå serialization json„ÄÇÂè™ÈúÄÂØπÊØè‰∏™ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÂûãË∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) Âç≥ÂèØ„ÄÇ  Ê≥®ÊÑèÔºöFory ÁöÑ asyncCompilationEnabled ÈÄâÈ°πÂú® graalvm native image ‰∏ã‰ºöËá™Âä®Á¶ÅÁî®ÔºåÂõ†‰∏∫ native image ËøêË°åÊó∂‰∏çÊîØÊåÅ JIT„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#ÈùûÁ∫øÁ®ãÂÆâÂÖ®-fory","content":" Á§∫‰æãÔºö  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ fory.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.Example ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"0.12","tagName":"h2"},{"title":"Á∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#Á∫øÁ®ãÂÆâÂÖ®-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.ThreadSafeExample ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"0.12","tagName":"h2"},{"title":"Ê°ÜÊû∂ÈõÜÊàê‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#Ê°ÜÊû∂ÈõÜÊàê","content":" ÂØπ‰∫éÊ°ÜÊû∂ÂºÄÂèëËÄÖÔºåÂ¶ÇÊûúÂ∏åÊúõÈõÜÊàê fory ‰Ωú‰∏∫Â∫èÂàóÂåñÊñπÊ°àÔºåÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºåËÆ©Áî®Êà∑ÂàóÂá∫ÊâÄÊúâÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÔºåÁÑ∂ÂêéÂä†ËΩΩËøô‰∫õÁ±ªÂπ∂Âú® Fory ÈõÜÊàêÁ±ª‰∏≠Ë∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) ËøõË°åÊ≥®ÂÜåÔºåÂπ∂ÈÖçÁΩÆËØ•Á±ªÂú® graalvm native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñ„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#benchmark","content":" ËøôÈáåÁªôÂá∫ Fory ‰∏é Graalvm Serialization ÁöÑ‰∏§‰∏™Á±ªÁöÑÂü∫ÂáÜÊµãËØï„ÄÇ  Fory Êú™ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 46x ÈÄüÂ∫¶Ôºå43% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå56% Â§ßÂ∞è  Fory ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 24x ÈÄüÂ∫¶Ôºå31% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå48% Â§ßÂ∞è  Âü∫ÂáÜÊµãËØï‰ª£Á†ÅËßÅ [Benchmark.java]„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Struct Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#struct-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"0.12","tagName":"h3"},{"title":"Pojo Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/graalvm_guide#pojo-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"0.12","tagName":"h3"},{"title":"Scala Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/scala_guide","content":"","keywords":"","version":"0.12"},{"title":"ÂÆâË£Ö‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#ÂÆâË£Ö","content":" Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 2 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.12.0&quot;   Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 3 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.12.0&quot;   ","version":"0.12","tagName":"h2"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Âø´ÈÄüÂºÄÂßã","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"0.12","tagName":"h2"},{"title":"Fory ÂÆû‰æãÂàõÂª∫‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#fory-ÂÆû‰æãÂàõÂª∫","content":" Âú®‰ΩøÁî® fory ËøõË°å Scala Â∫èÂàóÂåñÊó∂ÔºåÂª∫ËÆÆËá≥Â∞ë‰ª•Â¶Ç‰∏ãÊñπÂºèÂàõÂª∫ fory ÂÆû‰æãÔºö  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory)   Ê†πÊçÆ‰Ω†ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÂØπË±°Á±ªÂûãÔºåÂèØËÉΩËøòÈúÄË¶ÅÊ≥®ÂÜå‰∏Ä‰∫õ Scala ÂÜÖÈÉ®Á±ªÂûãÔºö  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   Â¶ÇÊûú‰Ω†Â∏åÊúõÈÅøÂÖçÊâãÂä®Ê≥®ÂÜåËøô‰∫õÁ±ªÂûãÔºåÂèØ‰ª•ÈÄöËøá ForyBuilder#requireClassRegistration(false) ÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂäüËÉΩ„ÄÇ Ê≥®ÊÑèÔºöÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂêéÔºåÂèØ‰ª•ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÁöÑÂØπË±°ÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ¶ÇÊûúÂèçÂ∫èÂàóÂåñÁöÑÁ±ªÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ  Scala ‰∏≠Âæ™ÁéØÂºïÁî®ËæÉ‰∏∫Â∏∏ËßÅÔºåÂª∫ËÆÆÈÄöËøá ForyBuilder#withRefTracking(true) ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºàReference trackingÔºâ„ÄÇÂ¶ÇÊûúÊú™ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂú®Êüê‰∫õ Scala ÁâàÊú¨‰∏ãÂ∫èÂàóÂåñ Scala Enumeration Êó∂ÔºåÂèØËÉΩ‰ºöÂá∫Áé∞ StackOverflowError„ÄÇ  Ê≥®ÊÑèÔºöfory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÊìç‰ΩúÈó¥Â§çÁî®Ôºåfory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ß„ÄÇ  Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂú®Â§öÁ∫øÁ®ãÁéØÂ¢É‰∏ãÂÖ±‰∫´ fory ÂÆû‰æãÔºåÂ∫îÈÄöËøá ForyBuilder#buildThreadSafeFory() ÂàõÂª∫ ThreadSafeFory ÂÆû‰æã„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ case class‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-case-class","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ pojo‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ object Âçï‰æãÂØπË±°‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-object-Âçï‰æãÂØπË±°","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñÈõÜÂêàÔºàCollectionÔºâ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñÈõÜÂêàcollection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Tuple‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-tuple","content":" val tuple = Tuple2(100, 10000L) println(fory.deserialize(fory.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fory.deserialize(fory.serialize(tuple)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-enum","content":" ","version":"0.12","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"0.12","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñ Option‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#Â∫èÂàóÂåñ-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))   ","version":"0.12","tagName":"h2"},{"title":"ÊÄßËÉΩ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/scala_guide#ÊÄßËÉΩ","content":" pojo/bean/case/object Scala ÂØπ Apache Fory‚Ñ¢ JIT ÁöÑÊîØÊåÅÂæàÂ•ΩÔºåÊÄßËÉΩ‰∏é Apache Fory‚Ñ¢ Java ‰∏ÄÊ†∑‰ºòÂºÇ„ÄÇ  Scala ÈõÜÂêàÂíåÊ≥õÂûã‰∏çÈÅµÂæ™ Java ÈõÜÂêàÊ°ÜÊû∂ÔºåÂπ∂‰∏îÊú™‰∏éÂΩìÂâçÂèëË°åÁâà‰∏≠ÁöÑ Apache Fory‚Ñ¢ JIT ÂÆåÂÖ®ÈõÜÊàê„ÄÇÊÄßËÉΩ‰∏ç‰ºöÂÉè Java ÁöÑ Fory collections Â∫èÂàóÂåñÈÇ£‰πàÂ•Ω„ÄÇ  scala ÈõÜÂêàÁöÑÊâßË°åÂ∞ÜË∞ÉÁî® Java Â∫èÂàóÂåñ API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable Âíå Fory ObjectStream ÂÆûÁé∞„ÄÇËôΩÁÑ∂ org.apache.fory.serializer.ObjectStreamSerializer ÊØî JDK ObjectOutputStream/ObjectInputStream Âø´ÂæàÂ§öÔºå‰ΩÜÂÆÉ‰ªçÁÑ∂‰∏çÁü•ÈÅìÂ¶Ç‰Ωï‰ΩøÁî® Scala ÈõÜÂêàÊ≥õÂûã„ÄÇ  Êú™Êù•Êàë‰ª¨ËÆ°Âàí‰∏∫ Scala Á±ªÂûãÊèê‰æõÊõ¥Â§ö‰ºòÂåñÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇÁúã #682ÔºÅ  Scala ÈõÜÂêàÂ∫èÂàóÂåñÂ∑≤Âú® #1073 ÂÆåÊàê ÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåËØ∑‰ΩøÁî® Apache Fory‚Ñ¢ snapshot ÁâàÊú¨„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Ë°åÂ≠òÊ†ºÂºè","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/row_format_guide","content":"","keywords":"","version":"0.12"},{"title":"Java‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // ÂèØË¢´ python Èõ∂Êã∑Ë¥ùËØªÂèñ BinaryRow binaryRow = encoder.toRow(foo); // ‰πüÂèØ‰ª•ÊòØ python ÁîüÊàêÁöÑÊï∞ÊçÆ Foo newFoo = encoder.fromRow(binaryRow); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` ÁöÑÁ¨¨ 11 ‰∏™ÂÖÉÁ¥† BinaryRow barStruct = binaryArray4.getStruct(10); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` Á¨¨ 11 ‰∏™ÂÖÉÁ¥†ÁöÑ f2 ÁöÑÁ¨¨ 6 ‰∏™ÂÖÉÁ¥† barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // Âè™ÂèçÂ∫èÂàóÂåñÈÉ®ÂàÜÊï∞ÊçÆ Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"0.12","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"0.12","tagName":"h2"},{"title":"Apache Arrow ÊîØÊåÅ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#apache-arrow-ÊîØÊåÅ","content":" Fory Format ‰πüÊîØÊåÅ‰∏é Arrow Table/RecordBatch ÁöÑËá™Âä®ËΩ¨Êç¢„ÄÇ  Java Á§∫‰æãÔºö  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"0.12","tagName":"h3"},{"title":"ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã","content":" Fury Áé∞Â∑≤ÊîØÊåÅ Java interface Á±ªÂûãÂíåÂ≠êÁ±ªÔºàextendsÔºâÁ±ªÂûãÁöÑË°åÊ†ºÂºèÊò†Â∞ÑÔºåÂ∏¶Êù•Êõ¥Âä®ÊÄÅÂíåÁÅµÊ¥ªÁöÑÊï∞ÊçÆ schema„ÄÇ  Áõ∏ÂÖ≥Â¢ûÂº∫ËßÅ #2243„ÄÅ#2250„ÄÅ#2256„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Á§∫‰æãÔºöÊé•Âè£Á±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#Á§∫‰æãÊé•Âè£Á±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // ‰ΩøÁî® RowEncoder ‰ª•Êé•Âè£Á±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"0.12","tagName":"h3"},{"title":"Á§∫‰æãÔºöÁªßÊâøÁ±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/docs/guide/row_format_guide#Á§∫‰æãÁªßÊâøÁ±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // ‰ΩøÁî® RowEncoder ‰ª•Áà∂Á±ªÁ±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python Á§∫‰æãÔºö  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++ Á§∫‰æãÔºö  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"0.12","tagName":"h3"},{"title":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"0.12"},{"title":"Á±ªÂûãÊò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/docs/guide/xlang_type_mapping#Á±ªÂûãÊò†Â∞Ñ","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûã‰ø°ÊÅØÔºàÂΩìÂâçÊú™ÂÆûÁé∞Ôºâ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/docs/guide/xlang_type_mapping#Á±ªÂûã‰ø°ÊÅØÂΩìÂâçÊú™ÂÆûÁé∞","content":" Áî±‰∫éÂêÑËØ≠Ë®ÄÁöÑÁ±ªÂûãÁ≥ªÁªüÂ≠òÂú®Â∑ÆÂºÇÔºåÊüê‰∫õÁ±ªÂûãÊó†Ê≥ïÂÅöÂà∞‰∏Ä‰∏ÄÊò†Â∞Ñ„ÄÇ  Â¶ÇÊûúÁî®Êà∑ÂèëÁé∞Êüê‰∏ÄËØ≠Ë®ÄÁöÑÁ±ªÂûãÂú® Fory Á±ªÂûãÁ≥ªÁªü‰∏≠ÂØπÂ∫îÂ§ö‰∏™Á±ªÂûãÔºå‰æãÂ¶Ç Java ‰∏≠ÁöÑ long ÂØπÂ∫î int64/varint64/sliint64ÔºåËøôÊÑèÂë≥ÁùÄËØ•ËØ≠Ë®ÄÁº∫Â∞ëÊüê‰∫õÁ±ªÂûãÔºåÁî®Êà∑Âú®‰ΩøÁî® Fory Êó∂ÈúÄË¶ÅÈ¢ùÂ§ñÊèê‰æõÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûãÊ≥®Ëß£‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/docs/guide/xlang_type_mapping#Á±ªÂûãÊ≥®Ëß£","content":" Â¶ÇÊûúÁ±ªÂûãÊòØÂè¶‰∏Ä‰∏™Á±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂèØ‰ª•‰∏∫Á±ªÂûãÁöÑÂ≠óÊÆµÊàñÊï¥‰∏™Á±ªÂûãÊèê‰æõÂÖÉ‰ø°ÊÅØÊèêÁ§∫„ÄÇ Ëøô‰∫õ‰ø°ÊÅØÂú®ÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠‰πüÂèØ‰ª•Êèê‰æõÔºö  JavaÔºö‰ΩøÁî® annotation„ÄÇC++Ôºö‰ΩøÁî®ÂÆèÂíåÊ®°Êùø„ÄÇGolangÔºö‰ΩøÁî® struct tag„ÄÇPythonÔºö‰ΩøÁî® typehint„ÄÇRustÔºö‰ΩøÁî®ÂÆè„ÄÇ  Á§∫‰æãÔºö  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûãÂåÖË£ÖÂô®‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/docs/guide/xlang_type_mapping#Á±ªÂûãÂåÖË£ÖÂô®","content":" Â¶ÇÊûúÁ±ªÂûã‰∏çÊòØÁ±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂøÖÈ°ªÁî® Fory Á±ªÂûãÂåÖË£ÖËØ•Á±ªÂûã‰ª•‰º†ÈÄíÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ‰æãÂ¶ÇÔºåÂÅáËÆæ Fory Java Êèê‰æõ‰∫Ü VarInt64 Á±ªÂûãÔºåÂΩìÁî®Êà∑Ë∞ÉÁî® fory.serialize(long_value) Êó∂ÔºåÈúÄË¶ÅËøôÊ†∑Ë∞ÉÁî®Ôºöfory.serialize(new VarInt64(long_value))„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ‰ªãÁªç","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/introduction/","content":"","keywords":"","version":"0.12"},{"title":"ÂçèËÆÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#ÂçèËÆÆ","content":" ‰∏çÂêåÁöÑÂú∫ÊôØÊúâ‰∏çÂêåÁöÑÂ∫èÂàóÂåñË¶ÅÊ±Ç„ÄÇApache Fory‚Ñ¢ ‰∏∫Ëøô‰∫õÈúÄÊ±ÇËÆæËÆ°Âπ∂ÂÆûÁé∞‰∫ÜÂ§ö‰∏™‰∫åËøõÂà∂ÂçèËÆÆÔºö  Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂçèËÆÆÔºö Ë∑®ËØ≠Ë®ÄËá™Âä®Â∫èÂàóÂåñ‰ªª‰ΩïÂØπË±°ÔºåÊó†ÈúÄ IDL ÂÆö‰πâ„ÄÅSchemaÁºñËØëÂíåÂØπË±°ÂçèËÆÆËΩ¨Êç¢ÔºõÊîØÊåÅÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÔºåÊó†ÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØÔºõÂéüÁîüÊîØÊåÅÂØπË±°Â§öÊÄÅ„ÄÇ ÂéüÁîü java/python ÂØπË±°ÂõæÂçèËÆÆÔºöÂü∫‰∫éÂçï‰∏ÄËØ≠Ë®ÄÁöÑÂÆåÊï¥Á±ªÂûãÁ≥ªÁªüËøõË°åÈ´òÂ∫¶‰ºòÂåñÔºõË°åÊ†ºÂºèÂçèËÆÆÔºöÁºìÂ≠òÂèãÂ•ΩÁöÑ‰∫åËøõÂà∂ÈöèÊú∫ËÆøÈóÆÊ†ºÂºèÔºåÊîØÊåÅË∑≥ËøáÂ∫èÂàóÂåñÂíåÈÉ®ÂàÜÂ∫èÂàóÂåñÔºåÂπ∂‰∏îÂèØ‰ª•Ëá™Âä®ËΩ¨Êç¢‰∏∫ÂàóÊ†ºÂºè„ÄÇ  Âü∫‰∫é fory Áé∞ÊúâÁöÑ buffer„ÄÅencoding„ÄÅmeta„ÄÅcodegen ÂíåÂÖ∂‰ªñÂäüËÉΩÔºåÂèØ‰ª•ËΩªÊùæÊ∑ªÂä†Êñ∞ÂçèËÆÆ„ÄÇÊâÄÊúâËøô‰∫õÂçèËÆÆÈÉΩÂÖ±‰∫´Áõ∏ÂêåÁöÑ‰ª£Á†ÅÂ∫ìÔºåÂπ∂‰∏î‰∏Ä‰∏™ÂçèËÆÆÁöÑ‰ºòÂåñÂèØ‰ª•Ë¢´Âè¶‰∏Ä‰∏™ÂçèËÆÆÈáçÁî®„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#ÂÖºÂÆπÊÄß","content":" ","version":"0.12","tagName":"h2"},{"title":"SchemaÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#schemaÂÖºÂÆπÊÄß","content":" Apache Fory‚Ñ¢ java ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÁ±ªÊû∂ÊûÑÂêëÂâç/ÂêëÂêéÂÖºÂÆπ„ÄÇÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂíåÂèçÂ∫èÂàóÂåñ Peer ËäÇÁÇπÂèØ‰ª•Áã¨Á´ãÊ∑ªÂä†/Âà†Èô§Â≠óÊÆµ„ÄÇ  Êàë‰ª¨ËÆ°ÂàíÂú®ÂÖÉÊï∞ÊçÆÂéãÁº©ÂÆåÊàêÂêéÊîØÊåÅË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñSchemaÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"‰∫åËøõÂà∂ÂÖºÂÆπÊÄß‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#‰∫åËøõÂà∂ÂÖºÂÆπÊÄß","content":" Êàë‰ª¨‰ªçÂú®ÊîπËøõÊàë‰ª¨ÁöÑÂçèËÆÆÔºåÁõÆÂâçÊó†Ê≥ïÁ°Æ‰øù fory ÁâàÊú¨‰πãÈó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇÂ¶ÇÊûúÊÇ®Â∞ÜÊù•Ë¶ÅÂçáÁ∫ß foryÔºåËØ∑ shade fory„ÄÇ  Âú® fory 1.0 ‰πãÂâçÂ∞ÜÁ°Æ‰øù‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂÆâÂÖ®‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#ÂÆâÂÖ®","content":" ÈùôÊÄÅÂ∫èÂàóÂåñÔºàÂ¶ÇË°åÊ†ºÂºèÔºâÊú¨Ë¥®‰∏äÊòØÂÆâÂÖ®ÁöÑ„ÄÇ‰ΩÜÂä®ÊÄÅÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÂèçÂ∫èÂàóÂåñÊú™Ê≥®ÂÜåÁöÑÁ±ªÂûãÔºåËøôÂèØËÉΩ‰ºöÂ∏¶Êù•ÂÆâÂÖ®È£éÈô©„ÄÇ  ‰æãÂ¶ÇÔºöÂèçÂ∫èÂàóÂåñÂèØËÉΩ‰ºöË∞ÉÁî® init constructor Êàñ equals/ hashCode ÊñπÊ≥ïÔºåÂ¶ÇÊûúÊñπÊ≥ï‰Ωì‰∏≠ÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÁ≥ªÁªüÂ∞ÜÂ§Ñ‰∫éÂç±Èô©‰πã‰∏≠„ÄÇ  Apache Fory‚Ñ¢ Êèê‰æõ‰∫Ü‰∏Ä‰∏™Á±ªÊ≥®ÂÜåÈÄâÈ°πÔºåÂπ∂ÈªòËÆ§ÂºÄÂêØËØ•ÈÄâÈ°πÔºåÂÆÉÂè™ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÂèó‰ø°‰ªªÁöÑÊ≥®ÂÜåÁ±ªÂûãÊàñÂÜÖÁΩÆÁ±ªÂûã„ÄÇ‰∏çË¶ÅÁ¶ÅÁî®Á±ªÊ≥®ÂÜåÊàñÁ±ªÊ≥®ÂÜåÊ£ÄÊü•ÔºåÈô§ÈùûÊÇ®ÂèØ‰ª•Á°Æ‰øùÊÇ®ÁöÑÁéØÂ¢ÉÁ°ÆÂÆûÊòØÂÆâÂÖ®ÁöÑ„ÄÇÂ¶ÇÊûúÊÇ®Á¶ÅÁî®‰∫Ü class Ê≥®ÂÜåÈÄâÈ°πÔºå‰Ω†ÈúÄË¶ÅËá™Ë°åË¥üË¥£Â∫èÂàóÂåñÁöÑÂÆâÂÖ®ÊÄß„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Ë∑ØÁ∫øÂõæ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#Ë∑ØÁ∫øÂõæ","content":" ÂÖÉÂéãÁº©„ÄÅËá™Âä®ÂÖÉÂÖ±‰∫´ÂíåË∑®ËØ≠Ë®ÄÂÖºÂÆπÊÄßÔºõÁî®‰∫é c++/golang ÁöÑ AOT Ê°ÜÊû∂ÔºåÁî®‰∫éÈùôÊÄÅÁîüÊàê‰ª£Á†ÅÔºõC++/Rust ÂØπË±°ÂõæÂ∫èÂàóÂåñÊîØÊåÅÔºõGolang/Rust/NodeJS Ë°åÂ≠òÊ†ºÂºèÊîØÊåÅÔºõProtoBuffer ÂÖºÂÆπÊÄßÊîØÊåÅÔºõÁâπÂæÅÂíåÊ®°ÂûãÂ∫èÂàóÂåñÂçèËÆÆÔºõ‰∏çÊñ≠ÊîπËøõÊàë‰ª¨ÁöÑÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩÔºå‰ª•Êõ¥Âø´ÊîØÊåÅ‰ªª‰ΩïÊñ∞ÁöÑÂçèËÆÆ„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Â¶Ç‰ΩïË¥°ÁåÆ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ªãÁªç","url":"/zh-CN/docs/docs/introduction/#Â¶Ç‰ΩïË¥°ÁåÆ","content":" ËØ∑ÈòÖËØªË¥°ÁåÆÊåáÂçó‰ª•Ëé∑ÂèñÊúâÂÖ≥Â¶Ç‰ΩïË¥°ÁåÆÁöÑËØ¥Êòé„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/introduction/benchmark","content":"","keywords":"","version":"0.12"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/docs/introduction/benchmark#java-Â∫èÂàóÂåñ","content":"         ","version":"0.12","tagName":"h3"},{"title":"Java ÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/docs/introduction/benchmark#java-ÂèçÂ∫èÂàóÂåñ","content":"         ÊúâÂÖ≥Á±ªÂûãÂêëÂâç/ÂêëÂêéÂÖºÂÆπÊÄß„ÄÅÂ†ÜÂ§ñÊîØÊåÅ„ÄÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÁöÑÊõ¥Â§ö benchmark ÊµãËØïÔºåËØ∑ÂèÇËßÅbenchmarks  ","version":"0.12","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/docs/introduction/benchmark#javascript","content":"   ËØ•Êù°ÂΩ¢Âõæ‰ΩøÁî®ÁöÑÊï∞ÊçÆÂåÖÊã¨‰∏Ä‰∏™ÂÖ∑ÊúâÂ§öÁßçÂ≠óÊÆµÁ±ªÂûãÁöÑÂ§çÊùÇÂØπË±°ÔºåJSON Êï∞ÊçÆÁöÑÂ§ßÂ∞è‰∏∫ 3KB„ÄÇ  ËØ∑ÂèÇÈòÖbenchmarks benchmark ÊµãËØï‰ª£Á†Å„ÄÇ ","version":"0.12","tagName":"h3"},{"title":"Features","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/introduction/features","content":"Features Â§öÁßçËØ≠Ë®ÄÔºöJava/Python/C++/Golang/Javascript/Rust„ÄÇÈõ∂Êã∑Ë¥ùÔºöÁ±ª‰ººpickle5ÔºåÊîØÊåÅÂ†ÜÂ§ñËØª/ÂÜôÁöÑË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ„ÄÇÈ´òÊÄßËÉΩÔºöÈ´òÂ∫¶ÂèØÊâ©Â±ïÁöÑ JIT Ê°ÜÊû∂ÔºåÂèØÂú®ËøêË°åÊó∂‰ª•ÂºÇÊ≠•Â§öÁ∫øÁ®ãÊñπÂºèÁîüÊàêÂ∫èÂàóÂåñÁ®ãÂ∫è‰ª£Á†ÅÔºå‰ª•Âä†Âø´Â∫èÂàóÂåñÈÄüÂ∫¶ÔºåÈÄöËøá‰ª•‰∏ãÊñπÂºèÊèêÂçá 20-170 ÂÄçÁöÑÈÄüÂ∫¶Ôºö ÂáèÂ∞ëÂú®ÁîüÊàê‰ª£Á†Å‰∏≠ÂÜÖËÅîÂèòÈáèÂáèÂ∞ëÂÜÖÂ≠òËÆøÈóÆÔºõÈÄöËøáÂú®ÁîüÊàêÁöÑ‰ª£Á†Å‰∏≠ÂÜÖËÅîË∞ÉÁî®Êù•ÂáèÂ∞ëËôöÊãüÊñπÊ≥ïË∞ÉÁî®ÔºõÂáèÂ∞ëÊù°‰ª∂ÂàÜÊîØÔºõÂáèÂ∞ëÂìàÂ∏åÊü•ÊâæÔºõ ‰∫åËøõÂà∂ÂçèËÆÆÔºöÂØπË±°Âõæ„ÄÅË°åÊ†ºÂºèÁ≠â„ÄÇ Èô§‰∫ÜË∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‰πãÂ§ñÔºåFory ËøòÊîØÊåÅ‰ª•‰∏ãÂäüËÉΩÔºö Áõ¥Êé•ÊõøÊç¢ Java Â∫èÂàóÂåñÊ°ÜÊû∂ÔºåÂ¶Ç JDK/Kryo/HessianÔºåÊó†ÈúÄ‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºå‰ΩÜÈÄüÂ∫¶ÊèêÈ´ò 100 ÂÄç„ÄÇÂÆÉÂèØ‰ª•Â§ßÂ§ßÊèêÈ´ò RPC Ë∞ÉÁî®ÊÄßËÉΩ„ÄÅÊï∞ÊçÆ‰º†ËæìÂíåÂØπË±°ÊåÅ‰πÖÂåñÁöÑÊïàÁéáÔºõJDK Â∫èÂàóÂåñ 100% ÂÖºÂÆπÔºåÂéüÁîüÊîØÊåÅ java Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ writeObject/readObject/writeReplace/readResolve/readObjectNoDataÔºõÊîØÊåÅ golang ÁöÑÂÖ±‰∫´ÂíåÂæ™ÁéØÂºïÁî®ÂØπË±°Â∫èÂàóÂåñÔºõÊîØÊåÅ golang ÁöÑËá™Âä®ÂØπË±°Â∫èÂàóÂåñ„ÄÇ","keywords":"","version":"0.12"},{"title":"ÂÆâË£Ö Apache Fory","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/start/install","content":"","keywords":"","version":"0.12"},{"title":"Apache Fory‚Ñ¢ Java ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory","url":"/zh-CN/docs/docs/start/install#apache-fory-java-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä†ÂØπ Apache Fory ÁöÑ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-core&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- row/arrow format support --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-format&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt; --&gt;   ","version":"0.12","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ Scala ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory","url":"/zh-CN/docs/docs/start/install#apache-fory-scala-ÂÆâË£Ö","content":" Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_2.13&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® Maven Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-scala_3&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 2.13 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.12.3&quot;   Ë¶Å‰ΩøÁî® sbt Ê∑ªÂä† scala 3 ÁöÑ Fory scala ‰æùËµñÔºåËØ∑‰ΩøÁî®‰ª•‰∏ãÈÖçÁΩÆÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.12.3&quot;   ","version":"0.12","tagName":"h3"},{"title":"Fory Kotlin ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory","url":"/zh-CN/docs/docs/start/install#fory-kotlin-ÂÆâË£Ö","content":" To add a dependency on Apache Fory‚Ñ¢kotlin with maven, use the following:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fory&lt;/groupId&gt; &lt;artifactId&gt;fory-kotlin&lt;/artifactId&gt; &lt;version&gt;0.12.3&lt;/version&gt; &lt;/dependency&gt;   ","version":"0.12","tagName":"h2"},{"title":"Fory Python ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory","url":"/zh-CN/docs/docs/start/install#fory-python-ÂÆâË£Ö","content":" pip install pyfory   ","version":"0.12","tagName":"h2"},{"title":"Fory JavaScript ÂÆâË£Ö‚Äã","type":1,"pageTitle":"ÂÆâË£Ö Apache Fory","url":"/zh-CN/docs/docs/start/install#fory-javascript-ÂÆâË£Ö","content":" Apache Fory ÁõÆÂâçÊöÇÊú™ÂèëÂ∏ÉÂà∞ NPM, ËØ∑ÈÄöËøáÊ∫êÁ†ÅÂÆâË£Ö„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"ÂºÄÂèëÊåáÂçó","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/development","content":"","keywords":"","version":"0.12"},{"title":"Êú¨Âú∞ÊûÑÂª∫ Apache Fory‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#Êú¨Âú∞ÊûÑÂª∫-apache-fory","content":" ‰ªé Github ‰ª£Á†ÅÂ∫ì ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"ÊûÑÂª∫ Apache Fory Java‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-java","content":" cd java mvn clean compile -DskipTests   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  java 1.8+maven 3.6.3+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory Python‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  python 3.6+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory C++‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-c","content":" Build fory row formatÔºö  pip install pyarrow==14.0.0 bazel build //cpp/fory/row:fory_row_format   Build fory row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fory/encoder:fory_encoder   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  compilers with C++17 supportbazel 6.3.2  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory GoLang‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-golang","content":" cd go/fory # run test go test -v # run xlang test go test -v fory_xlang_test.go   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  go 1.13+  ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory Rust‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-rust","content":" cd rust # build cargo build # run test cargo test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"0.12","tagName":"h3"},{"title":"ÊûÑÂª∫ Apache Fory JavaScript‚Äã","type":1,"pageTitle":"ÂºÄÂèëÊåáÂçó","url":"/zh-CN/docs/guide/development#ÊûÑÂª∫-apache-fory-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   Êú¨Âú∞ÁéØÂ¢ÉË¶ÅÊ±Ç‚Äã  node 14+npm 8+ ","version":"0.12","tagName":"h3"},{"title":"Java Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"0.12"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Âø´ÈÄüÂºÄÂßã","content":" Ê≥®ÊÑèÔºåFory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ßÔºåFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî®ÔºåËÄå‰∏çÊòØÊØèÊ¨°ÈÉΩÊñ∞Âª∫„ÄÇ Âª∫ËÆÆÂ∞Ü Fory ‰øùÂ≠òÂú®ÈùôÊÄÅÂÖ®Â±ÄÂèòÈáè„ÄÅÂçï‰æãÂØπË±°ÊàñÊúâÈôêÊï∞ÈáèÁöÑÂÆû‰æãÂèòÈáè‰∏≠„ÄÇ  ÂçïÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Ê≥®ÂÜåÁ±ªÂûãÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄÔºå‰ΩÜ‰∏çÊòØÂº∫Âà∂ÁöÑ„ÄÇ // ÂêØÁî®Á±ªÊ≥®ÂÜåÂêéÔºåÊâÄÊúâËá™ÂÆö‰πâÁ±ªÂûãÈÉΩÂøÖÈ°ªÊ≥®ÂÜå„ÄÇ fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Â§öÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory ÂÆû‰æãÂ§çÁî®Á§∫‰æãÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // Â§çÁî® fory ÂÆû‰æã private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.12","tagName":"h2"},{"title":"ForyBuilder ÈÖçÁΩÆÈÄâÈ°π‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#forybuilder-ÈÖçÁΩÆÈÄâÈ°π","content":" ÈÄâÈ°πÂêç\tËØ¥Êòé\tÈªòËÆ§ÂÄºtimeRefIgnored\tÊòØÂê¶ÂøΩÁï•ÊâÄÊúâÂú® TimeSerializers Ê≥®ÂÜåÁöÑÊó∂Èó¥Á±ªÂûãÂèäÂÖ∂Â≠êÁ±ªÁöÑÂºïÁî®Ë∑üË∏™ÔºàÂΩìÂºïÁî®Ë∑üË∏™ÂºÄÂêØÊó∂Ôºâ„ÄÇÂ¶ÇÈúÄÂØπÊó∂Èó¥Á±ªÂûãÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂèØÈÄöËøá Fory#registerSerializer(Class, Serializer) Ê≥®ÂÜå„ÄÇ‰æãÂ¶ÇÔºöfory.registerSerializer(Date.class, new DateSerializer(fory, true))„ÄÇÊ≥®ÊÑèÔºåÂêØÁî®ÂºïÁî®Ë∑üË∏™ÈúÄÂú®ÂåÖÂê´Êó∂Èó¥Â≠óÊÆµÁöÑÁ±ªÂûã‰ª£Á†ÅÁîüÊàêÂâçÂÆåÊàêÔºåÂê¶ÂàôËøô‰∫õÂ≠óÊÆµ‰ªç‰ºöË∑≥ËøáÂºïÁî®Ë∑üË∏™„ÄÇ\ttrue compressInt\tÊòØÂê¶ÂêØÁî® int ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressLong\tÊòØÂê¶ÂêØÁî® long ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressString\tÊòØÂê¶ÂêØÁî®Â≠óÁ¨¶‰∏≤ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\tfalse classLoader\tÁ±ªÂä†ËΩΩÂô®‰∏çÂª∫ËÆÆÂä®ÊÄÅÂèòÊõ¥ÔºåFory ‰ºöÁºìÂ≠òÁ±ªÂÖÉÊï∞ÊçÆ„ÄÇÂ¶ÇÈúÄÂèòÊõ¥Á±ªÂä†ËΩΩÂô®ÔºåËØ∑‰ΩøÁî® LoaderBinding Êàñ ThreadSafeFory„ÄÇ\tThread.currentThread().getContextClassLoader() compatibleMode\tÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπÊÄßÈÖçÁΩÆ„ÄÇ‰∏é checkClassVersion ÈÖçÁΩÆÁõ∏ÂÖ≥„ÄÇSCHEMA_CONSISTENTÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÈúÄ‰∏ÄËá¥„ÄÇCOMPATIBLEÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÂèØ‰∏çÂêåÔºåÂèØÁã¨Á´ãÂ¢ûÂà†Â≠óÊÆµ„ÄÇËØ¶ËßÅ„ÄÇ\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tÊòØÂê¶Ê†°È™åÁ±ªÁªìÊûÑ‰∏ÄËá¥ÊÄß„ÄÇÂêØÁî®ÂêéÔºåFory ‰ºöÂÜôÂÖ•Âπ∂Ê†°È™å classVersionHash„ÄÇËã•ÂêØÁî® CompatibleMode#COMPATIBLEÔºåÊ≠§È°π‰ºöËá™Âä®ÂÖ≥Èó≠„ÄÇÈô§ÈùûËÉΩÁ°Æ‰øùÁ±ª‰∏ç‰ºöÊºîÂåñÔºåÂê¶Âàô‰∏çÂª∫ËÆÆÂÖ≥Èó≠„ÄÇ\tfalse checkJdkClassSerializable\tÊòØÂê¶Ê†°È™å java.* ‰∏ãÁöÑÁ±ªÂÆûÁé∞‰∫Ü Serializable Êé•Âè£„ÄÇËã•Êú™ÂÆûÁé∞ÔºåFory ‰ºöÊäõÂá∫ UnsupportedOperationException„ÄÇ\ttrue registerGuavaTypes\tÊòØÂê¶È¢ÑÊ≥®ÂÜå Guava Á±ªÂûãÔºàÂ¶Ç RegularImmutableMap/RegularImmutableListÔºâ„ÄÇËøô‰∫õÁ±ªÂûãËôΩÈùûÂÖ¨ÂºÄ APIÔºå‰ΩÜËæÉ‰∏∫Á®≥ÂÆö„ÄÇ\ttrue requireClassRegistration\tÂÖ≥Èó≠ÂêéÂèØÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ\ttrue suppressClassRegistrationWarnings\tÊòØÂê¶Â±èËîΩÁ±ªÊ≥®ÂÜåË≠¶Âëä„ÄÇË≠¶ÂëäÂèØÁî®‰∫éÂÆâÂÖ®ÂÆ°ËÆ°Ôºå‰ΩÜÂèØËÉΩÂΩ±Âìç‰ΩìÈ™åÔºåÈªòËÆ§ÂºÄÂêØÂ±èËîΩ„ÄÇ\ttrue metaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´Ê®°Âºè„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ scopedMetaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂçïÊ¨°Â∫èÂàóÂåñËåÉÂõ¥ÂÜÖÁöÑÂÖÉÊï∞ÊçÆÁã¨‰∫´„ÄÇËØ•ÂÖÉÊï∞ÊçÆ‰ªÖÂú®Êú¨Ê¨°Â∫èÂàóÂåñ‰∏≠ÊúâÊïàÔºå‰∏ç‰∏éÂÖ∂‰ªñÂ∫èÂàóÂåñÂÖ±‰∫´„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ metaCompressor\tËÆæÁΩÆÂÖÉÊï∞ÊçÆÂéãÁº©Âô®„ÄÇÈªòËÆ§‰ΩøÁî®Âü∫‰∫é Deflater ÁöÑ DeflaterMetaCompressorÔºåÂèØËá™ÂÆö‰πâÂ¶Ç zstd Á≠âÊõ¥È´òÂéãÁº©ÊØîÁöÑÂéãÁº©Âô®„ÄÇÈúÄ‰øùËØÅÁ∫øÁ®ãÂÆâÂÖ®„ÄÇ\tDeflaterMetaCompressor deserializeNonexistentClass\tÊòØÂê¶ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñ/Ë∑≥Ëøá‰∏çÂ≠òÂú®ÁöÑÁ±ªÁöÑÊï∞ÊçÆ„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ codeGenEnabled\tÊòØÂê¶ÂêØÁî®‰ª£Á†ÅÁîüÊàê„ÄÇÂÖ≥Èó≠ÂêéÈ¶ñÊ¨°Â∫èÂàóÂåñÊõ¥Âø´Ôºå‰ΩÜÂêéÁª≠Â∫èÂàóÂåñÊÄßËÉΩËæÉ‰Ωé„ÄÇ\ttrue asyncCompilationEnabled\tÊòØÂê¶ÂêØÁî®ÂºÇÊ≠•ÁºñËØë„ÄÇÂêØÁî®ÂêéÔºåÂ∫èÂàóÂåñÂÖàÁî®Ëß£ÈáäÊ®°ÂºèÔºåJIT ÂÆåÊàêÂêéÂàáÊç¢‰∏∫ JIT Ê®°Âºè„ÄÇ\tfalse scalaOptimizationEnabled\tÊòØÂê¶ÂêØÁî® Scala ÁâπÂÆö‰ºòÂåñ„ÄÇ\tfalse copyRef\tÂÖ≥Èó≠ÂêéÔºåÊ∑±Êã∑Ë¥ùÊÄßËÉΩÊõ¥Â•ΩÔºå‰ΩÜ‰ºöÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®„ÄÇÂØπË±°Âõæ‰∏≠ÁöÑÂêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°„ÄÇ\ttrue serializeEnumByName\tÂêØÁî®ÂêéÔºåÊûö‰∏æÊåâÂêçÁß∞Â∫èÂàóÂåñÔºåÂê¶ÂàôÊåâ ordinal„ÄÇ\tfalse  ","version":"0.12","tagName":"h2"},{"title":"È´òÁ∫ßÁî®Ê≥ï‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#È´òÁ∫ßÁî®Ê≥ï","content":" ","version":"0.12","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ÂàõÂª∫‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#apache-fory-ÂàõÂª∫","content":" ÂçïÁ∫øÁ®ã Fory Á§∫‰æãÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Á∫øÁ®ãÂÆâÂÖ® Fory Á§∫‰æãÔºö  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) // ÂêØÁî® int ÂéãÁº© // .withIntCompressed(true) // ÂêØÁî® long ÂéãÁº© // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ","content":" Âú®ÂÆûÈôÖÁ≥ªÁªü‰∏≠ÔºåÂ∫èÂàóÂåñÁî®Âà∞ÁöÑÁ±ªÁªìÊûÑÂèØËÉΩ‰ºöÈöèÊó∂Èó¥ÂèòÂåñÔºåÊØîÂ¶ÇÂ≠óÊÆµÁöÑÂ¢ûÂà†„ÄÇÂΩìÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´Ø‰ΩøÁî®‰∏çÂêåÁâàÊú¨ÁöÑ jar Êó∂ÔºåÁ±ªÁªìÊûÑÂèØËÉΩ‰∏ç‰∏ÄËá¥„ÄÇ  Fory ÈªòËÆ§ÈááÁî® CompatibleMode.SCHEMA_CONSISTENTÔºåÂç≥Ë¶ÅÊ±ÇÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ÄËá¥Ôºå‰ª•Ëé∑ÂæóÊúÄÂ∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØÂíåÊúÄÈ´òÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂèçÂ∫èÂàóÂåñ‰ºöÂ§±Ë¥•„ÄÇ  Â¶ÇÈúÄÊîØÊåÅÁ±ªÁªìÊûÑÊºîÂåñÔºàÂâçÂêë/ÂêéÂêëÂÖºÂÆπÔºâÔºåÈúÄÂ∞Ü Fory ÈÖçÁΩÆ‰∏∫ CompatibleMode.COMPATIBLEÔºåÂÖÅËÆ∏Â≠óÊÆµÂ¢ûÂà†ÔºåÂèçÂ∫èÂàóÂåñÁ´ØÂèØËá™Âä®ÈÄÇÈÖç‰∏çÂêåÁªìÊûÑ„ÄÇ  Á§∫‰æãÔºö  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ÂÖºÂÆπÊ®°Âºè‰∏ãÔºåÁ±ªÂÖÉÊï∞ÊçÆ‰ºöÂÜôÂÖ•Â∫èÂàóÂåñÁªìÊûú„ÄÇApache Fory‚Ñ¢ ÈááÁî®È´òÊïàÂéãÁº©ÁÆóÊ≥ïÈôç‰ΩéÂÖÉÊï∞ÊçÆÂºÄÈîÄÔºå‰ΩÜ‰ªç‰ºöÊúâ‰∏ÄÂÆö‰ΩìÁßØÂ¢ûÂä†„ÄÇ‰∏∫Ëøõ‰∏ÄÊ≠•Èôç‰ΩéÂÖÉÊï∞ÊçÆÊàêÊú¨ÔºåApache Fory‚Ñ¢ ÊîØÊåÅÂÖÉÊï∞ÊçÆÂÖ±‰∫´Êú∫Âà∂ÔºåËØ¶ÊÉÖËßÅMeta Sharing„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂéãÁº©‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂéãÁº©","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed ÂèØÁî®‰∫éÂéãÁº© int/long Á±ªÂûã‰ª•ÂáèÂ∞è‰ΩìÁßØ„ÄÇÈªòËÆ§Âùá‰∏∫ÂºÄÂêØ„ÄÇ  Â¶ÇÊûúÂ∫èÂàóÂåñ‰ΩìÁßØ‰∏çÊïèÊÑüÔºàÂ¶Ç‰πãÂâçÁî® flatbuffers Á≠âÊó†ÂéãÁº©Ê†ºÂºèÔºâÔºåÂª∫ËÆÆÂÖ≥Èó≠ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇÂØπ‰∫éÂÖ®‰∏∫Êï∞Â≠óÁöÑÊï∞ÊçÆÔºåÂéãÁº©ÂèØËÉΩÂ∏¶Êù• 80% ÁöÑÊÄßËÉΩÊçüÂ§±„ÄÇ  int ÂéãÁº©ÈááÁî® 1~5 Â≠óËäÇÂèòÈïøÁºñÁ†ÅÔºålong ÂéãÁº©ÊîØÊåÅ‰∏§ÁßçÊñπÂºèÔºö  SLIÔºàSmall long as intÔºåÈªòËÆ§ÔºâÔºölong Âú® [-1073741824, 1073741823] ËåÉÂõ¥ÂÜÖÁî® 4 Â≠óËäÇÁºñÁ†ÅÔºåÂê¶ÂàôÁî® 9 Â≠óËäÇ„ÄÇPVLÔºàProgressive Variable-length LongÔºâÔºöÈááÁî®ÂèòÈïøÁºñÁ†ÅÔºåË¥üÊï∞ÈÄöËøá (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ËΩ¨Êç¢„ÄÇ  Â¶Ç long Á±ªÂûãÊï∞ÊçÆÊó†Ê≥ïÊúâÊïàÂéãÁº©ÔºåÂª∫ËÆÆÂÖ≥Èó≠ long ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂØπË±°Ê∑±Êã∑Ë¥ù‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂØπË±°Ê∑±Êã∑Ë¥ù","content":" Ê∑±Êã∑Ë¥ùÁ§∫‰æãÔºö  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Â¶ÇÈúÄÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®ÔºàÂç≥ÂØπË±°Âõæ‰∏≠Âêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°ÔºâÔºåÂèØÂÖ≥Èó≠ refCopyÔºö  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"0.12","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" Êüê‰∫õÂú∫ÊôØ‰∏ãÈúÄ‰∏∫ÁâπÂÆöÁ±ªÂûãÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÔºåÂ∞§ÂÖ∂ÊòØ JDK writeObject/writeReplace/readObject/readResolve ÊñπÂºèÊïàÁéáËæÉ‰ΩéÊó∂„ÄÇÂ¶Ç‰∏ã‰æãÔºåÈÅøÂÖç Foo#writeObject Ë¢´Ë∞ÉÁî®Ôºö  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®Ôºö  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"0.12","tagName":"h3"},{"title":"ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®","content":" ‰∏é Map Á±ª‰ººÔºåÂÆûÁé∞Ëá™ÂÆö‰πâ Collection Á±ªÂûãÁöÑÂ∫èÂàóÂåñÂô®Êó∂ÔºåÈúÄÁªßÊâø CollectionSerializer Êàñ AbstractCollectionSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Âú®‰∫éÔºåAbstractCollectionSerializer ÂèØÁî®‰∫éÂ∫èÂàóÂåñÁ±ª‰ººÈõÜÂêàÁªìÊûÑ‰ΩÜ‰∏çÊòØ Java Collection Â≠êÁ±ªÁöÑÁ±ªÂûã„ÄÇ  ÂØπ‰∫éÈõÜÂêàÂ∫èÂàóÂåñÂô®ÔºåÊúâ‰∏Ä‰∏™ÁâπÊÆäÂèÇÊï∞ supportCodegenHook ÈúÄË¶ÅÈÖçÁΩÆÔºö  ËÆæ‰∏∫ true Êó∂Ôºö ÂêØÁî®ÈõÜÂêàÂÖÉÁ¥†ÁöÑÈ´òÊïàËÆøÈóÆÂíå JIT ÁºñËØëÔºåÊèêÂçáÊÄßËÉΩÁõ¥Êé•Â∫èÂàóÂåñË∞ÉÁî®ÔºåÂÜÖËÅî map ÁöÑ key-valueÔºåÊó†Âä®ÊÄÅÂàÜÂèëÂºÄÈîÄÊé®ËçêÁî®‰∫éÊ†áÂáÜÈõÜÂêàÁ±ªÂûã ËÆæ‰∏∫ false Êó∂Ôºö ÈááÁî®Êé•Âè£ÊñπÂºèËÆøÈóÆÂÖÉÁ¥†ÔºåÂä®ÊÄÅÂàÜÂèëÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÈÄÇÂêàÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±ÇÁöÑËá™ÂÆö‰πâÈõÜÂêàÂèØÂ§ÑÁêÜÂ§çÊùÇÈõÜÂêàÂÆûÁé∞  ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®ÂÆûÁé∞‚Äã  ÂÆûÁé∞ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®Êó∂ÔºåÂèØÂà©Áî® Fory Áé∞ÊúâÁöÑ‰∫åËøõÂà∂Ê†ºÂºèÂíåÈõÜÂêàÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩ„ÄÇÂÖ≥ÈîÆÂú®‰∫éÊ≠£Á°ÆÂÆûÁé∞ onCollectionWrite Âíå newCollection ÊñπÊ≥ï‰ª•Â§ÑÁêÜÂÖÉÊï∞ÊçÆÔºåÂÖ∂‰ΩôÂÖÉÁ¥†Â∫èÂàóÂåñÁî± Fory Ëá™Âä®ÂÆåÊàê„ÄÇ  Á§∫‰æãÔºö  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook ÊéßÂà∂ÊòØÂê¶ÂêØÁî® JIT ÁºñËØë super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // ÂÜôÂÖ•ÈõÜÂêàÂ§ßÂ∞è buffer.writeVarUint32Small7(value.size()); // ÂèØÂÜôÂÖ•È¢ùÂ§ñÈõÜÂêàÂÖÉÊï∞ÊçÆ return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // ÂàõÂª∫Êñ∞ÈõÜÂêàÂÆû‰æã Collection collection = super.newCollection(buffer); // ËØªÂèñÂπ∂ËÆæÁΩÆÈõÜÂêàÂ§ßÂ∞è int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Ê≥®ÊÑèÔºöÂÆûÁé∞ newCollection Êó∂ÈúÄË∞ÉÁî® setNumElementsÔºå‰ª•ÂëäÁü• Fory ÂèçÂ∫èÂàóÂåñÂ§öÂ∞ëÂÖÉÁ¥†„ÄÇ  ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâÈõÜÂêàÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄÂ∫èÂàóÂåñÂ∫ïÂ±Ç‰∏∫ÂéüÂßãÊï∞ÁªÑÊàñÊúâÁâπÊÆäÈúÄÊ±ÇÁöÑÈõÜÂêàÁ±ªÂûãÔºåÊ≠§Êó∂ÂèØÁ¶ÅÁî® JITÔºåÁõ¥Êé•ÈáçÂÜô write Âíå read ÊñπÊ≥ï„ÄÇ  ËøôÁßçÊñπÂºèÔºö  ÂÆåÂÖ®ÊéßÂà∂Â∫èÂàóÂåñÊ†ºÂºèÈÄÇÂêàÂéüÂßãÊï∞ÁªÑË∑≥ËøáÈõÜÂêàËø≠‰ª£ÂºÄÈîÄÂèØÁõ¥Êé•ÂÜÖÂ≠òËÆøÈóÆ  Á§∫‰æãÔºàÂéüÂßã int Êï∞ÁªÑÔºâÔºö  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public void set(int index, int value) { if (index &gt;= size) throw new IndexOutOfBoundsException(); elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends AbstractCollectionSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Á¶ÅÁî® JITÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { buffer.writeVarUint32Small7(value.size()); int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { int size = buffer.readVarUint32Small7(); int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // JIT Á¶ÅÁî®Êó∂‰ª•‰∏ãÊñπÊ≥ï‰∏ç‰ΩøÁî® @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  ÂéüÂßãÊï∞ÁªÑÂ≠òÂÇ®ÔºöÁõ¥Êé•Áî® int[]ÔºåÈÅøÂÖçË£ÖÁÆ±/ÊãÜÁÆ±ÔºåÂÜÖÂ≠òÂ∏ÉÂ±ÄÈ´òÊïà„ÄÇÁõ¥Êé•Â∫èÂàóÂåñÔºöÂÖàÂÜô sizeÔºåÂÜçÂÜôÂéüÂßãÂÄºÔºåÊó†ÈúÄËø≠‰ª£ÔºåÊó†Ë£ÖÁÆ±/ÊãÜÁÆ±„ÄÇÁõ¥Êé•ÂèçÂ∫èÂàóÂåñÔºöÂÖàËØª sizeÔºåÂÜçËØªÂéüÂßãÂÄºÂ°´ÂÖÖÊï∞ÁªÑÔºåÊúÄÂêéÊûÑÈÄ†ÂØπË±°„ÄÇÁ¶ÅÁî® JITÔºösupportCodegenHook=falseÔºåÈáçÂÜô write/readÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÊ†ºÂºè„ÄÇ  ÈÄÇÁî®Âú∫ÊôØÔºö  Âè™Â§ÑÁêÜÂéüÂßãÁ±ªÂûãÊÄßËÉΩÊûÅËá¥Ë¶ÅÊ±ÇÈúÄÊúÄÂ∞èÂÜÖÂ≠òÂºÄÈîÄÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±Ç  ‰ΩøÁî®Á§∫‰æãÔºö  IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); byte[] bytes = fory.serialize(list); IntList newList = (IntList) fory.deserialize(bytes);   ËôΩÁÑ∂ÊîæÂºÉ‰∫Ü Fory ÁöÑÈÉ®ÂàÜ‰ºòÂåñÔºå‰ΩÜÂØπÂéüÂßãÁ±ªÂûãÂíåÁõ¥Êé•Êï∞ÁªÑËÆøÈóÆÂú∫ÊôØÊÄßËÉΩÊûÅÈ´ò„ÄÇ  ÂÆûÁé∞ collection-like Á±ªÂûãÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄ‰∏∫Á±ª‰ººÈõÜÂêà‰ΩÜÈùûÊ†áÂáÜ Java Collection ÁöÑÁ±ªÂûãÂÆûÁé∞Â∫èÂàóÂåñÂô®„ÄÇÂéüÂàôÂ¶Ç‰∏ãÔºö  ÁªßÊâø AbstractCollectionSerializerÂêØÁî® JIT ‰ºòÂåñÔºàsupportCodegenHook=trueÔºâÈÄöËøáËßÜÂõæÁ±ªÈ´òÊïàËÆøÈóÆÂÖÉÁ¥†Ê≠£Á°ÆÁÆ°ÁêÜ size  Á§∫‰æãÔºö  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) throw new IllegalStateException(&quot;Collection is full&quot;); elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends AbstractCollectionSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  Êï∞ÁªÑÂ≠òÂÇ®ÔºåÂÆöÈïøÔºåÁõ¥Êé•ËÆøÈóÆËßÜÂõæÁ±ªÁªßÊâø AbstractCollectionÔºåÂÆûÁé∞Ëø≠‰ª£Âíå addÊîØÊåÅ JIT ‰ºòÂåñÔºåÊï∞ÁªÑÈõ∂Êã∑Ë¥ùÊÄßËÉΩ‰ºòÂÖàÔºåÁÅµÊ¥ªÊÄßÁï•‰Ωé    Â¶ÇÈúÄÁªßÁª≠Ë°•ÂÖÖ map-like Á±ªÂûã„ÄÅÊ≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®„ÄÅExternalizable ÊîØÊåÅÁ≠âÂÜÖÂÆπÔºåËØ∑ÂõûÂ§ç&quot;ÁªßÁª≠&quot;ÔºÅ  ","version":"0.12","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâ-map-Â∫èÂàóÂåñÂô®","content":" Ëá™ÂÆö‰πâ Map Á±ªÂûãÂ∫èÂàóÂåñÂô®ÈúÄÁªßÊâø MapSerializer Êàñ AbstractMapSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Á±ª‰ººÈõÜÂêàÂ∫èÂàóÂåñÂô®„ÄÇ  supportCodegenHook=trueÔºöÊé®ËçêÁî®‰∫éÊ†áÂáÜ MapÔºåÊîØÊåÅ JIT ‰ºòÂåñsupportCodegenHook=falseÔºöÈÄÇÂêàÁâπÊÆäÈúÄÊ±ÇÔºåÈúÄÊâãÂä®ÂÆûÁé∞Â∫èÂàóÂåñÈÄªËæë  ÊîØÊåÅ JIT ÁöÑ Map Â∫èÂàóÂåñÂô®Á§∫‰æã‚Äã  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { buffer.writeVarUint32Small7(value.size()); return value; } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new HashMap(numElements); } }   ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã  ÈÄÇÁî®‰∫éÊúâÁâπÊÆäÂ≠óÊÆµÊàñËá™ÂÆö‰πâ‰∫åËøõÂà∂Ê†ºÂºèÁöÑ Map Á±ªÂûã„ÄÇ  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { // ... ÁúÅÁï•ÂÆûÁé∞ ... } class FixedValueMapSerializer extends AbstractMapSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { buffer.writeInt32(value.getFixedValue()); buffer.writeVarUint32Small7(value.getKeys().size()); for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { int fixedValue = buffer.readInt32(); int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   ","version":"0.12","tagName":"h3"},{"title":"Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" ÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÂêéÔºåÈúÄÈÄöËøáÂ¶Ç‰∏ãÊñπÂºèÊ≥®ÂÜåÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Ê≥®ÂÜå Map Â∫èÂàóÂåñÂô® fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Ê≥®ÂÜåÈõÜÂêàÂ∫èÂàóÂåñÂô® fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Ê≥®ÊÑè‰∫ãÈ°πÔºö ÂßãÁªàÁªßÊâøÂêàÈÄÇÁöÑÂü∫Á±ªÔºàMap Áî® MapSerializer/AbstractMapSerializerÔºåÈõÜÂêàÁî® CollectionSerializer/AbstractCollectionSerializerÔºâÊ†πÊçÆ supportCodegenHook ÈÄâÊã©ÊÄßËÉΩ‰∏éÁÅµÊ¥ªÊÄßÂ¶ÇÈúÄÂºïÁî®Ë∑üË∏™ÔºåÈúÄÊ≠£Á°ÆÂ§ÑÁêÜsupportCodegenHook=true Êó∂ÔºåÈúÄÁî® setNumElements/getAndClearNumElements ÁÆ°ÁêÜÂÖÉÁ¥†Êï∞Èáè  ","version":"0.12","tagName":"h3"},{"title":"ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå","content":" ForyBuilder#requireClassRegistration ÂèØÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÊ†°È™åÔºåÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ª‰ΩÜÊúâÂÆâÂÖ®È£éÈô©„ÄÇ  Â¶ÇÊó†Ê≥ïÁ°Æ‰øùÁéØÂ¢ÉÂÆâÂÖ®ÔºåÂàáÂãøÂÖ≥Èó≠Á±ªÊ≥®ÂÜå„ÄÇ ÂèçÂ∫èÂàóÂåñÊú™Áü•/‰∏çÂèó‰ø°‰ªªÁ±ªÂûãÊó∂ÔºåÊÅ∂ÊÑè‰ª£Á†ÅÂèØËÉΩÂú® init/equals/hashCode Á≠âÊñπÊ≥ï‰∏≠Ë¢´ÊâßË°å„ÄÇ  Á±ªÊ≥®ÂÜå‰∏ç‰ªÖÊèêÂçáÂÆâÂÖ®ÊÄßÔºåËøòÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄ„ÄÇÊ≥®ÂÜåÈ°∫Â∫èÈúÄ‰øùÊåÅÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´Ø‰∏ÄËá¥„ÄÇ  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   Â¶ÇÈúÄÂÖ≥Èó≠Ê≥®ÂÜåÊ†°È™åÔºåÂèØÈÄöËøá ClassResolver#setClassChecker Ëá™ÂÆö‰πâÂÖÅËÆ∏ÁöÑÁ±ªÂêçÔºö  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   Êàñ‰ΩøÁî® AllowListCheckerÔºö  AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory Êèê‰æõ‰∫Ü org.apache.fory.resolver.AllowListCheckerÔºå‰πüÂèØËá™Ë°åÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊ†°È™åÈÄªËæë„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª","content":" Êåâ id Ê≥®ÂÜåÁ±ªÊÄßËÉΩÂíå‰ΩìÁßØÊõ¥‰ºòÔºå‰ΩÜÂ¶ÇÈúÄÁÆ°ÁêÜÂ§ßÈáèÁ±ªÂûã idÔºåÂèØÁî® register(Class&lt;?&gt; cls, String namespace, String typeName) ÊåâÂêçÁß∞Ê≥®ÂÜåÔºö  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   Â¶ÇÊó†ÈáçÂêçÔºånamespace ÂèØ‰∏∫Á©∫‰ª•ÂáèÂ∞ë‰ΩìÁßØ„ÄÇ  ‰∏çÂª∫ËÆÆÁî®ÂêçÁß∞Ê≥®ÂÜåÔºåÂõ†Â∫èÂàóÂåñ‰ΩìÁßØ‰ºöÊòæËëóÂ¢ûÂä†„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÔºåÂèØÈ´òÊïàÂ§ÑÁêÜÂ§ßÂØπË±°ÊàñÁõ¥Êé•ÂÜÖÂ≠òÁºìÂÜ≤Âå∫„ÄÇÁ§∫‰æãÔºö  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂ§çÁî®Ôºå‰∏çË¶ÅÊØèÊ¨°Êñ∞Âª∫ static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"0.12","tagName":"h3"},{"title":"ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºàMeta SharingÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂÖÉÊï∞ÊçÆÂÖ±‰∫´meta-sharing","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂú®Âêå‰∏Ä‰∏ä‰∏ãÊñáÔºàÂ¶Ç TCP ËøûÊé•ÔºâÂÜÖÂÖ±‰∫´Á±ªÂûãÂÖÉÊï∞ÊçÆÔºàÁ±ªÂêç„ÄÅÂ≠óÊÆµÂêç„ÄÅÊúÄÁªàÂ≠óÊÆµÁ±ªÂûãÁ≠âÔºâ„ÄÇÈ¶ñÊ¨°Â∫èÂàóÂåñÊó∂ÂÖÉÊï∞ÊçÆ‰ºöÂèëÈÄÅÂà∞ÂØπÁ´ØÔºåÂØπÁ´ØÂèØÂü∫‰∫éÂÖÉÊï∞ÊçÆÈáçÂª∫ÂèçÂ∫èÂàóÂåñÂô®ÔºåÂêéÁª≠Â∫èÂàóÂåñÊó†ÈúÄÈáçÂ§ç‰º†ËæìÂÖÉÊï∞ÊçÆÔºå‰ªéËÄåÂáèÂ∞ëÁΩëÁªúÊµÅÈáèÂπ∂Ëá™Âä®ÊîØÊåÅÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ„ÄÇ  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // Ë∑®Â∫èÂàóÂåñÂÖ±‰∫´ÂÖÉÊï∞ÊçÆ // .withMetaContextShare(true) // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"0.12","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª„ÄÇÈÄöËøá ForyBuilder#deserializeNonexistentClass(true) ÂêØÁî®„ÄÇÂΩìÂêØÁî®‰∏îÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÂºÄÂêØÊó∂ÔºåFory ‰ºöÂ∞ÜËØ•Á±ªÂûãÁöÑÊï∞ÊçÆÂ≠òÂÇ®‰∏∫ Map ÁöÑÊÉ∞ÊÄßÂ≠êÁ±ªÔºåÈÅøÂÖçÂèçÂ∫èÂàóÂåñÊó∂Â°´ÂÖÖ Map ÁöÑÈáçÊéíÂºÄÈîÄÔºåÊèêÂçáÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÊï∞ÊçÆË¢´ÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™ËøõÁ®ã‰∏îËØ•Á±ªÂ≠òÂú®ÔºåÂàôÂèØÊó†ÊçüËøòÂéü‰∏∫ÂéüÁ±ªÂûãÂØπË±°„ÄÇ  Ëã•Êú™ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºåÂàôÊñ∞Á±ªÊï∞ÊçÆ‰ºöË¢´Ë∑≥ËøáÔºåËøîÂõû NonexistentSkipClass Âç†‰ΩçÂØπË±°„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Á±ªÂûãÊò†Â∞ÑÔºàË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ù/Êò†Â∞ÑÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Á±ªÂûãÊò†Â∞ÑË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ùÊò†Â∞Ñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™Á±ªÂûãÁöÑÂØπË±°Ê∑±Êã∑Ë¥ù/Êò†Â∞Ñ‰∏∫Âè¶‰∏Ä‰∏™Á±ªÂûã„ÄÇÊ≥®ÊÑè‰∫ãÈ°πÔºö  ËØ•Êò†Â∞Ñ‰ºöÊâßË°åÊ∑±Êã∑Ë¥ùÔºåÊâÄÊúâÊò†Â∞ÑÂ≠óÊÆµ‰ºöÂÖàÂ∫èÂàóÂåñ‰∏∫‰∫åËøõÂà∂ÔºåÂÜçÂèçÂ∫èÂàóÂåñ‰∏∫ÁõÆÊ†áÁ±ªÂûã„ÄÇÊâÄÊúâÁªìÊûÑ‰ΩìÁ±ªÂûãÂøÖÈ°ªÁî®Áõ∏Âêå ID Ê≥®ÂÜåÔºåÂê¶ÂàôÊó†Ê≥ïÊ≠£Á°ÆÊò†Â∞Ñ„ÄÇÂä°ÂøÖ‰øùËØÅÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÊ≥®ÂÜåÈ°∫Â∫è‰∏ÄËá¥„ÄÇ  Á§∫‰æãÔºö  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"0.12","tagName":"h3"},{"title":"ËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ËøÅÁßª","content":" ","version":"0.12","tagName":"h2"},{"title":"JDK Â∫èÂàóÂåñËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#jdk-Â∫èÂàóÂåñËøÅÁßª","content":" Â¶ÇÊûú‰πãÂâç‰ΩøÁî® JDK Â∫èÂàóÂåñÔºå‰∏îÊó†Ê≥ïÂêåÊó∂ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂíåÊúçÂä°Á´ØÔºàÂ¶ÇÁ∫ø‰∏äÂ∫îÁî®Â∏∏ËßÅÂú∫ÊôØÔºâÔºåFory Êèê‰æõ org.apache.fory.serializer.JavaSerializer.serializedByJDK Â∑•ÂÖ∑ÊñπÊ≥ïÂà§Êñ≠‰∫åËøõÂà∂Êï∞ÊçÆÊòØÂê¶‰∏∫ JDK Â∫èÂàóÂåñÁîüÊàê„ÄÇÂèØÁî®Â¶Ç‰∏ãÊ®°ÂºèÂÆûÁé∞ÂçèËÆÆÂÖºÂÆπÔºåÊîØÊåÅÂºÇÊ≠•ÊªöÂä®ÂçáÁ∫ßÔºö  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"0.12","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ÁâàÊú¨ÂçáÁ∫ß‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#apache-fory-ÁâàÊú¨ÂçáÁ∫ß","content":" ÁõÆÂâç‰ªÖ‰øùËØÅÂ∞èÁâàÊú¨Èó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ‰æãÂ¶ÇÔºåfory v0.11.1 ÂçáÁ∫ßÂà∞ v0.11.2 ÂèØÁõ¥Êé•ÂÖºÂÆπÔºåÂçáÁ∫ßÂà∞ v0.12.0 Âàô‰∏ç‰øùËØÅÂÖºÂÆπ„ÄÇÂ§ßÂ§öÊï∞Âú∫ÊôØÊó†ÈúÄÈ¢ëÁπÅÂçáÁ∫ß‰∏ªÁâàÊú¨ÔºåÂΩìÂâçÁâàÊú¨Â∑≤Ë∂≥Â§üÈ´òÊïàÁ¥ßÂáëÔºåËÄÅÁâàÊú¨‰πü‰ºöÊåÅÁª≠Áª¥Êä§ bugfix„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÊïÖÈöúÊéíÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÊïÖÈöúÊéíÊü•","content":" ","version":"0.12","tagName":"h2"},{"title":"Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å","content":" Ëã•Êú™ËÆæÁΩÆ CompatibleMode ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLEÔºåÂá∫Áé∞Â∫èÂàóÂåñÂºÇÂ∏∏ÔºåÂèØËÉΩÊòØÂ∫èÂàóÂåñÁ´ØÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥„ÄÇ  Ê≠§Êó∂ÂèØÁî® ForyBuilder#withClassVersionCheck ÂàõÂª∫ Fory ËøõË°åÊ†°È™åÔºåËã•ÂèçÂ∫èÂàóÂåñÊäõÂá∫ org.apache.fory.exception.ClassNotCompatibleExceptionÔºåËØ¥ÊòéÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂ∫îÊîπÁî® ForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE)„ÄÇ  CompatibleMode.COMPATIBLE ‰ºöÂ∏¶Êù•‰∏ÄÂÆöÊÄßËÉΩÂíå‰ΩìÁßØÂºÄÈîÄÔºåËã•Á±ªÁªìÊûÑÂßãÁªà‰∏ÄËá¥Ôºå‰∏çÂª∫ËÆÆÈªòËÆ§ÂºÄÂêØ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"POJO Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#pojo-Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™ POJO Â∫èÂàóÂåñÂêéÂèçÂ∫èÂàóÂåñ‰∏∫‰∏çÂêåÁªìÊûÑÁöÑ POJO„ÄÇÊ≠§Êó∂ÈúÄÂ∞Ü CompatibleMode ËÆæ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLE„ÄÇ  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"0.12","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ API ‰ΩøÁî®ÈîôËØØ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ-api-‰ΩøÁî®ÈîôËØØ","content":" Áî® Fory#serialize Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserialize ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObject„ÄÇÁî® Fory#serializeJavaObject Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObject ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObjectAndClass Êàñ Fory#deserialize„ÄÇÁî® Fory#serializeJavaObjectAndClass Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObjectAndClass ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî®ÂÖ∂‰ªñ API„ÄÇ ","version":"0.12","tagName":"h3"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"0.12"},{"title":"Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide#Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã","content":" Apache Fory‚Ñ¢ ÂèØ‰ª•Ëá™Âä®Â∫èÂàóÂåñÁºñÁ®ãËØ≠Ë®ÄÁöÑÂ∏∏ËßÅÊï∞ÊçÆÁ±ªÂûãÔºöprimitive numeric types, string, binary, array, list, map Á≠â„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã","content":" Â∫èÂàóÂåñÁî®Êà∑ÂÆö‰πâÁöÑÁ±ªÂûãÈúÄË¶Å‰ΩøÁî®Ê≥®ÂÜå API Ê≥®ÂÜåËá™ÂÆö‰πâÁ±ªÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåËØ≠Ë®Ä‰∏≠Âª∫Á´ãÁ±ªÂûã‰πãÈó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®","content":" ÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÂèØ‰ª•Ë¢´Ëá™Âä®Â∫èÂàóÂåñÔºå‰∏ç‰ºö‰∫ßÁîüÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØ„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), bar: Type.object(&quot;example.foo&quot;), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data = { foo: &quot;hello fory&quot;, }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   Rust  Áî±‰∫é Rust ÊâÄÊúâÊùÉÈôêÂà∂ÔºåÊöÇ‰∏çÊîØÊåÅÂºïÁî®Á±ªÂûãÁöÑÂ∫èÂàóÂåñ  ","version":"0.12","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializers.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"0.12","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ‰ΩøÁî®","type":0,"sectionRef":"#","url":"/zh-CN/docs/docs/start/usage","content":"","keywords":"","version":"0.12"},{"title":"Java Â∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#java-Â∫èÂàóÂåñ","content":" import java.util.List; import java.util.Arrays; import io.fory.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fory instances should be reused between // multiple serializations of different objects. Fory fory = Fory.builder().withLanguage(Language.JAVA) // Allow to deserialize objects unknown types, // more flexible but less secure. // .requireClassRegistration(false) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If secure mode enabled, all custom types must be registered. fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.12","tagName":"h2"},{"title":"ScalaÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#scalaÂ∫èÂàóÂåñ","content":" import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Register optimized fory serializers for scala ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } } ## KotlinÂ∫èÂàóÂåñ ```kotlin import org.apache.fory.Fory import org.apache.fory.ThreadSafeFory import org.apache.fory.serializer.kotlin.KotlinSerializers data class Person(val name: String, val id: Long, val github: String) data class Point(val x : Int, val y : Int, val z : Int) fun main(args: Array&lt;String&gt;) { // Ê≥®ÊÑè: ‰∏ãÈù¢ÁöÑForyÂàùÂßãÂåñ‰ª£Á†ÅÂ∫îËØ•Âè™ÊâßË°å‰∏ÄÊ¨°ÔºåËÄå‰∏çÊòØÂú®ÊØèÊ¨°Â∫èÂàóÂåñÂâçÈÉΩËøêË°å val fory: ThreadSafeFory = Fory.builder().requireClassRegistration(true).buildThreadSafeFory() KotlinSerializers.registerSerializers(fory) fory.register(Person::class.java) fory.register(Point::class.java) val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) }   ","version":"0.12","tagName":"h2"},{"title":"Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#Ë∑®ËØ≠Ë®ÄÂ∫èÂàóÂåñ","content":" ","version":"0.12","tagName":"h2"},{"title":"Java‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#java","content":" import com.google.common.collect.ImmutableMap; import io.fory.*; import java.util.Map; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ImmutableMap.of(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;io.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); ; } }   ","version":"0.12","tagName":"h3"},{"title":"Python‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#python","content":" from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_class(SomeClass, &quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   ","version":"0.12","tagName":"h3"},{"title":"Golangs‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#golangs","content":" package main import ( &quot;fmt&quot; forygo &quot;github.com/apache/fory/go/fory&quot; ) func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   ","version":"0.12","tagName":"h3"},{"title":"JavaScript‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#javascript","content":" import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   ","version":"0.12","tagName":"h3"},{"title":"Rust‚Äã","type":1,"pageTitle":"Apache Fory‚Ñ¢ ‰ΩøÁî®","url":"/zh-CN/docs/docs/start/usage#rust","content":" use fory::{from_buffer, to_buffer, Fory}; #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Animal { name: String, category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.bar&quot;)] struct Person { name: String, age: u32, pets: Vec&lt;Animal&gt;, } fn main() { let penson = Person { name: &quot;hello&quot;.to_string(), age: 12, pets: vec![ Animal { name: &quot;world1&quot;.to_string(), category: &quot;cat&quot;.to_string(), }, Animal { name: &quot;world2&quot;.to_string(), category: &quot;dog&quot;.to_string(), }, ], }; let bin = to_buffer(&amp;penson); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(obj, penson); }  ","version":"0.12","tagName":"h3"},{"title":"GraalVM Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/graalvm_guide","content":"","keywords":"","version":"0.12"},{"title":"GraalVM Native Image‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#graalvm-native-image","content":" GraalVM ÁöÑ native image ËÉΩÂ∞Ü Java ‰ª£Á†ÅÊèêÂâçÁºñËØë‰∏∫Êú¨Âú∞‰ª£Á†ÅÔºå‰ªéËÄåÊûÑÂª∫Êõ¥Âø´„ÄÅÊõ¥Â∞è„ÄÅÊõ¥Á≤æÁÆÄÁöÑÂ∫îÁî®„ÄÇ Native image ‰∏çÂåÖÂê´ JIT ÁºñËØëÂô®ÔºåÊó†Ê≥ïÂú®ËøêË°åÊó∂Â∞ÜÂ≠óËäÇÁ†ÅÁºñËØë‰∏∫Êú∫Âô®Á†ÅÔºå‰πü‰∏çÊîØÊåÅÂèçÂ∞ÑÔºåÈô§ÈùûÈÖçÁΩÆÂèçÂ∞ÑÂÖÉÊï∞ÊçÆÊñá‰ª∂„ÄÇ  Apache Fory‚Ñ¢ Âú®GraalVM native image ‰∏ãËøêË°åËâØÂ•Ω„ÄÇFory ‰ºöÂú® graalvm ÊûÑÂª∫Èò∂ÊÆµ‰∏∫ Fory JIT framework Âíå MethodHandle/LambdaMetafactory ÁîüÊàêÊâÄÊúâÂ∫èÂàóÂåñÂô®‰ª£Á†ÅÔºåËøêË°åÊó∂Áõ¥Êé•‰ΩøÁî®Ëøô‰∫õÁîüÊàêÁöÑ‰ª£Á†ÅËøõË°åÂ∫èÂàóÂåñÔºåÊó†ÈúÄÈ¢ùÂ§ñÂºÄÈîÄÔºåÊÄßËÉΩ‰ºòÂºÇ„ÄÇ  Âú® graalvm native image ‰∏ã‰ΩøÁî® Fory Êó∂ÔºåÂøÖÈ°ªÂ∞Ü Fory ÂàõÂª∫‰∏∫Á±ªÁöÑÈùôÊÄÅÂ≠óÊÆµÔºåÂπ∂Âú®Á±ªÂàùÂßãÂåñÊó∂Ê≥®ÂÜåÊâÄÊúâÁ±ªÂûã„ÄÇÁÑ∂ÂêéÂú® resources/META-INF/native-image/$xxx/native-image.properties ‰∏ãÈÖçÁΩÆ native-image.propertiesÔºåÂëäÁü• graalvm Âú® native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñËØ•Á±ª„ÄÇ‰æãÂ¶ÇÔºåÈÖçÁΩÆ org.apache.fory.graalvm.Example Á±ªÂú®ÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ‰ΩøÁî® fory ÁöÑÂè¶‰∏Ä‰∏™Â•ΩÂ§ÑÊòØÊó†ÈúÄÈÖçÁΩÆÁπÅÁêêÁöÑ reflection json Âíå serialization json„ÄÇÂè™ÈúÄÂØπÊØè‰∏™ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÂûãË∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) Âç≥ÂèØ„ÄÇ  Ê≥®ÊÑèÔºöFory ÁöÑ asyncCompilationEnabled ÈÄâÈ°πÂú® graalvm native image ‰∏ã‰ºöËá™Âä®Á¶ÅÁî®ÔºåÂõ†‰∏∫ native image ËøêË°åÊó∂‰∏çÊîØÊåÅ JIT„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#ÈùûÁ∫øÁ®ãÂÆâÂÖ®-fory","content":" Á§∫‰æãÔºö  import org.apache.fory.Fory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fory fory; static { fory = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ fory.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fory.serialize(record); Object o = fory.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.Example ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.Example   ","version":"0.12","tagName":"h2"},{"title":"Á∫øÁ®ãÂÆâÂÖ® Fory‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#Á∫øÁ®ãÂÆâÂÖ®-fory","content":" import org.apache.fory.Fory; import org.apache.fory.ThreadLocalFory; import org.apache.fory.ThreadSafeFory; import org.apache.fory.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFory fory; static { fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().build(); // Ê≥®ÂÜåÂπ∂ÁîüÊàêÂ∫èÂàóÂåñÂô®‰ª£Á†Å„ÄÇ f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fory.deserialize(fory.serialize(&quot;abc&quot;))); System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3)))); System.out.println(fory.deserialize(fory.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fory.serialize(foo); Object o = fory.deserialize(bytes); System.out.println(o); } }   ÁÑ∂ÂêéÂú® native-image.properties ÈÖçÁΩÆ‰∏≠Ê∑ªÂä† org.apache.fory.graalvm.ThreadSafeExample ÁöÑÊûÑÂª∫Êó∂ÂàùÂßãÂåñÔºö  Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample   ","version":"0.12","tagName":"h2"},{"title":"Ê°ÜÊû∂ÈõÜÊàê‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#Ê°ÜÊû∂ÈõÜÊàê","content":" ÂØπ‰∫éÊ°ÜÊû∂ÂºÄÂèëËÄÖÔºåÂ¶ÇÊûúÂ∏åÊúõÈõÜÊàê fory ‰Ωú‰∏∫Â∫èÂàóÂåñÊñπÊ°àÔºåÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºåËÆ©Áî®Êà∑ÂàóÂá∫ÊâÄÊúâÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÁ±ªÔºåÁÑ∂ÂêéÂä†ËΩΩËøô‰∫õÁ±ªÂπ∂Âú® Fory ÈõÜÊàêÁ±ª‰∏≠Ë∞ÉÁî® org.apache.fory.Fory.register(Class&lt;?&gt;, boolean) ËøõË°åÊ≥®ÂÜåÔºåÂπ∂ÈÖçÁΩÆËØ•Á±ªÂú® graalvm native image ÊûÑÂª∫Êó∂ÂàùÂßãÂåñ„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Benchmark‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#benchmark","content":" ËøôÈáåÁªôÂá∫ Fory ‰∏é Graalvm Serialization ÁöÑ‰∏§‰∏™Á±ªÁöÑÂü∫ÂáÜÊµãËØï„ÄÇ  Fory Êú™ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 46x ÈÄüÂ∫¶Ôºå43% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå56% Â§ßÂ∞è  Fory ÂºÄÂêØÂéãÁº©Êó∂Ôºö  StructÔºöFory ‰∏∫ JDK ÁöÑ 24x ÈÄüÂ∫¶Ôºå31% Â§ßÂ∞èPojoÔºöFory ‰∏∫ JDK ÁöÑ 12x ÈÄüÂ∫¶Ôºå48% Â§ßÂ∞è  Âü∫ÂáÜÊµãËØï‰ª£Á†ÅËßÅ [Benchmark.java]„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Struct Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#struct-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: false Fory size: 76.0 JDK size: 178.0 Fory serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fory is 45.70x speed of JDK Compare size: Fory is 0.43x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Struct Compress number: true Fory size: 55.0 JDK size: 178.0 Fory serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fory is 24.16x speed of JDK Compare size: Fory is 0.31x size of JDK   ","version":"0.12","tagName":"h3"},{"title":"Pojo Âü∫ÂáÜÊµãËØï‚Äã","type":1,"pageTitle":"GraalVM Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/graalvm_guide#pojo-Âü∫ÂáÜÊµãËØï","content":" Á±ªÂ≠óÊÆµ‚Äã  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   Benchmark ÁªìÊûú‚Äã  Êú™ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: false Fory size: 541.0 JDK size: 964.0 Fory serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fory is 12.19x speed of JDK Compare size: Fory is 0.56x size of JDK   ÂéãÁº©Ôºö  Benchmark repeat number: 400000 Object type: class org.apache.fory.graalvm.Foo Compress number: true Fory size: 459.0 JDK size: 964.0 Fory serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fory is 12.11x speed of JDK Compare size: Fory is 0.48x size of JDK  ","version":"0.12","tagName":"h3"},{"title":"Scala Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/scala_guide","content":"","keywords":"","version":"0.12"},{"title":"ÂÆâË£Ö‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#ÂÆâË£Ö","content":" Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 2 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_2.13&quot; % &quot;0.12.0&quot;   Â¶ÇÊûú‰Ω†‰ΩøÁî® sbt Âπ∂Â∏åÊúõÂú® Scala 3 È°πÁõÆ‰∏≠ÂºïÂÖ• Fory Scala ‰æùËµñÔºåËØ∑Ê∑ªÂä†Â¶Ç‰∏ãÂÜÖÂÆπÔºö  libraryDependencies += &quot;org.apache.fory&quot; % &quot;fory-scala_3&quot; % &quot;0.12.0&quot;   ","version":"0.12","tagName":"h2"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Âø´ÈÄüÂºÄÂßã","content":" case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory) fory.register(classOf[Person]) fory.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fory.deserialize(fory.serialize(p))) println(fory.deserialize(fory.serialize(Point(1, 2, 3)))) } }   ","version":"0.12","tagName":"h2"},{"title":"Fory ÂÆû‰æãÂàõÂª∫‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#fory-ÂÆû‰æãÂàõÂª∫","content":" Âú®‰ΩøÁî® fory ËøõË°å Scala Â∫èÂàóÂåñÊó∂ÔºåÂª∫ËÆÆËá≥Â∞ë‰ª•Â¶Ç‰∏ãÊñπÂºèÂàõÂª∫ fory ÂÆû‰æãÔºö  import org.apache.fory.Fory import org.apache.fory.serializer.scala.ScalaSerializers val fory = Fory.builder().withScalaOptimizationEnabled(true).build() // Ê≥®ÂÜåÈíàÂØπ Scala ‰ºòÂåñÁöÑ fory Â∫èÂàóÂåñÂô® ScalaSerializers.registerSerializers(fory)   Ê†πÊçÆ‰Ω†ÈúÄË¶ÅÂ∫èÂàóÂåñÁöÑÂØπË±°Á±ªÂûãÔºåÂèØËÉΩËøòÈúÄË¶ÅÊ≥®ÂÜå‰∏Ä‰∫õ Scala ÂÜÖÈÉ®Á±ªÂûãÔºö  fory.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   Â¶ÇÊûú‰Ω†Â∏åÊúõÈÅøÂÖçÊâãÂä®Ê≥®ÂÜåËøô‰∫õÁ±ªÂûãÔºåÂèØ‰ª•ÈÄöËøá ForyBuilder#requireClassRegistration(false) ÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂäüËÉΩ„ÄÇ Ê≥®ÊÑèÔºöÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÂêéÔºåÂèØ‰ª•ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÁöÑÂØπË±°ÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ¶ÇÊûúÂèçÂ∫èÂàóÂåñÁöÑÁ±ªÂåÖÂê´ÊÅ∂ÊÑè‰ª£Á†ÅÔºåÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ  Scala ‰∏≠Âæ™ÁéØÂºïÁî®ËæÉ‰∏∫Â∏∏ËßÅÔºåÂª∫ËÆÆÈÄöËøá ForyBuilder#withRefTracking(true) ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºàReference trackingÔºâ„ÄÇÂ¶ÇÊûúÊú™ÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂú®Êüê‰∫õ Scala ÁâàÊú¨‰∏ãÂ∫èÂàóÂåñ Scala Enumeration Êó∂ÔºåÂèØËÉΩ‰ºöÂá∫Áé∞ StackOverflowError„ÄÇ  Ê≥®ÊÑèÔºöfory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÊìç‰ΩúÈó¥Â§çÁî®Ôºåfory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ß„ÄÇ  Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂú®Â§öÁ∫øÁ®ãÁéØÂ¢É‰∏ãÂÖ±‰∫´ fory ÂÆû‰æãÔºåÂ∫îÈÄöËøá ForyBuilder#buildThreadSafeFory() ÂàõÂª∫ ThreadSafeFory ÂÆû‰æã„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ case class‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-case-class","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fory.deserialize(fory.serialize(p))) println(fory.deserializeJavaObject(fory.serializeJavaObject(p)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ pojo‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fory.deserialize(fory.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ object Âçï‰æãÂØπË±°‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-object-Âçï‰æãÂØπË±°","content":" object singleton { } val o1 = fory.deserialize(fory.serialize(singleton)) val o2 = fory.deserialize(fory.serialize(singleton)) println(o1 == o2)   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñÈõÜÂêàÔºàCollectionÔºâ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñÈõÜÂêàcollection","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fory.deserialize(fory.serialize(seq))) println(fory.deserialize(fory.serialize(list))) println(fory.deserialize(fory.serialize(map)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Tuple‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-tuple","content":" val tuple = Tuple2(100, 10000L) println(fory.deserialize(fory.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fory.deserialize(fory.serialize(tuple)))   ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñ Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-enum","content":" ","version":"0.12","tagName":"h2"},{"title":"Scala3 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#scala3-enum","content":" enum Color { case Red, Green, Blue } println(fory.deserialize(fory.serialize(Color.Green)))   ","version":"0.12","tagName":"h3"},{"title":"Scala2 Enum‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#scala2-enum","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fory.deserialize(fory.serialize(ColorEnum.Green)))   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñ Option‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#Â∫èÂàóÂåñ-option","content":" val opt: Option[Long] = Some(100) println(fory.deserialize(fory.serialize(opt))) val opt1: Option[Long] = None println(fory.deserialize(fory.serialize(opt1)))   ","version":"0.12","tagName":"h2"},{"title":"ÊÄßËÉΩ‚Äã","type":1,"pageTitle":"Scala Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/scala_guide#ÊÄßËÉΩ","content":" pojo/bean/case/object Scala ÂØπ Apache Fory JIT ÁöÑÊîØÊåÅÂæàÂ•ΩÔºåÊÄßËÉΩ‰∏é Apache Fory Java ‰∏ÄÊ†∑‰ºòÂºÇ„ÄÇ  Scala ÈõÜÂêàÂíåÊ≥õÂûã‰∏çÈÅµÂæ™ Java ÈõÜÂêàÊ°ÜÊû∂ÔºåÂπ∂‰∏îÊú™‰∏éÂΩìÂâçÂèëË°åÁâà‰∏≠ÁöÑ Apache Fory JIT ÂÆåÂÖ®ÈõÜÊàê„ÄÇÊÄßËÉΩ‰∏ç‰ºöÂÉè Java ÁöÑ Fory collections Â∫èÂàóÂåñÈÇ£‰πàÂ•Ω„ÄÇ  scala ÈõÜÂêàÁöÑÊâßË°åÂ∞ÜË∞ÉÁî® Java Â∫èÂàóÂåñ API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable Âíå Fory ObjectStream ÂÆûÁé∞„ÄÇËôΩÁÑ∂ org.apache.fory.serializer.ObjectStreamSerializer ÊØî JDK ObjectOutputStream/ObjectInputStream Âø´ÂæàÂ§öÔºå‰ΩÜÂÆÉ‰ªçÁÑ∂‰∏çÁü•ÈÅìÂ¶Ç‰Ωï‰ΩøÁî® Scala ÈõÜÂêàÊ≥õÂûã„ÄÇ  Êú™Êù•Êàë‰ª¨ËÆ°Âàí‰∏∫ Scala Á±ªÂûãÊèê‰æõÊõ¥Â§ö‰ºòÂåñÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊõ¥Â§ö‰ø°ÊÅØËØ∑ÂèÇÁúã #682ÔºÅ  Scala ÈõÜÂêàÂ∫èÂàóÂåñÂ∑≤Âú® #1073 ÂÆåÊàê ÔºåÂ¶ÇÊûúÊÇ®ÊÉ≥Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåËØ∑‰ΩøÁî® Apache Fory snapshot ÁâàÊú¨„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Ë°åÂ≠òÊ†ºÂºè","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/row_format_guide","content":"","keywords":"","version":"0.12"},{"title":"Java‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // ÂèØË¢´ python Èõ∂Êã∑Ë¥ùËØªÂèñ BinaryRow binaryRow = encoder.toRow(foo); // ‰πüÂèØ‰ª•ÊòØ python ÁîüÊàêÁöÑÊï∞ÊçÆ Foo newFoo = encoder.fromRow(binaryRow); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // Èõ∂Êã∑Ë¥ùËØªÂèñ List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` ÁöÑÁ¨¨ 11 ‰∏™ÂÖÉÁ¥† BinaryRow barStruct = binaryArray4.getStruct(10); // Èõ∂Êã∑Ë¥ùËØªÂèñ `readList&lt;Bar&gt; f4` Á¨¨ 11 ‰∏™ÂÖÉÁ¥†ÁöÑ f2 ÁöÑÁ¨¨ 6 ‰∏™ÂÖÉÁ¥† barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // Âè™ÂèçÂ∫èÂàóÂåñÈÉ®ÂàÜÊï∞ÊçÆ Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"0.12","tagName":"h2"},{"title":"Python‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfory.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfory.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"0.12","tagName":"h2"},{"title":"Apache Arrow ÊîØÊåÅ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#apache-arrow-ÊîØÊåÅ","content":" Fory Format ‰πüÊîØÊåÅ‰∏é Arrow Table/RecordBatch ÁöÑËá™Âä®ËΩ¨Êç¢„ÄÇ  Java Á§∫‰æãÔºö  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   ","version":"0.12","tagName":"h3"},{"title":"ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#ÊîØÊåÅÊé•Âè£‰∏éÁªßÊâøÁ±ªÂûã","content":" Fury Áé∞Â∑≤ÊîØÊåÅ Java interface Á±ªÂûãÂíåÂ≠êÁ±ªÔºàextendsÔºâÁ±ªÂûãÁöÑË°åÊ†ºÂºèÊò†Â∞ÑÔºåÂ∏¶Êù•Êõ¥Âä®ÊÄÅÂíåÁÅµÊ¥ªÁöÑÊï∞ÊçÆ schema„ÄÇ  Áõ∏ÂÖ≥Â¢ûÂº∫ËßÅ #2243„ÄÅ#2250„ÄÅ#2256„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Á§∫‰æãÔºöÊé•Âè£Á±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#Á§∫‰æãÊé•Âè£Á±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public interface Animal { String speak(); } public class Dog implements Animal { public String name; @Override public String speak() { return &quot;Woof&quot;; } } // ‰ΩøÁî® RowEncoder ‰ª•Êé•Âè£Á±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Animal&gt; encoder = Encoders.bean(Animal.class); Dog dog = new Dog(); dog.name = &quot;Bingo&quot;; BinaryRow row = encoder.toRow(dog); Animal decoded = encoder.fromRow(row); System.out.println(decoded.speak()); // Woof   ","version":"0.12","tagName":"h3"},{"title":"Á§∫‰æãÔºöÁªßÊâøÁ±ªÂûãÁöÑ RowEncoder Êò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë°åÂ≠òÊ†ºÂºè","url":"/zh-CN/docs/guide/row_format_guide#Á§∫‰æãÁªßÊâøÁ±ªÂûãÁöÑ-rowencoder-Êò†Â∞Ñ","content":" public class Parent { public String parentField; } public class Child extends Parent { public String childField; } // ‰ΩøÁî® RowEncoder ‰ª•Áà∂Á±ªÁ±ªÂûãÁºñÁ†ÅÂíåËß£Á†Å RowEncoder&lt;Parent&gt; encoder = Encoders.bean(Parent.class); Child child = new Child(); child.parentField = &quot;Hello&quot;; child.childField = &quot;World&quot;; BinaryRow row = encoder.toRow(child); Parent decoded = encoder.fromRow(row);   Python Á§∫‰æãÔºö  import pyfory encoder = pyfory.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++ Á§∫‰æãÔºö  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"0.12","tagName":"h3"},{"title":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"0.12"},{"title":"Á±ªÂûãÊò†Â∞Ñ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/guide/xlang_type_mapping#Á±ªÂûãÊò†Â∞Ñ","content":" Fory Type\tFory Type ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfory.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfory.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfory.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfory.VarInt32\tType.varint32()\tfory::varint32_t\tfory.varint32\tfory::varint32 int64\t6\tlong/Long\tint/pyfory.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfory.VarInt64\tType.varint64()\tfory::varint64_t\tfory.varint64\tfory::varint64 sli_int64\t8\tlong/Long\tint/pyfory.SliInt64\tType.sliint64()\tfory::sliint64_t\tfory.sliint64\tfory::sliint64 float16\t9\tfloat/Float\tfloat/pyfory.Float16\tType.float16()\tfory::float16_t\tfory.float16\tfory::f16 float32\t10\tfloat/Float\tfloat/pyfory.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfory.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum named_enum\t14\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum struct\t15\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct compatible_struct\t16\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_struct\t17\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_compatible_struct\t18\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct ext\t19\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct named_ext\t20\tpojo/record\tdata class / type with type hints\tobject\tstruct/class\tstruct\tstruct list\t21\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t22\tSet\tset\t/\tset\tfory.Set\tSet map\t23\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t24\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t25\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime local_date\t26\tDate\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t27\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t28\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t29\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t30\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t31\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t32\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t33\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t34\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t35\tfloat[]\tndarray(float16)\t/\tfory::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fory::f16&gt; float32_array\t36\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t37\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; arrow record batch\t38\t/\t/\t/\t/\t/\t/ arrow table\t39\t/\t/\t/\t/\t/\t/  ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûã‰ø°ÊÅØÔºàÂΩìÂâçÊú™ÂÆûÁé∞Ôºâ‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/guide/xlang_type_mapping#Á±ªÂûã‰ø°ÊÅØÂΩìÂâçÊú™ÂÆûÁé∞","content":" Áî±‰∫éÂêÑËØ≠Ë®ÄÁöÑÁ±ªÂûãÁ≥ªÁªüÂ≠òÂú®Â∑ÆÂºÇÔºåÊüê‰∫õÁ±ªÂûãÊó†Ê≥ïÂÅöÂà∞‰∏Ä‰∏ÄÊò†Â∞Ñ„ÄÇ  Â¶ÇÊûúÁî®Êà∑ÂèëÁé∞Êüê‰∏ÄËØ≠Ë®ÄÁöÑÁ±ªÂûãÂú® Fory Á±ªÂûãÁ≥ªÁªü‰∏≠ÂØπÂ∫îÂ§ö‰∏™Á±ªÂûãÔºå‰æãÂ¶Ç Java ‰∏≠ÁöÑ long ÂØπÂ∫î int64/varint64/sliint64ÔºåËøôÊÑèÂë≥ÁùÄËØ•ËØ≠Ë®ÄÁº∫Â∞ëÊüê‰∫õÁ±ªÂûãÔºåÁî®Êà∑Âú®‰ΩøÁî® Fory Êó∂ÈúÄË¶ÅÈ¢ùÂ§ñÊèê‰æõÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûãÊ≥®Ëß£‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/guide/xlang_type_mapping#Á±ªÂûãÊ≥®Ëß£","content":" Â¶ÇÊûúÁ±ªÂûãÊòØÂè¶‰∏Ä‰∏™Á±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂèØ‰ª•‰∏∫Á±ªÂûãÁöÑÂ≠óÊÆµÊàñÊï¥‰∏™Á±ªÂûãÊèê‰æõÂÖÉ‰ø°ÊÅØÊèêÁ§∫„ÄÇ Ëøô‰∫õ‰ø°ÊÅØÂú®ÂÖ∂‰ªñËØ≠Ë®Ä‰∏≠‰πüÂèØ‰ª•Êèê‰æõÔºö  JavaÔºö‰ΩøÁî® annotation„ÄÇC++Ôºö‰ΩøÁî®ÂÆèÂíåÊ®°Êùø„ÄÇGolangÔºö‰ΩøÁî® struct tag„ÄÇPythonÔºö‰ΩøÁî® typehint„ÄÇRustÔºö‰ΩøÁî®ÂÆè„ÄÇ  Á§∫‰æãÔºö  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"0.12","tagName":"h2"},{"title":"Á±ªÂûãÂåÖË£ÖÂô®‚Äã","type":1,"pageTitle":"Ë∑®ËØ≠Ë®ÄÁ±ªÂûãÊò†Â∞Ñ","url":"/zh-CN/docs/guide/xlang_type_mapping#Á±ªÂûãÂåÖË£ÖÂô®","content":" Â¶ÇÊûúÁ±ªÂûã‰∏çÊòØÁ±ªÁöÑÂ≠óÊÆµÔºåÁî®Êà∑ÂøÖÈ°ªÁî® Fory Á±ªÂûãÂåÖË£ÖËØ•Á±ªÂûã‰ª•‰º†ÈÄíÈ¢ùÂ§ñÁöÑÁ±ªÂûã‰ø°ÊÅØ„ÄÇ  ‰æãÂ¶ÇÔºåÂÅáËÆæ Fory Java Êèê‰æõ‰∫Ü VarInt64 Á±ªÂûãÔºåÂΩìÁî®Êà∑Ë∞ÉÁî® fory.serialize(long_value) Êó∂ÔºåÈúÄË¶ÅËøôÊ†∑Ë∞ÉÁî®Ôºöfory.serialize(new VarInt64(long_value))„ÄÇ ","version":"0.12","tagName":"h2"},{"title":"Row Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fory_row_format_spec","content":"","keywords":"","version":"0.12"},{"title":"Row Format‚Äã","type":1,"pageTitle":"Row Format","url":"/zh-CN/docs/specification/fory_row_format_spec#row-format","content":" Coming soon ","version":"0.12","tagName":"h2"},{"title":"Java Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fory_java_serialization_spec","content":"","keywords":"","version":"0.12"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#spec-overview","content":" Fory Java Serialization is an automatic object serialization framework that supports reference and polymorphism. Fory will convert an object from/to fory java serialization binary format. Fory has two core concepts for java serialization:  Fory Java Binary formatFramework to convert object to/from Fory Java Binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fory flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  Here is the overall format:  | fory header | object ref meta | object class meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.12","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | optional 4 bytes | +---------------+-------+-------+--------+-------+------------------------------------+ | reserved bits | oob | xlang | endian | null | unsigned int for meta start offset |   null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.12","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a class), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  ","version":"0.12","tagName":"h2"},{"title":"Class Meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#class-meta","content":" Fory supports to register class by an optional id, the registration can be used for security check and class identification. If a class is registered, it will have a user-provided or an auto-growing unsigned int i.e. class_id.  Depending on whether meta share mode and registration is enabled for current class, Fory will write class meta differently.  ","version":"0.12","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#schema-consistent","content":" If schema consistent mode is enabled globally or enabled for current class, class meta will be written as follows:  If class is registered, it will be written as a fory unsigned varint: class_id &lt;&lt; 1.If class is not registered: If class is not an array, fory will write one byte 0bxxxxxxx1 first, then write class name. The first little bit is 1, which is different from first bit 0 of encoded class id. Fory can use this information to determine whether to read class by class id for deserialization. If class is not registered and class is an array, fory will write one byte dimensions &lt;&lt; 1 | 1 first, then write component class subsequently. This can reduce array class name cost if component class is or will be serialized.Class will be written as two enumerated fory unsigned by default: package name and class name. If meta share mode is enabled, class will be written as an unsigned varint which points to index in MetaContext.  ","version":"0.12","tagName":"h3"},{"title":"Schema evolution‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#schema-evolution","content":" If schema evolution mode is enabled globally or enabled for current class, class meta will be written as follows:  If meta share mode is not enabled, class meta will be written as schema consistent mode. Additionally, field meta such as field type and name will be written with the field value using a key-value like layout.If meta share mode is enabled, class meta will be written as a meta-share encoded binary if class hasn't been written before, otherwise an unsigned varint id which references to previous written class meta will be written.  ","version":"0.12","tagName":"h3"},{"title":"Meta share‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#meta-share","content":" This mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure doesn't lost shared meta. Meta streamline will be supported in the future for enclosed meta sharing which doesn't cross multiple serializations of different objects.  For Schema consistent mode, class will be encoded as an enumerated string by full class name. Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes global meta header | 1~2 bytes | variable bytes | variable bytes | variable bytes | +-------------------------------+-------------|--------------------+-------------------+----------------+ | 50 bits hash + 14 bits header | type header | current class meta | parent class meta | ... |   Class meta are encoded from parent class to leaf class, only class with serializable fields will be encoded.  ","version":"0.12","tagName":"h2"},{"title":"Global meta header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#global-meta-header","content":" Meta header is a 64 bits number value encoded in little endian order.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  ","version":"0.12","tagName":"h3"},{"title":"Type header‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#type-header","content":" Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current class doesn't has parent class, or parent class doesn't have fields to serialize, or we're in a context which serialize fields of current class only(ObjectStreamSerializer#SlotInfo is an example), num classes will be 1.Other 4 bits are preserved to future extensions.If num classes are greater than or equal to 0b1111, write num_classes - 0b1111 as varuint next.  ","version":"0.12","tagName":"h3"},{"title":"Single layer class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#single-layer-class-meta","content":" | unsigned varint | meta string | meta string | field info: variable bytes | variable bytes | ... | +----------------------------+-----------------------+---------------------+-------------------------------+-----------------+-----+ | num fields + register flag | header + package name | header + class name | header + type id + field name | next field info | ... |   num fields: encode num fields &lt;&lt; 1 | register flag(1 when class registered) as unsigned varint. If class is registered, then an unsigned varint class id will be written next, package and class name will be omitted.If current class is schema consistent, then num field will be 0 to flag it.If current class isn't schema consistent, then num field will be the number of compatible fields. For example, users can use tag id to mark some field as compatible field in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields. Package name encoding(omitted when class is registered): encoding algorithm: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIALHeader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Class name encoding(omitted when class is registered): encoding algorithm: UTF8/LOWER_UPPER_DIGIT_SPECIAL/FIRST_TO_LOWER_SPECIAL/ALL_TO_LOWER_SPECIALheader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Field info: header(8 bits): 3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag. Users can use annotation to provide those info. 2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be 11. size of field name: The 3 bits size: 0~7 will be used to indicate length 1~7, the value 6 the size read more bytes, the encoding will encode size - 7 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.polymorphism: when set to 1, the actual type of field will be the declared field type even the type if not final. type id: For registered type-consistent classes, it will be the registered class id.Otherwise it will be encoded as OBJECT_ID if it isn't final and FINAL_OBJECT_ID if it's final. The meta for such types is written separately instead of inlining here is to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too. Field name: If type id is set, type id will be used instead. Otherwise meta string encoding length and data will be written instead.  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory field comparator. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"0.12","tagName":"h3"},{"title":"Other layers class meta‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#other-layers-class-meta","content":" Same encoding algorithm as the previous layer except:  header + package name: Header: If package name has been written before: varint index + sharing flag(set) will be writtenIf package name hasn't been written before: If meta string encoding is LOWER_SPECIAL and the length of encoded string &lt;= 64, then header will be6 bits size + encoding flag(set) + sharing flag(unset).Otherwise, header will be 3 bits unset + 3 bits encoding flags + encoding flag(unset) + sharing flag(unset)  ","version":"0.12","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as class name and field names.  ","version":"0.12","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._$|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z[c1,c2] except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z[c1,c2]\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z[c1,c2]\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  For package name encoding, c1,c2 should be ._; For field/type name encoding, c1,c2 should be _$;Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.12","tagName":"h3"},{"title":"Shared meta string‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#shared-meta-string","content":" The shared meta string format consists of header and encoded string binary. Header of encoded string binary will be inlined in shared meta header.  Header is written using little endian order, Fory can read this flag first to determine how to deserialize the data.  Write by data‚Äã  If string hasn't been written before, the data will be written as follows:  | unsigned varint: string binary size + 1 bit: not written before | 56 bits: unique hash | 3 bits encoding flags + string binary |   If string binary size is less than 16 bytes, the hash will be omitted to save spaces. Unique hash can be omitted too if caller pass a flag to disable it. In such cases, the format will be:  | unsigned varint: string binary size + 1 bit: not written before | 3 bits encoding flags + string binary |   Write by ref‚Äã  If string has been written before, the data will be written as follows:  | unsigned varint: written string id + 1 bit: written before |   ","version":"0.12","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#value-format","content":" ","version":"0.12","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#basic-types","content":" Bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  Byte‚Äã  size: 1 byteformat: write as pure byte.  Short‚Äã  size: 2 bytebyte order: little endian order  Char‚Äã  size: 2 bytebyte order: little endian order  Unsigned int‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  Signed int‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encoding it as an unsigned int.  Unsigned long‚Äã  size: 1~9 byteFory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  Signed long‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  Float‚Äã  size: 4 byteformat: convert float to 4 bytes int by Float.floatToRawIntBits, then write as binary by little endian order.  Double‚Äã  size: 8 byteformat: convert double to 8 bytes int by Double.doubleToRawLongBits, then write as binary by little endian order.  ","version":"0.12","tagName":"h3"},{"title":"String‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#string","content":" Format:  | header: size &lt;&lt; 2 | 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned var long. The little 2 bits is used for encoding: 0 for latin, 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. But currently fory doesn't enable utf-8 encoding by default for java. Cross-language string serialization of fory uses utf-8 by default.  ","version":"0.12","tagName":"h3"},{"title":"Collection‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#collection","content":" All collection serializers must extend AbstractCollectionSerializer.  Format:  length(unsigned varint) | collection header | elements header | elements data   Collection header‚Äã  For ArrayList/LinkedArrayList/HashSet/LinkedHashSet, this will be empty.For TreeSet, this will be ComparatorFor subclass of ArrayList, this may be extra object field info.  Elements header‚Äã  In most cases, all collection elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the collection has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the collection element types are not declared type, use the 3rd bit 0b100 of the header to flag it.If the collection element types are different, use the 4th bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom class field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element class info.  CollectionSerializer#write/read can be taken as an example.  ","version":"0.12","tagName":"h3"},{"title":"Array‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#array","content":" Primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types.  Object array‚Äã  Object array is serialized using the collection format. Object component type will be taken as collection element generic type.  ","version":"0.12","tagName":"h3"},{"title":"Map‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#map","content":" All Map serializers must extend AbstractMapSerializer.  Format:  | length(unsigned varint) | map header | key value pairs data |   Map header‚Äã  For HashMap/LinkedHashMap, this will be empty.For TreeMap, this will be ComparatorFor other Map, this may be extra object field info.  Map Key-Value data‚Äã  Map iteration is too expensive, Fory won't compute the header like for collection before since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize map chunk by chunk, every chunk has 127 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  ","version":"0.12","tagName":"h3"},{"title":"Enum‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.12","tagName":"h3"},{"title":"Object‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#object","content":" Object means object of pojo/struct/bean/record type. Object will be serialized by writing its fields data in fory order.  Depending on schema compatibility, objects will have different formats.  Field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.boxed primitive fields: same order as primitive fieldsfinal fields: same type together, then sorted by field name lexicographically.collection fields: same order as final fieldsmap fields: same order as final fieldsother fields: same order as final fields  Schema consistent‚Äã  Object fields will be serialized one by one using following format:  Primitive field value: | var bytes | +----------------+ | value data | +----------------+ Boxed field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | class meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | class meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For this object type itself, schema consistent mode will write class by id/name, but schema evolution mode will write class field names, types and other meta too, see Class meta.Class meta of final custom type needs to be written too, because peers may not have this class defined.  ","version":"0.12","tagName":"h3"},{"title":"Class‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#class","content":" Class will be serialized using class meta format.  ","version":"0.12","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Java Serialization Format","url":"/zh-CN/docs/specification/fory_java_serialization_spec#implementation-guidelines","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches. ","version":"0.12","tagName":"h2"},{"title":"Xlang Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec","content":"","keywords":"","version":"0.12"},{"title":"Cross-language Serialization Specification‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#cross-language-serialization-specification","content":" Format Version History: Version 0.1 - serialization spec formalized  Fory xlang serialization is an automatic object serialization framework that supports reference and polymorphism. Fory will convert an object from/to fory xlang serialization binary format. Fory has two core concepts for xlang serialization:  Fory xlang binary formatFramework implemented in different languages to convert object to/from Fory xlang binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fory flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  ","version":"0.12","tagName":"h2"},{"title":"Type Systems‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type-systems","content":" ","version":"0.12","tagName":"h2"},{"title":"Data Types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#data-types","content":" bool: a boolean value (true or false).int8: a 8-bit signed integer.int16: a 16-bit signed integer.int32: a 32-bit signed integer.var_int32: a 32-bit signed integer which use fory var_int32 encoding.int64: a 64-bit signed integer.var_int64: a 64-bit signed integer which use fory PVL encoding.sli_int64: a 64-bit signed integer which use fory SLI encoding.float16: a 16-bit floating point number.float32: a 32-bit floating point number.float64: a 64-bit floating point number including NaN and Infinity.string: a text string encoded using Latin1/UTF16/UTF-8 encoding.enum: a data type consisting of a set of named values. Rust enum with non-predefined field values are not supported as an enum.named_enum: an enum whose value will be serialized as the registered name.struct: a morphic(final) type serialized by Fory Struct serializer. i.e. it doesn't have subclasses. Suppose we're deserializing List&lt;SomeClass&gt;, we can save dynamic serializer dispatch since SomeClass is morphic(final).compatible_struct: a morphic(final) type serialized by Fory compatible Struct serializer.named_struct: a struct whose type mapping will be encoded as a name.named_compatible_struct: a compatible_struct whose type mapping will be encoded as a name.ext: a type which will be serialized by a customized serializer.named_ext: an ext type whose type mapping will be encoded as a name.list: a sequence of objects.set: an unordered set of unique elements.map: a map of key-value pairs. Mutable types such as list/map/set/array/tensor/arrow are not allowed as key of map.duration: an absolute length of time, independent of any calendar/timezone, as a count of nanoseconds.timestamp: a point in time, independent of any calendar/timezone, as a count of nanoseconds. The count is relative to an epoch at UTC midnight on January 1, 1970.local_date: a naive date without timezone. The count is days relative to an epoch at UTC midnight on Jan 1, 1970.decimal: exact decimal value represented as an integer value in two's complement.binary: an variable-length array of bytes.array: only allow 1d numeric components. Other arrays will be taken as List. The implementation should support the interoperability between array and list. bool_array: one dimensional int16 array.int8_array: one dimensional int8 array.int16_array: one dimensional int16 array.int32_array: one dimensional int32 array.int64_array: one dimensional int64 array.float16_array: one dimensional half_float_16 array.float32_array: one dimensional float32 array.float64_array: one dimensional float64 array. tensor: multidimensional array which every sub-array have same size and type.arrow record batch: an arrow record batch object.arrow table: an arrow table object.  Note:  Unsigned int/long are not added here, since not every language support those types.  ","version":"0.12","tagName":"h3"},{"title":"Polymorphisms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#polymorphisms","content":" For polymorphism, if one non-final class is registered, and only one subclass is registered, then we can take all elements in List/Map have same type, thus reduce runtime check cost.  Collection/Array polymorphism are not fully supported, since some languages such as golang have only one collection type. If users want to get exactly the type he passed, he must pass that type when deserializing or annotate that type to the field of struct.  ","version":"0.12","tagName":"h3"},{"title":"Type disambiguation‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type-disambiguation","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages. When deserializing, Fory use the target data structure type and the data type in the data jointly to determine how to deserialize and populate the target data structure. For example:  class Foo { int[] intArray; Object[] objects; List&lt;Object&gt; objectList; } class Foo2 { int[] intArray; List&lt;Object&gt; objects; List&lt;Object&gt; objectList; }   intArray has an int32_array type. But both objects and objectList fields in the serialize data have list data type. When deserializing, the implementation will create an Object array for objects, but create a ArrayListfor objectList to populate its elements. And the serialized data of Foo can be deserialized into Foo2 too.  Users can also provide meta hints for fields of a type, or the type whole. Here is an example in java which use annotation to provide such information.  @ForyObject(fieldsNullable = false, trackingRef = false) class Foo { @ForyField(trackingRef = false) int[] intArray; @ForyField(polymorphic = true) Object object; @ForyField(tagId = 1, nullable = true) List&lt;Object&gt; objectList; }   Such information can be provided in other languages too:  cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  ","version":"0.12","tagName":"h3"},{"title":"Type ID‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type-id","content":" All internal data types are expressed using an ID in range 0~64. Users can use 0~4096 for representing their types.  ","version":"0.12","tagName":"h3"},{"title":"Type mapping‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type-mapping","content":" See Type mapping  ","version":"0.12","tagName":"h3"},{"title":"Spec overview‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#spec-overview","content":" Here is the overall format:  | fory header | object ref meta | object type meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fory will write the byte order for that object into the data instead of converting it to little endian.  ","version":"0.12","tagName":"h2"},{"title":"Fory header‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#fory-header","content":" Fory header consists starts one byte:  | 2 bytes | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | 1 byte | optional 4 bytes | +--------------+---------------+-------+-------+--------+-------+------------+------------------------------------+ | magic number | reserved bits | oob | xlang | endian | null | language | unsigned int for meta start offset |   magic number: used to identify fory serialization protocol, current version use 0x62d4.null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fory java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.language: the language when serializing objects, such as JAVA, PYTHON, GO, etc. Fory can use this flag to determine whether spend more time on serialization to make the deserialization faster for dynamic languages.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"0.12","tagName":"h2"},{"title":"Reference Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fory will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fory doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a type), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  For languages which doesn't support reference such as rust, reference tracking must be disabled for correct deserialization by fory rust implementation.  For languages whose object values are not null by default:  In rust, Fory takes Option:None as a null valueIn c++, Fory takes std::nullopt as a null valueIn golang, Fory takes null interface/pointer as a null value  If one want to deserialize in languages like Java/Python/JavaScript, he should mark the type with all fields not-null by default, or using schema-evolution mode to carry the not-null fields info in the data.  ","version":"0.12","tagName":"h2"},{"title":"Type Meta‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type-meta","content":" For every type to be serialized, it have a type id to indicate its type.  basic types: the type idenum: Type.ENUM + registered idType.NAMED_ENUM + registered namespace+typename list: Type.Listset: Type.SETmap: Type.MAPext: Type.EXT + registered idType.NAMED_EXT + registered namespace+typename struct: Type.STRUCT + struct metaType.NAMED_STRUCT + struct meta  Every type must be registered with an ID or name first. The registration can be used for security check and type identification.  Struct is a special type, depending whether schema compatibility is enabled, Fory will write struct meta differently.  ","version":"0.12","tagName":"h2"},{"title":"Struct Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#struct-schema-consistent","content":" If schema consistent mode is enabled globally when creating fory, type meta will be written as a fory unsigned varint of type_id. Schema evolution related meta will be ignored.If schema evolution mode is enabled globally when creating fory, and current class is configured to use schema consistent mode like struct vs table in flatbuffers: Type meta will be add to captured_type_defs: captured_type_defs[type def stub] = map size ahead when registering type.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.  ","version":"0.12","tagName":"h3"},{"title":"Struct Schema evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#struct-schema-evolution","content":" If schema evolution mode is enabled globally when creating fory, and enabled for current type, type meta will be written using one of the following mode. Which mode to use is configured when creating fory.  Normal mode(meta share not enabled): If type meta hasn't been written before, add type defto captured_type_defs: captured_type_defs[type def] = map size.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.After finished the serialization of the object graph, fory will start to write captured_type_defs: Firstly, set current to meta start offset of fory header Then write captured_type_defs one by one: buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs)) for type_meta in writting_type_defs: if not type_meta.is_stub(): type_meta.write_type_def(buffer) writing_type_defs = copy(schema_consistent_type_def_stubs) Meta share mode: the writing steps are same as the normal mode, but captured_type_defs will be shared across multiple serializations of different objects. For example, suppose we have a batch to serialize: captured_type_defs = {} stream = ... # add `Type1` to `captured_type_defs` and write `Type1` fory.serialize(stream, [Type1()]) # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before. fory.serialize(stream, [Type1(), Type2()]) # `Type1` and `Type2` are written before, no need to write meta. fory.serialize(stream, [Type1(), Type2()]) Streaming mode(streaming mode doesn't support meta share): If type meta hasn't been written before, the data will be written as: | unsigned varint: 0b11111111 | type def | If type meta has been written before, the data will be written as: | unsigned varint: written index &lt;&lt; 1 | written index is the id in captured_type_defs. With this mode, meta start offset can be omitted.  The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure in meta share mode doesn't lost shared meta.  Type Def‚Äã  Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | +----------------------+--------------------+-------------------+ | global binary header | meta header | fields meta |   For languages which support inheritance, if parent class and subclass has fields with same name, using field in subclass.  Global binary header‚Äã  50 bits hash + 1bit compress flag + write fields meta + 12 bits meta size. Right is the lower bits.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b1111_1111_1111, then writemeta_ size - 0b1111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  Meta header‚Äã  Meta header is a 8 bits number value.  Lowest 5 digits 0b00000~0b11110 are used to record num fields. 0b11111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. Note that num_fields is the number of compatible fields. Users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fory will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields.The 6th bit: 0 for registered by id, 1 for registered by name.Remaining 2 bits are reserved for future extension.  Fields meta‚Äã  Format:  | field info: variable bytes | variable bytes | ... | +---------------------------------+-----------------+-----+ | header + type info + field name | next field info | ... |   Field Header‚Äã  Field Header is 8 bits, annotation can be used to provide more specific info. If annotation not exists, fory will infer those info automatically.  The format for field header is:  2 bits field name encoding + 4 bits size + nullability flag + ref tracking flag   Detailed spec:  2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, field name will be written by an unsigned varint tag id, and 2 bits encoding will be 11. size of field name: The 4 bits size: 0~14 will be used to indicate length 1~15, the value 15 indicates to read more bytes, the encoding will encode size - 15 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.  Field Type Info‚Äã  Field type info is written as unsigned int8. Detailed id spec is:  For struct registered by id, it will be Type.STRUCT.For struct registered by name, it will be Type.NAMED_STRUCT.For enum registered by id, it will be Type.ENUM.For enum registered by name, it will be Type.NAMED_ENUM.For ext type registered by id, it will be Type.EXT.For ext type registered by name, it will be Type.NAMED_EXT.For list/set type, it will be written as Type.LIST/SET, then write element type recursively.For 1D primitive array type, it will be written as Type.XXX_ARRAY.For multi-dimensional primitive array type with same size on each dim, it will be written as Type.TENSOR.For other array type, it will be written as Type.LIST, then write element type recursively.For map type, it will be written as Type.MAP, then write key and value type recursively.For other types supported by fory directly, it will be fory type id for that type.For other types not determined at compile time, write Type.UNKNOWN instead. For such types, actual type will be written when serializing such field values.  Polymorphism spec:  struct/named_struct/ext/named_ext are taken as polymorphic, the meta for those types are written separately instead of inlining here to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too.enum is taken as morphic, if deserialization doesn't have this field, or the type is not enum, enum value will be skipped.list/map/set are taken as morphic, when serializing values of those type, the concrete types won't be written again.Other types that fory supported are taken as morphic too.  List/Set/Map nested type spec:  list: | list type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |set: | set type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |map: | set type id | key type info | value type info | Key type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |Value type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |  Field Name‚Äã  If tag id is set, tag id will be used instead. Otherwise meta string of field name will be written instead.  Field order‚Äã  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fory fields sort algorithms. In this way, fory can compute statistics for field names or types and using a more compact encoding.  ","version":"0.12","tagName":"h3"},{"title":"Extended Type Meta with Inheritance support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#extended-type-meta-with-inheritance-support","content":" If one want to support inheritance for struct, one can implement following spec.  ","version":"0.12","tagName":"h2"},{"title":"Schema consistent‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#schema-consistent","content":" Fields are serialized from parent type to leaf type. Fields are sorted using fory struct fields sort algorithms.  ","version":"0.12","tagName":"h3"},{"title":"Schema Evolution‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#schema-evolution","content":" Meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | variable bytes | variable bytes | +----------------------+----------------+----------------+--------------------+--------------------+ | global binary header | meta header | fields meta | parent meta header | parent fields meta |   Meta header‚Äã  Meta header is a 64 bits number value encoded in little endian order.  Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fory need to read more bytes for length using Fory unsigned int encoding. If current type doesn't has parent type, or parent type doesn't have fields to serialize, or we're in a context which serialize fields of current type only, num classes will be 1.The 5th bit is used to indicate whether this type needs schema evolution.Other 56 bits are used to store the unique hash of flags + all layers type meta.  Single layer type meta‚Äã  | unsigned varint | var uint | field info: variable bytes | variable bytes | ... | +-----------------+----------+-------------------------------+-----------------+-----+ | num_fields | type id | header + type id + field name | next field info | ... |   Other layers type meta‚Äã  Same encoding algorithm as the previous layer.  ","version":"0.12","tagName":"h3"},{"title":"Meta String‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as field names.  ","version":"0.12","tagName":"h2"},{"title":"Encoding Algorithms‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"0.12","tagName":"h3"},{"title":"Value Format‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#value-format","content":" ","version":"0.12","tagName":"h2"},{"title":"Basic types‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#basic-types","content":" bool‚Äã  size: 1 byteformat: 0 for false, 1 for true  int8‚Äã  size: 1 byteformat: write as pure byte.  int16‚Äã  size: 2 bytebyte order: raw bytes of little endian order  unsigned int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  unsigned varint32‚Äã  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  signed int32‚Äã  size: 4 bytebyte order: raw bytes of little endian order  signed varint32‚Äã  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encode it as an unsigned varint.  unsigned int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  unsigned varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [0, 2147483647], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  signed int64‚Äã  size: 8 bytebyte order: raw bytes of little endian order  signed varint64‚Äã  size: 1~9 byteFory SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fory PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  float32‚Äã  size: 4 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;single format&quot; bit layout, preserving Not-a-Number (NaN) values, then write as binary by little endian order.  float64‚Äã  size: 8 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;double format&quot; bit layout, preserving Not-a-Number (NaN) values. then write as binary by little endian order.  ","version":"0.12","tagName":"h3"},{"title":"string‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#string","content":" Format:  | unsigned varint64: size &lt;&lt; 2 `bitor` 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned varint64. The little 2 bits is used for encoding: 0 for latin1(ISO-8859-1), 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fory detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fory use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fory will use utf-8 to decode the data. Cross-language string serialization of fory uses utf-8 by default.  ","version":"0.12","tagName":"h3"},{"title":"list‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#list","content":" Format:  | unsigned varint64: length | 1 byte elements header | elements data |   elements header‚Äã  In most cases, all elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the elements have null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the element types are not the declared type, use the 3rd bit 0b100 of the header to flag it.If the element types are different, use the 4th bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom type field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  elements data‚Äã  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element type info.  fory = ... buffer = ... elems = ... if element_type_is_same: if not is_declared_type: fory.write_type(buffer, elem_type) elem_serializer = get_serializer(...) if track_ref: for elem in elems: if not ref_resolver.write_ref_or_null(buffer, elem): elem_serializer.write(buffer, elem) elif has_null: for elem in elems: if elem is None: buffer.write_byte(null_flag) else: buffer.write_byte(not_null_flag) elem_serializer.write(buffer, elem) else: for elem in elems: elem_serializer.write(buffer, elem) else: if track_ref: for elem in elems: fory.write_ref(buffer, elem) elif has_null: for elem in elems: fory.write_nullable(buffer, elem) else: for elem in elems: fory.write_value(buffer, elem)   CollectionSerializer#writeElementscan be taken as an example.  ","version":"0.12","tagName":"h3"},{"title":"array‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#array","content":" primitive array‚Äã  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types or mark it as list type.  Tensor‚Äã  Tensor is a special primitive multi-dimensional array which all dimensions have same size and type. The serialization format is:  | num_dims(unsigned varint) | shape[0](unsigned varint) | shape[...] | shape[N] | element type | data |   The data is continuous to reduce copy and may zero-copy in some cases.  object array‚Äã  Object array is serialized using the list format. Object component type will be taken as list element generic type.  ","version":"0.12","tagName":"h3"},{"title":"map‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#map","content":" Map uses a chunk by chunk based Format:  | length(unsigned varint) | key value chunk data | ... | key value chunk data |   map key-value chunk data‚Äã  Map iteration is too expensive, Fory won't compute the header like for list since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide the header in advance. Otherwise Fory will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fory will serialize the map chunk by chunk, every chunk has 255 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fory can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. For languages such as golang, this can be computed in advance for non-interface types most times. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Why serialize chunk by chunk?‚Äã  When fory will use first key-value pair to predict header optimistically, it can't know how many pairs have same meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at least X bytes to take up a place for later to update the number which has same elements, X is the num_bytes for encoding varint encoding of map size.  And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust, which object are not reference by default.  Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share meta.  The implementation can accumulate read count with map size to decide whether to read more chunks.  ","version":"0.12","tagName":"h3"},{"title":"enum‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"0.12","tagName":"h3"},{"title":"decimal‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#decimal","content":" Not supported for now.  ","version":"0.12","tagName":"h3"},{"title":"struct‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#struct","content":" Struct means object of class/pojo/struct/bean/record type. Struct will be serialized by writing its fields data in fory order.  Depending on schema compatibility, structs will have different formats.  field order‚Äã  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.when same size, sort by type idwhen same size and type id, sort by snake case field nametypes: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64 nullable primitive fields: same order as primitive fieldsmorphic fields: same type together, then sorted by field name lexicographically using snake case style.unknown fields: same sort algorithms as morphic fieldslist fields: same sort algorithms as morphic fieldsset fields: same sort algorithms as morphic fieldsmap fields: same sort algorithms as morphic fields  Field order‚Äã  Fields in a struct are sorted in a ascending order by:  primitive fields first: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64, sorted by type id.nullable primitive fieldsmorphic types except list/set/mapunknown typeslist typesset typesmap types  If two fields have same type, then sort by snake_case styled field name.  schema consistent‚Äã  Object will be written as:  | 4 byte | variable bytes | +---------------+------------------+ | type hash | field values |   Type hash is used to check the type schema consistency across languages. Type hash will be the first 32 bits of 56 bits value of the type meta.  Object fields will be serialized one by one using following format:  not null primitive field value: | var bytes | +----------------+ | value data | +----------------+ nullable primitive field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | type meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | type meta | value data | +-----------+------------+------------+   Schema evolution‚Äã  Schema evolution have similar format as schema consistent mode for object except:  For the object type, schema consistent mode will write type by id only, but schema evolution mode will write type consisting of field names, types and other meta too, see Type meta.Type meta of final custom type needs to be written too, because peers may not have this type defined.  ","version":"0.12","tagName":"h3"},{"title":"Type‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#type","content":" Type will be serialized using type meta format.  ","version":"0.12","tagName":"h3"},{"title":"Implementation guidelines‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#implementation-guidelines","content":" ","version":"0.12","tagName":"h2"},{"title":"How to reduce memory read/write code‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#how-to-reduce-memory-readwrite-code","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches.  ","version":"0.12","tagName":"h3"},{"title":"Fast deserialization for static languages without runtime codegen support‚Äã","type":1,"pageTitle":"Xlang Serialization Format","url":"/zh-CN/docs/specification/fory_xlang_serialization_spec#fast-deserialization-for-static-languages-without-runtime-codegen-support","content":" For type evolution, the serializer will encode the type meta into the serialized data. The deserializer will compare this meta with class meta in the current process, and use the diff to determine how to deserialize the data.  For java/javascript/python, we can use the diff to generate serializer code at runtime and load it as class/function for deserialization. In this way, the type evolution will be as fast as type consist mode.  For C++/Rust, we can't generate the serializer code at runtime. So we need to generate the code at compile-time using meta programming. But at that time, we don't know the type schema in other processes, so we can't generate the serializer code for such inconsistent types. We may need to generate the code which has a loop and compare field name one by one to decide whether to deserialize and assign the field or skip the field value.  One fast way is that we can optimize the string comparison into jump instructions:  Assume the current type has n fields, and the peer type has n1 fields.Generate an auto growing field id from 0 for every sorted field in the current type at the compile time.Compare the received type meta with current type, generate same id if the field name is same, otherwise generate an auto growing id starting from n, cache this meta at runtime.Iterate the fields of received type meta, use a switch to compare the field id to deserialize data and assign/skip field value. Continuous field id will be optimized into jump in switch block, so it will very fast.  Here is an example, suppose process A has a class Foo with version 1 defined as Foo1, process B has a class Foowith version 2 defined as Foo2:  // class Foo with version 1 class Foo1 { int32_t v1; // id 0 std::string v2; // id 1 }; // class Foo with version 2 class Foo2 { // id 0, but will have id 2 in process A bool v0; // id 1, but will have id 0 in process A int32_t v1; // id 2, but will have id 3 in process A int64_t long_value; // id 3, but will have id 1 in process A std::string v2; // id 4, but will have id 4 in process A std::vector&lt;std::string&gt; list; };   When process A received serialized Foo2 from process B, here is how it deserialize the data:  Foo1 foo1 = ...; const std::vector&lt;fory::FieldInfo&gt; &amp;field_infos = type_meta.field_infos; for (const auto &amp;field_info : field_infos) { switch (field_info.field_id) { case 0: foo1.v1 = buffer.read_varint32(); break; case 1: foo1.v2 = fory.read_string(); break; default: fory.skip_data(field_info); } }  ","version":"0.12","tagName":"h3"},{"title":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"0.12"},{"title":"Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/guide/xlang_object_graph_guide#Ë∑®ËØ≠Ë®ÄÂØπË±°ÂõæÂ∫èÂàóÂåñ","content":" ","version":"0.12","tagName":"h2"},{"title":"Â∫èÂàóÂåñÂÜÖÁΩÆÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÜÖÔøΩÁΩÆÁ±ªÂûã","content":" Apache Fory‚Ñ¢ ÂèØ‰ª•Ëá™Âä®Â∫èÂàóÂåñÁºñÁ®ãËØ≠Ë®ÄÁöÑÂ∏∏ËßÅÊï∞ÊçÆÁ±ªÂûãÔºöprimitive numeric types, string, binary, array, list, map Á≠â„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fory.serialize(list); // bytes can be data serialized by other languages. fory.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fory.serialize(map); // bytes can be data serialized by other languages. fory.deserialize(bytes); } }   Python  import pyfory import numpy as np fory = pyfory.Fory() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fory.serialize(object_list) # bytes can be data serialized by other languages. new_list = fory.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fory.serialize(object_map) # bytes can be data serialized by other languages. new_map = fory.deserialize(data) print(new_map)   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fory := forygo.NewFory() bytes, err := fory.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fory.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const fory = new Fory({ hps }); const input = fory.serialize(&quot;hello fory&quot;); const result = fory.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñËá™ÂÆö‰πâÁ±ªÂûã","content":" Â∫èÂàóÂåñÁî®Êà∑ÂÆö‰πâÁöÑÁ±ªÂûãÈúÄË¶Å‰ΩøÁî®Ê≥®ÂÜå API Ê≥®ÂÜåËá™ÂÆö‰πâÁ±ªÂûãÔºå‰ª•‰æøÂú®‰∏çÂêåËØ≠Ë®Ä‰∏≠Âª∫Á´ãÁ±ªÂûã‰πãÈó¥ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.Example2&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); fory.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fory.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfory, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfory.Int8Type, pyfory.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfory.Int8Type, pyfory.Int32Type] = None f5: pyfory.Int8Type = None f6: pyfory.Int16Type = None f7: pyfory.Int32Type = None # int type will be taken as `pyfory.Int64Type`. # use `pyfory.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfory.Float32Type = None # float type will be taken as `pyfory.Float64Type` f10: float = None f11: pyfory.Int16ArrayType = None f12: List[pyfory.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfory.Fory() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fory.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fory := forygo.NewFory() if err := fory.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fory.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fory.MaxInt8 obj.F6 = fory.MaxInt16 obj.F7 = fory.MaxInt32 obj.F8 = fory.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fory.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type, InternalSerializerType } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const input = serialize({ foo: &quot;hello fory&quot; }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fory::{from_buffer, to_buffer, Fory}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fory, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/guide/xlang_object_graph_guide#Â∫èÂàóÂåñÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®","content":" ÂÖ±‰∫´ÂºïÁî®ÂíåÂæ™ÁéØÂºïÁî®ÂèØ‰ª•Ë¢´Ëá™Âä®Â∫èÂàóÂåñÔºå‰∏ç‰ºö‰∫ßÁîüÈáçÂ§çÊï∞ÊçÆÊàñÈÄíÂΩíÈîôËØØ„ÄÇ  Java  import org.apache.fory.*; import org.apache.fory.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fory.examples.ReferenceExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fory.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fory.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fory.deserialize(bytes)); } }   Python  from typing import Dict import pyfory class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fory = pyfory.Fory(ref_tracking=True) fory.register_type(SomeClass, typename=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fory.serialize(obj) # bytes can be data serialized by other languages. print(fory.deserialize(data))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fory := forygo.NewFory(true) if err := fory.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fory.Marshal(value) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fory.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fory, { Type } from &quot;@apache-fory/fory&quot;; /** * @apache-fory/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from &quot;@apache-fory/hps&quot;; const description = Type.object(&quot;example.foo&quot;, { foo: Type.string(), bar: Type.object(&quot;example.foo&quot;), }); const fory = new Fory({ hps }); const { serialize, deserialize } = fory.registerSerializer(description); const data = { foo: &quot;hello fory&quot;, }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   Rust  Áî±‰∫é Rust ÊâÄÊúâÊùÉÈôêÂà∂ÔºåÊöÇ‰∏çÊîØÊåÅÂºïÁî®Á±ªÂûãÁöÑÂ∫èÂàóÂåñ  ","version":"0.12","tagName":"h3"},{"title":"Zero-Copy Serialization‚Äã","type":1,"pageTitle":"Â§öËØ≠Ë®ÄÂ∫èÂàóÂåñ","url":"/zh-CN/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializers.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fory fory = Fory.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   Python  import array import pyfory import numpy as np fory = pyfory.Fory() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fory.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fory.deserialize(data, buffers=buffers))   Golang  package main import forygo &quot;github.com/apache/fory/fory/go/fory&quot; import &quot;fmt&quot; func main() { fory := forygo.NewFory() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fory.NewByteBuffer(nil) var bufferObjects []fory.BufferObject fory.Serialize(buf, list, func(o fory.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fory.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fory.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"0.12","tagName":"h3"},{"title":"Java Â∫èÂàóÂåñ","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"0.12"},{"title":"Âø´ÈÄüÂºÄÂßã‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Âø´ÈÄüÂºÄÂßã","content":" Ê≥®ÊÑèÔºåFory ÂÆû‰æãÁöÑÂàõÂª∫ÂºÄÈîÄËæÉÂ§ßÔºåFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî®ÔºåËÄå‰∏çÊòØÊØèÊ¨°ÈÉΩÊñ∞Âª∫„ÄÇ Âª∫ËÆÆÂ∞Ü Fory ‰øùÂ≠òÂú®ÈùôÊÄÅÂÖ®Â±ÄÂèòÈáè„ÄÅÂçï‰æãÂØπË±°ÊàñÊúâÈôêÊï∞ÈáèÁöÑÂÆû‰æãÂèòÈáè‰∏≠„ÄÇ  ÂçïÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® Fory fory = Fory.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Ê≥®ÂÜåÁ±ªÂûãÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄÔºå‰ΩÜ‰∏çÊòØÂº∫Âà∂ÁöÑ„ÄÇ // ÂêØÁî®Á±ªÊ≥®ÂÜåÂêéÔºåÊâÄÊúâËá™ÂÆö‰πâÁ±ªÂûãÈÉΩÂøÖÈ°ªÊ≥®ÂÜå„ÄÇ fory.register(SomeClass.class); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Â§öÁ∫øÁ®ãÂú∫ÊôØ‰∏ã Fory ÁöÑÁî®Ê≥ïÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂú®Â§öÊ¨°Â∫èÂàóÂåñÈó¥Â§çÁî® ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   Fory ÂÆû‰æãÂ§çÁî®Á§∫‰æãÔºö  import java.util.List; import java.util.Arrays; import org.apache.fory.*; import org.apache.fory.config.*; public class Example { // Â§çÁî® fory ÂÆû‰æã private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes)); } }   ","version":"0.12","tagName":"h2"},{"title":"ForyBuilder ÈÖçÁΩÆÈÄâÈ°π‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#forybuilder-ÈÖçÁΩÆÈÄâÈ°π","content":" ÈÄâÈ°πÂêç\tËØ¥Êòé\tÈªòËÆ§ÂÄºtimeRefIgnored\tÊòØÂê¶ÂøΩÁï•ÊâÄÊúâÂú® TimeSerializers Ê≥®ÂÜåÁöÑÊó∂Èó¥Á±ªÂûãÂèäÂÖ∂Â≠êÁ±ªÁöÑÂºïÁî®Ë∑üË∏™ÔºàÂΩìÂºïÁî®Ë∑üË∏™ÂºÄÂêØÊó∂Ôºâ„ÄÇÂ¶ÇÈúÄÂØπÊó∂Èó¥Á±ªÂûãÂêØÁî®ÂºïÁî®Ë∑üË∏™ÔºåÂèØÈÄöËøá Fory#registerSerializer(Class, Serializer) Ê≥®ÂÜå„ÄÇ‰æãÂ¶ÇÔºöfory.registerSerializer(Date.class, new DateSerializer(fory, true))„ÄÇÊ≥®ÊÑèÔºåÂêØÁî®ÂºïÁî®Ë∑üË∏™ÈúÄÂú®ÂåÖÂê´Êó∂Èó¥Â≠óÊÆµÁöÑÁ±ªÂûã‰ª£Á†ÅÁîüÊàêÂâçÂÆåÊàêÔºåÂê¶ÂàôËøô‰∫õÂ≠óÊÆµ‰ªç‰ºöË∑≥ËøáÂºïÁî®Ë∑üË∏™„ÄÇ\ttrue compressInt\tÊòØÂê¶ÂêØÁî® int ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressLong\tÊòØÂê¶ÂêØÁî® long ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\ttrue compressString\tÊòØÂê¶ÂêØÁî®Â≠óÁ¨¶‰∏≤ÂéãÁº©‰ª•ÂáèÂ∞èÂ∫èÂàóÂåñ‰ΩìÁßØ„ÄÇ\tfalse classLoader\tÁ±ªÂä†ËΩΩÂô®‰∏çÂª∫ËÆÆÂä®ÊÄÅÂèòÊõ¥ÔºåFory ‰ºöÁºìÂ≠òÁ±ªÂÖÉÊï∞ÊçÆ„ÄÇÂ¶ÇÈúÄÂèòÊõ¥Á±ªÂä†ËΩΩÂô®ÔºåËØ∑‰ΩøÁî® LoaderBinding Êàñ ThreadSafeFory„ÄÇ\tThread.currentThread().getContextClassLoader() compatibleMode\tÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπÊÄßÈÖçÁΩÆ„ÄÇ‰∏é checkClassVersion ÈÖçÁΩÆÁõ∏ÂÖ≥„ÄÇSCHEMA_CONSISTENTÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÈúÄ‰∏ÄËá¥„ÄÇCOMPATIBLEÔºöÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑÂèØ‰∏çÂêåÔºåÂèØÁã¨Á´ãÂ¢ûÂà†Â≠óÊÆµ„ÄÇËØ¶ËßÅ„ÄÇ\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\tÊòØÂê¶Ê†°È™åÁ±ªÁªìÊûÑ‰∏ÄËá¥ÊÄß„ÄÇÂêØÁî®ÂêéÔºåFory ‰ºöÂÜôÂÖ•Âπ∂Ê†°È™å classVersionHash„ÄÇËã•ÂêØÁî® CompatibleMode#COMPATIBLEÔºåÊ≠§È°π‰ºöËá™Âä®ÂÖ≥Èó≠„ÄÇÈô§ÈùûËÉΩÁ°Æ‰øùÁ±ª‰∏ç‰ºöÊºîÂåñÔºåÂê¶Âàô‰∏çÂª∫ËÆÆÂÖ≥Èó≠„ÄÇ\tfalse checkJdkClassSerializable\tÊòØÂê¶Ê†°È™å java.* ‰∏ãÁöÑÁ±ªÂÆûÁé∞‰∫Ü Serializable Êé•Âè£„ÄÇËã•Êú™ÂÆûÁé∞ÔºåFory ‰ºöÊäõÂá∫ UnsupportedOperationException„ÄÇ\ttrue registerGuavaTypes\tÊòØÂê¶È¢ÑÊ≥®ÂÜå Guava Á±ªÂûãÔºàÂ¶Ç RegularImmutableMap/RegularImmutableListÔºâ„ÄÇËøô‰∫õÁ±ªÂûãËôΩÈùûÂÖ¨ÂºÄ APIÔºå‰ΩÜËæÉ‰∏∫Á®≥ÂÆö„ÄÇ\ttrue requireClassRegistration\tÂÖ≥Èó≠ÂêéÂèØÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÔºå‰ΩÜÂ≠òÂú®ÂÆâÂÖ®È£éÈô©„ÄÇ\ttrue suppressClassRegistrationWarnings\tÊòØÂê¶Â±èËîΩÁ±ªÊ≥®ÂÜåË≠¶Âëä„ÄÇË≠¶ÂëäÂèØÁî®‰∫éÂÆâÂÖ®ÂÆ°ËÆ°Ôºå‰ΩÜÂèØËÉΩÂΩ±Âìç‰ΩìÈ™åÔºåÈªòËÆ§ÂºÄÂêØÂ±èËîΩ„ÄÇ\ttrue metaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´Ê®°Âºè„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ scopedMetaShareEnabled\tÊòØÂê¶ÂêØÁî®ÂçïÊ¨°Â∫èÂàóÂåñËåÉÂõ¥ÂÜÖÁöÑÂÖÉÊï∞ÊçÆÁã¨‰∫´„ÄÇËØ•ÂÖÉÊï∞ÊçÆ‰ªÖÂú®Êú¨Ê¨°Â∫èÂàóÂåñ‰∏≠ÊúâÊïàÔºå‰∏ç‰∏éÂÖ∂‰ªñÂ∫èÂàóÂåñÂÖ±‰∫´„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ metaCompressor\tËÆæÁΩÆÂÖÉÊï∞ÊçÆÂéãÁº©Âô®„ÄÇÈªòËÆ§‰ΩøÁî®Âü∫‰∫é Deflater ÁöÑ DeflaterMetaCompressorÔºåÂèØËá™ÂÆö‰πâÂ¶Ç zstd Á≠âÊõ¥È´òÂéãÁº©ÊØîÁöÑÂéãÁº©Âô®„ÄÇÈúÄ‰øùËØÅÁ∫øÁ®ãÂÆâÂÖ®„ÄÇ\tDeflaterMetaCompressor deserializeNonexistentClass\tÊòØÂê¶ÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñ/Ë∑≥Ëøá‰∏çÂ≠òÂú®ÁöÑÁ±ªÁöÑÊï∞ÊçÆ„ÄÇ\ttrueÔºàËã•ËÆæÁΩÆ‰∫Ü CompatibleMode.CompatibleÔºåÂê¶Âàô‰∏∫ falseÔºâ codeGenEnabled\tÊòØÂê¶ÂêØÁî®‰ª£Á†ÅÁîüÊàê„ÄÇÂÖ≥Èó≠ÂêéÈ¶ñÊ¨°Â∫èÂàóÂåñÊõ¥Âø´Ôºå‰ΩÜÂêéÁª≠Â∫èÂàóÂåñÊÄßËÉΩËæÉ‰Ωé„ÄÇ\ttrue asyncCompilationEnabled\tÊòØÂê¶ÂêØÁî®ÂºÇÊ≠•ÁºñËØë„ÄÇÂêØÁî®ÂêéÔºåÂ∫èÂàóÂåñÂÖàÁî®Ëß£ÈáäÊ®°ÂºèÔºåJIT ÂÆåÊàêÂêéÂàáÊç¢‰∏∫ JIT Ê®°Âºè„ÄÇ\tfalse scalaOptimizationEnabled\tÊòØÂê¶ÂêØÁî® Scala ÁâπÂÆö‰ºòÂåñ„ÄÇ\tfalse copyRef\tÂÖ≥Èó≠ÂêéÔºåÊ∑±Êã∑Ë¥ùÊÄßËÉΩÊõ¥Â•ΩÔºå‰ΩÜ‰ºöÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®„ÄÇÂØπË±°Âõæ‰∏≠ÁöÑÂêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°„ÄÇ\ttrue serializeEnumByName\tÂêØÁî®ÂêéÔºåÊûö‰∏æÊåâÂêçÁß∞Â∫èÂàóÂåñÔºåÂê¶ÂàôÊåâ ordinal„ÄÇ\tfalse  ","version":"0.12","tagName":"h2"},{"title":"È´òÁ∫ßÁî®Ê≥ï‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#È´òÁ∫ßÁî®Ê≥ï","content":" ","version":"0.12","tagName":"h2"},{"title":"Apache Fory‚Ñ¢ ÂàõÂª∫‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#apache-fory-ÂàõÂª∫","content":" ÂçïÁ∫øÁ®ã Fory Á§∫‰æãÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   Á∫øÁ®ãÂÆâÂÖ® Fory Á§∫‰æãÔºö  ThreadSafeFory fory = Fory.builder() .withLanguage(Language.JAVA) // ÂêØÁî®ÂÖ±‰∫´/Âæ™ÁéØÂºïÁî®Ë∑üË∏™„ÄÇËã•Êó†ÈáçÂ§çÂºïÁî®ÂèØÂÖ≥Èó≠‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ .withRefTracking(false) // ÂêØÁî® int ÂéãÁº© // .withIntCompressed(true) // ÂêØÁî® long ÂéãÁº© // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // ÂêØÁî®Á±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ // Ëã•ËøΩÊ±ÇÊõ¥Â∞è‰ΩìÁßØÂíåÊõ¥È´òÊÄßËÉΩÂèØÂÖ≥Èó≠ // .withCompatibleMode(CompatibleMode.COMPATIBLE) // ÂêØÁî®ÂºÇÊ≠•Â§öÁ∫øÁ®ãÁºñËØë .withAsyncCompilation(true) .buildThreadSafeFory(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ","version":"0.12","tagName":"h3"},{"title":"Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Â∫èÂàóÂåñ‰∏≠ÁöÑÁ±ªÁªìÊûÑÊºîÂåñ","content":" Âú®ÂÆûÈôÖÁ≥ªÁªü‰∏≠ÔºåÂ∫èÂàóÂåñÁî®Âà∞ÁöÑÁ±ªÁªìÊûÑÂèØËÉΩ‰ºöÈöèÊó∂Èó¥ÂèòÂåñÔºåÊØîÂ¶ÇÂ≠óÊÆµÁöÑÂ¢ûÂà†„ÄÇÂΩìÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´Ø‰ΩøÁî®‰∏çÂêåÁâàÊú¨ÁöÑ jar Êó∂ÔºåÁ±ªÁªìÊûÑÂèØËÉΩ‰∏ç‰∏ÄËá¥„ÄÇ  Fory ÈªòËÆ§ÈááÁî® CompatibleMode.SCHEMA_CONSISTENTÔºåÂç≥Ë¶ÅÊ±ÇÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ÄËá¥Ôºå‰ª•Ëé∑ÂæóÊúÄÂ∞èÁöÑÂ∫èÂàóÂåñ‰ΩìÁßØÂíåÊúÄÈ´òÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂèçÂ∫èÂàóÂåñ‰ºöÂ§±Ë¥•„ÄÇ  Â¶ÇÈúÄÊîØÊåÅÁ±ªÁªìÊûÑÊºîÂåñÔºàÂâçÂêë/ÂêéÂêëÂÖºÂÆπÔºâÔºåÈúÄÂ∞Ü Fory ÈÖçÁΩÆ‰∏∫ CompatibleMode.COMPATIBLEÔºåÂÖÅËÆ∏Â≠óÊÆµÂ¢ûÂà†ÔºåÂèçÂ∫èÂàóÂåñÁ´ØÂèØËá™Âä®ÈÄÇÈÖç‰∏çÂêåÁªìÊûÑ„ÄÇ  Á§∫‰æãÔºö  Fory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE) .build(); byte[] bytes = fory.serialize(object); System.out.println(fory.deserialize(bytes));   ÂÖºÂÆπÊ®°Âºè‰∏ãÔºåÁ±ªÂÖÉÊï∞ÊçÆ‰ºöÂÜôÂÖ•Â∫èÂàóÂåñÁªìÊûú„ÄÇApache Fory‚Ñ¢ ÈááÁî®È´òÊïàÂéãÁº©ÁÆóÊ≥ïÈôç‰ΩéÂÖÉÊï∞ÊçÆÂºÄÈîÄÔºå‰ΩÜ‰ªç‰ºöÊúâ‰∏ÄÂÆö‰ΩìÁßØÂ¢ûÂä†„ÄÇ‰∏∫Ëøõ‰∏ÄÊ≠•Èôç‰ΩéÂÖÉÊï∞ÊçÆÊàêÊú¨ÔºåApache Fory‚Ñ¢ ÊîØÊåÅÂÖÉÊï∞ÊçÆÂÖ±‰∫´Êú∫Âà∂ÔºåËØ¶ÊÉÖËßÅMeta Sharing„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂéãÁº©‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂéãÁº©","content":" ForyBuilder#withIntCompressed/ForyBuilder#withLongCompressed ÂèØÁî®‰∫éÂéãÁº© int/long Á±ªÂûã‰ª•ÂáèÂ∞è‰ΩìÁßØ„ÄÇÈªòËÆ§Âùá‰∏∫ÂºÄÂêØ„ÄÇ  Â¶ÇÊûúÂ∫èÂàóÂåñ‰ΩìÁßØ‰∏çÊïèÊÑüÔºàÂ¶Ç‰πãÂâçÁî® flatbuffers Á≠âÊó†ÂéãÁº©Ê†ºÂºèÔºâÔºåÂª∫ËÆÆÂÖ≥Èó≠ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇÂØπ‰∫éÂÖ®‰∏∫Êï∞Â≠óÁöÑÊï∞ÊçÆÔºåÂéãÁº©ÂèØËÉΩÂ∏¶Êù• 80% ÁöÑÊÄßËÉΩÊçüÂ§±„ÄÇ  int ÂéãÁº©ÈááÁî® 1~5 Â≠óËäÇÂèòÈïøÁºñÁ†ÅÔºålong ÂéãÁº©ÊîØÊåÅ‰∏§ÁßçÊñπÂºèÔºö  SLIÔºàSmall long as intÔºåÈªòËÆ§ÔºâÔºölong Âú® [-1073741824, 1073741823] ËåÉÂõ¥ÂÜÖÁî® 4 Â≠óËäÇÁºñÁ†ÅÔºåÂê¶ÂàôÁî® 9 Â≠óËäÇ„ÄÇPVLÔºàProgressive Variable-length LongÔºâÔºöÈááÁî®ÂèòÈïøÁºñÁ†ÅÔºåË¥üÊï∞ÈÄöËøá (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ËΩ¨Êç¢„ÄÇ  Â¶Ç long Á±ªÂûãÊï∞ÊçÆÊó†Ê≥ïÊúâÊïàÂéãÁº©ÔºåÂª∫ËÆÆÂÖ≥Èó≠ long ÂéãÁº©‰ª•ÊèêÂçáÊÄßËÉΩ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÂØπË±°Ê∑±Êã∑Ë¥ù‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂØπË±°Ê∑±Êã∑Ë¥ù","content":" Ê∑±Êã∑Ë¥ùÁ§∫‰æãÔºö  Fory fory = Fory.builder().withRefCopy(true).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   Â¶ÇÈúÄÂøΩÁï•Âæ™ÁéØÂíåÂÖ±‰∫´ÂºïÁî®ÔºàÂç≥ÂØπË±°Âõæ‰∏≠Âêå‰∏ÄÂºïÁî®‰ºöË¢´Êã∑Ë¥ù‰∏∫‰∏çÂêåÂØπË±°ÔºâÔºåÂèØÂÖ≥Èó≠ refCopyÔºö  Fory fory = Fory.builder().withRefCopy(false).build(); SomeClass a = xxx; SomeClass copied = fory.copy(a);   ","version":"0.12","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" Êüê‰∫õÂú∫ÊôØ‰∏ãÈúÄ‰∏∫ÁâπÂÆöÁ±ªÂûãÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÔºåÂ∞§ÂÖ∂ÊòØ JDK writeObject/writeReplace/readObject/readResolve ÊñπÂºèÊïàÁéáËæÉ‰ΩéÊó∂„ÄÇÂ¶Ç‰∏ã‰æãÔºåÈÅøÂÖç Foo#writeObject Ë¢´Ë∞ÉÁî®Ôºö  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fory fory) { super(fory, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®Ôºö  Fory fory = getFory(); fory.registerSerializer(Foo.class, new FooSerializer(fory));   ","version":"0.12","tagName":"h3"},{"title":"ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂÆûÁé∞ÈõÜÂêàÁ±ªÂ∫èÂàóÂåñÂô®","content":" ‰∏é Map Á±ª‰ººÔºåÂÆûÁé∞Ëá™ÂÆö‰πâ Collection Á±ªÂûãÁöÑÂ∫èÂàóÂåñÂô®Êó∂ÔºåÈúÄÁªßÊâø CollectionSerializer Êàñ AbstractCollectionSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Âú®‰∫éÔºåAbstractCollectionSerializer ÂèØÁî®‰∫éÂ∫èÂàóÂåñÁ±ª‰ººÈõÜÂêàÁªìÊûÑ‰ΩÜ‰∏çÊòØ Java Collection Â≠êÁ±ªÁöÑÁ±ªÂûã„ÄÇ  ÂØπ‰∫éÈõÜÂêàÂ∫èÂàóÂåñÂô®ÔºåÊúâ‰∏Ä‰∏™ÁâπÊÆäÂèÇÊï∞ supportCodegenHook ÈúÄË¶ÅÈÖçÁΩÆÔºö  ËÆæ‰∏∫ true Êó∂Ôºö ÂêØÁî®ÈõÜÂêàÂÖÉÁ¥†ÁöÑÈ´òÊïàËÆøÈóÆÂíå JIT ÁºñËØëÔºåÊèêÂçáÊÄßËÉΩÁõ¥Êé•Â∫èÂàóÂåñË∞ÉÁî®ÔºåÂÜÖËÅî map ÁöÑ key-valueÔºåÊó†Âä®ÊÄÅÂàÜÂèëÂºÄÈîÄÊé®ËçêÁî®‰∫éÊ†áÂáÜÈõÜÂêàÁ±ªÂûã ËÆæ‰∏∫ false Êó∂Ôºö ÈááÁî®Êé•Âè£ÊñπÂºèËÆøÈóÆÂÖÉÁ¥†ÔºåÂä®ÊÄÅÂàÜÂèëÔºåÁÅµÊ¥ªÊÄßÊõ¥È´òÈÄÇÂêàÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±ÇÁöÑËá™ÂÆö‰πâÈõÜÂêàÂèØÂ§ÑÁêÜÂ§çÊùÇÈõÜÂêàÂÆûÁé∞  ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®ÂÆûÁé∞‚Äã  ÂÆûÁé∞ÊîØÊåÅ JIT ÁöÑÈõÜÂêàÂ∫èÂàóÂåñÂô®Êó∂ÔºåÂèØÂà©Áî® Fory Áé∞ÊúâÁöÑ‰∫åËøõÂà∂Ê†ºÂºèÂíåÈõÜÂêàÂ∫èÂàóÂåñÂü∫Á°ÄËÆæÊñΩ„ÄÇÂÖ≥ÈîÆÂú®‰∫éÊ≠£Á°ÆÂÆûÁé∞ onCollectionWrite Âíå newCollection ÊñπÊ≥ï‰ª•Â§ÑÁêÜÂÖÉÊï∞ÊçÆÔºåÂÖ∂‰ΩôÂÖÉÁ¥†Â∫èÂàóÂåñÁî± Fory Ëá™Âä®ÂÆåÊàê„ÄÇ  Á§∫‰æãÔºö  public class CustomCollectionSerializer&lt;T extends Collection&gt; extends CollectionSerializer&lt;T&gt; { public CustomCollectionSerializer(Fory fory, Class&lt;T&gt; cls) { // supportCodegenHook ÊéßÂà∂ÊòØÂê¶ÂêØÁî® JIT ÁºñËØë super(fory, cls, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, T value) { // ÂÜôÂÖ•ÈõÜÂêàÂ§ßÂ∞è buffer.writeVarUint32Small7(value.size()); // ÂèØÂÜôÂÖ•È¢ùÂ§ñÈõÜÂêàÂÖÉÊï∞ÊçÆ return value; } @Override public Collection newCollection(MemoryBuffer buffer) { // ÂàõÂª∫Êñ∞ÈõÜÂêàÂÆû‰æã Collection collection = super.newCollection(buffer); // ËØªÂèñÂπ∂ËÆæÁΩÆÈõÜÂêàÂ§ßÂ∞è int numElements = getAndClearNumElements(); setNumElements(numElements); return collection; } }   Ê≥®ÊÑèÔºöÂÆûÁé∞ newCollection Êó∂ÈúÄË∞ÉÁî® setNumElementsÔºå‰ª•ÂëäÁü• Fory ÂèçÂ∫èÂàóÂåñÂ§öÂ∞ëÂÖÉÁ¥†„ÄÇ  ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâÈõÜÂêàÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄÂ∫èÂàóÂåñÂ∫ïÂ±Ç‰∏∫ÂéüÂßãÊï∞ÁªÑÊàñÊúâÁâπÊÆäÈúÄÊ±ÇÁöÑÈõÜÂêàÁ±ªÂûãÔºåÊ≠§Êó∂ÂèØÁ¶ÅÁî® JITÔºåÁõ¥Êé•ÈáçÂÜô write Âíå read ÊñπÊ≥ï„ÄÇ  ËøôÁßçÊñπÂºèÔºö  ÂÆåÂÖ®ÊéßÂà∂Â∫èÂàóÂåñÊ†ºÂºèÈÄÇÂêàÂéüÂßãÊï∞ÁªÑË∑≥ËøáÈõÜÂêàËø≠‰ª£ÂºÄÈîÄÂèØÁõ¥Êé•ÂÜÖÂ≠òËÆøÈóÆ  Á§∫‰æãÔºàÂéüÂßã int Êï∞ÁªÑÔºâÔºö  class IntList extends AbstractCollection&lt;Integer&gt; { private final int[] elements; private final int size; public IntList(int size) { this.elements = new int[size]; this.size = size; } public IntList(int[] elements, int size) { this.elements = elements; this.size = size; } @Override public Iterator&lt;Integer&gt; iterator() { return new Iterator&lt;Integer&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Integer next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public int size() { return size; } public int get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public void set(int index, int value) { if (index &gt;= size) throw new IndexOutOfBoundsException(); elements[index] = value; } public int[] getElements() { return elements; } } class IntListSerializer extends AbstractCollectionSerializer&lt;IntList&gt; { public IntListSerializer(Fory fory) { // Á¶ÅÁî® JITÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ super(fory, IntList.class, false); } @Override public void write(MemoryBuffer buffer, IntList value) { buffer.writeVarUint32Small7(value.size()); int[] elements = value.getElements(); for (int i = 0; i &lt; value.size(); i++) { buffer.writeVarInt32(elements[i]); } } @Override public IntList read(MemoryBuffer buffer) { int size = buffer.readVarUint32Small7(); int[] elements = new int[size]; for (int i = 0; i &lt; size; i++) { elements[i] = buffer.readVarInt32(); } return new IntList(elements, size); } // JIT Á¶ÅÁî®Êó∂‰ª•‰∏ãÊñπÊ≥ï‰∏ç‰ΩøÁî® @Override public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) { throw new UnsupportedOperationException(); } @Override public Collection newCollection(MemoryBuffer buffer) { throw new UnsupportedOperationException(); } @Override public IntList onCollectionRead(Collection collection) { throw new UnsupportedOperationException(); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  ÂéüÂßãÊï∞ÁªÑÂ≠òÂÇ®ÔºöÁõ¥Êé•Áî® int[]ÔºåÈÅøÂÖçË£ÖÁÆ±/ÊãÜÁÆ±ÔºåÂÜÖÂ≠òÂ∏ÉÂ±ÄÈ´òÊïà„ÄÇÁõ¥Êé•Â∫èÂàóÂåñÔºöÂÖàÂÜô sizeÔºåÂÜçÂÜôÂéüÂßãÂÄºÔºåÊó†ÈúÄËø≠‰ª£ÔºåÊó†Ë£ÖÁÆ±/ÊãÜÁÆ±„ÄÇÁõ¥Êé•ÂèçÂ∫èÂàóÂåñÔºöÂÖàËØª sizeÔºåÂÜçËØªÂéüÂßãÂÄºÂ°´ÂÖÖÊï∞ÁªÑÔºåÊúÄÂêéÊûÑÈÄ†ÂØπË±°„ÄÇÁ¶ÅÁî® JITÔºösupportCodegenHook=falseÔºåÈáçÂÜô write/readÔºåÂÆåÂÖ®Ëá™ÂÆö‰πâÊ†ºÂºè„ÄÇ  ÈÄÇÁî®Âú∫ÊôØÔºö  Âè™Â§ÑÁêÜÂéüÂßãÁ±ªÂûãÊÄßËÉΩÊûÅËá¥Ë¶ÅÊ±ÇÈúÄÊúÄÂ∞èÂÜÖÂ≠òÂºÄÈîÄÊúâÁâπÊÆäÂ∫èÂàóÂåñÈúÄÊ±Ç  ‰ΩøÁî®Á§∫‰æãÔºö  IntList list = new IntList(3); list.set(0, 1); list.set(1, 2); list.set(2, 3); byte[] bytes = fory.serialize(list); IntList newList = (IntList) fory.deserialize(bytes);   ËôΩÁÑ∂ÊîæÂºÉ‰∫Ü Fory ÁöÑÈÉ®ÂàÜ‰ºòÂåñÔºå‰ΩÜÂØπÂéüÂßãÁ±ªÂûãÂíåÁõ¥Êé•Êï∞ÁªÑËÆøÈóÆÂú∫ÊôØÊÄßËÉΩÊûÅÈ´ò„ÄÇ  ÂÆûÁé∞ collection-like Á±ªÂûãÂ∫èÂàóÂåñÂô®‚Äã  ÊúâÊó∂ÈúÄ‰∏∫Á±ª‰ººÈõÜÂêà‰ΩÜÈùûÊ†áÂáÜ Java Collection ÁöÑÁ±ªÂûãÂÆûÁé∞Â∫èÂàóÂåñÂô®„ÄÇÂéüÂàôÂ¶Ç‰∏ãÔºö  ÁªßÊâø AbstractCollectionSerializerÂêØÁî® JIT ‰ºòÂåñÔºàsupportCodegenHook=trueÔºâÈÄöËøáËßÜÂõæÁ±ªÈ´òÊïàËÆøÈóÆÂÖÉÁ¥†Ê≠£Á°ÆÁÆ°ÁêÜ size  Á§∫‰æãÔºö  class CustomCollectionLike { private final Object[] elements; private final int size; public CustomCollectionLike(int size) { this.elements = new Object[size]; this.size = size; } public CustomCollectionLike(Object[] elements, int size) { this.elements = elements; this.size = size; } public Object get(int index) { if (index &gt;= size) throw new IndexOutOfBoundsException(); return elements[index]; } public int size() { return size; } public Object[] getElements() { return elements; } } class CollectionView extends AbstractCollection&lt;Object&gt; { private final Object[] elements; private final int size; private int writeIndex; public CollectionView(CustomCollectionLike collection) { this.elements = collection.getElements(); this.size = collection.size(); } public CollectionView(int size) { this.size = size; this.elements = new Object[size]; } @Override public Iterator&lt;Object&gt; iterator() { return new Iterator&lt;Object&gt;() { private int index = 0; @Override public boolean hasNext() { return index &lt; size; } @Override public Object next() { if (!hasNext()) throw new NoSuchElementException(); return elements[index++]; } }; } @Override public boolean add(Object element) { if (writeIndex &gt;= size) throw new IllegalStateException(&quot;Collection is full&quot;); elements[writeIndex++] = element; return true; } @Override public int size() { return size; } public Object[] getElements() { return elements; } } class CustomCollectionSerializer extends AbstractCollectionSerializer&lt;CustomCollectionLike&gt; { public CustomCollectionSerializer(Fory fory) { super(fory, CustomCollectionLike.class, true); } @Override public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) { buffer.writeVarUint32Small7(value.size()); return new CollectionView(value); } @Override public Collection newCollection(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new CollectionView(numElements); } @Override public CustomCollectionLike onCollectionRead(Collection collection) { CollectionView view = (CollectionView) collection; return new CustomCollectionLike(view.getElements(), view.size()); } }   ÂÖ≥ÈîÆÁÇπËØ¥ÊòéÔºö  Êï∞ÁªÑÂ≠òÂÇ®ÔºåÂÆöÈïøÔºåÁõ¥Êé•ËÆøÈóÆËßÜÂõæÁ±ªÁªßÊâø AbstractCollectionÔºåÂÆûÁé∞Ëø≠‰ª£Âíå addÊîØÊåÅ JIT ‰ºòÂåñÔºåÊï∞ÁªÑÈõ∂Êã∑Ë¥ùÊÄßËÉΩ‰ºòÂÖàÔºåÁÅµÊ¥ªÊÄßÁï•‰Ωé    Â¶ÇÈúÄÁªßÁª≠Ë°•ÂÖÖ map-like Á±ªÂûã„ÄÅÊ≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®„ÄÅExternalizable ÊîØÊåÅÁ≠âÂÜÖÂÆπÔºåËØ∑ÂõûÂ§ç&quot;ÁªßÁª≠&quot;ÔºÅ  ","version":"0.12","tagName":"h3"},{"title":"Ëá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Ëá™ÂÆö‰πâ-map-Â∫èÂàóÂåñÂô®","content":" Ëá™ÂÆö‰πâ Map Á±ªÂûãÂ∫èÂàóÂåñÂô®ÈúÄÁªßÊâø MapSerializer Êàñ AbstractMapSerializer„ÄÇ‰∫åËÄÖÂå∫Âà´Á±ª‰ººÈõÜÂêàÂ∫èÂàóÂåñÂô®„ÄÇ  supportCodegenHook=trueÔºöÊé®ËçêÁî®‰∫éÊ†áÂáÜ MapÔºåÊîØÊåÅ JIT ‰ºòÂåñsupportCodegenHook=falseÔºöÈÄÇÂêàÁâπÊÆäÈúÄÊ±ÇÔºåÈúÄÊâãÂä®ÂÆûÁé∞Â∫èÂàóÂåñÈÄªËæë  ÊîØÊåÅ JIT ÁöÑ Map Â∫èÂàóÂåñÂô®Á§∫‰æã‚Äã  public class CustomMapSerializer&lt;T extends Map&gt; extends MapSerializer&lt;T&gt; { public CustomMapSerializer(Fory fory, Class&lt;T&gt; cls) { super(fory, cls, true); } @Override public Map onMapWrite(MemoryBuffer buffer, T value) { buffer.writeVarUint32Small7(value.size()); return value; } @Override public Map newMap(MemoryBuffer buffer) { int numElements = buffer.readVarUint32Small7(); setNumElements(numElements); return new HashMap(numElements); } }   ‰∏çÊîØÊåÅ JIT ÁöÑËá™ÂÆö‰πâ Map Â∫èÂàóÂåñÂô®‚Äã  ÈÄÇÁî®‰∫éÊúâÁâπÊÆäÂ≠óÊÆµÊàñËá™ÂÆö‰πâ‰∫åËøõÂà∂Ê†ºÂºèÁöÑ Map Á±ªÂûã„ÄÇ  class FixedValueMap extends AbstractMap&lt;String, Integer&gt; { // ... ÁúÅÁï•ÂÆûÁé∞ ... } class FixedValueMapSerializer extends AbstractMapSerializer&lt;FixedValueMap&gt; { public FixedValueMapSerializer(Fory fory) { super(fory, FixedValueMap.class, false); } @Override public void write(MemoryBuffer buffer, FixedValueMap value) { buffer.writeInt32(value.getFixedValue()); buffer.writeVarUint32Small7(value.getKeys().size()); for (String key : value.getKeys()) { buffer.writeString(key); } } @Override public FixedValueMap read(MemoryBuffer buffer) { int fixedValue = buffer.readInt32(); int size = buffer.readVarUint32Small7(); Set&lt;String&gt; keys = new HashSet&lt;&gt;(size); for (int i = 0; i &lt; size; i++) { keys.add(buffer.readString()); } return new FixedValueMap(keys, fixedValue); } @Override public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapRead(Map map) { throw new UnsupportedOperationException(); } @Override public FixedValueMap onMapCopy(Map map) { throw new UnsupportedOperationException(); } }   ","version":"0.12","tagName":"h3"},{"title":"Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Ê≥®ÂÜåËá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®","content":" ÂÆûÁé∞Ëá™ÂÆö‰πâÂ∫èÂàóÂåñÂô®ÂêéÔºåÈúÄÈÄöËøáÂ¶Ç‰∏ãÊñπÂºèÊ≥®ÂÜåÔºö  Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // Ê≥®ÂÜå Map Â∫èÂàóÂåñÂô® fory.registerSerializer(CustomMap.class, new CustomMapSerializer&lt;&gt;(fory, CustomMap.class)); // Ê≥®ÂÜåÈõÜÂêàÂ∫èÂàóÂåñÂô® fory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer&lt;&gt;(fory, CustomCollection.class));   Ê≥®ÊÑè‰∫ãÈ°πÔºö ÂßãÁªàÁªßÊâøÂêàÈÄÇÁöÑÂü∫Á±ªÔºàMap Áî® MapSerializer/AbstractMapSerializerÔºåÈõÜÂêàÁî® CollectionSerializer/AbstractCollectionSerializerÔºâÊ†πÊçÆ supportCodegenHook ÈÄâÊã©ÊÄßËÉΩ‰∏éÁÅµÊ¥ªÊÄßÂ¶ÇÈúÄÂºïÁî®Ë∑üË∏™ÔºåÈúÄÊ≠£Á°ÆÂ§ÑÁêÜsupportCodegenHook=true Êó∂ÔºåÈúÄÁî® setNumElements/getAndClearNumElements ÁÆ°ÁêÜÂÖÉÁ¥†Êï∞Èáè  ","version":"0.12","tagName":"h3"},{"title":"ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂÆâÂÖ®‰∏éÁ±ªÊ≥®ÂÜå","content":" ForyBuilder#requireClassRegistration ÂèØÂÖ≥Èó≠Á±ªÊ≥®ÂÜåÊ†°È™åÔºåÂÖÅËÆ∏ÂèçÂ∫èÂàóÂåñÊú™Áü•Á±ªÂûãÔºåÁÅµÊ¥ª‰ΩÜÊúâÂÆâÂÖ®È£éÈô©„ÄÇ  Â¶ÇÊó†Ê≥ïÁ°Æ‰øùÁéØÂ¢ÉÂÆâÂÖ®ÔºåÂàáÂãøÂÖ≥Èó≠Á±ªÊ≥®ÂÜå„ÄÇ ÂèçÂ∫èÂàóÂåñÊú™Áü•/‰∏çÂèó‰ø°‰ªªÁ±ªÂûãÊó∂ÔºåÊÅ∂ÊÑè‰ª£Á†ÅÂèØËÉΩÂú® init/equals/hashCode Á≠âÊñπÊ≥ï‰∏≠Ë¢´ÊâßË°å„ÄÇ  Á±ªÊ≥®ÂÜå‰∏ç‰ªÖÊèêÂçáÂÆâÂÖ®ÊÄßÔºåËøòÂèØÂáèÂ∞ëÁ±ªÂêçÂ∫èÂàóÂåñÂºÄÈîÄ„ÄÇÊ≥®ÂÜåÈ°∫Â∫èÈúÄ‰øùÊåÅÂ∫èÂàóÂåñÁ´Ø‰∏éÂèçÂ∫èÂàóÂåñÁ´Ø‰∏ÄËá¥„ÄÇ  Fory fory = xxx; fory.register(SomeClass.class); fory.register(SomeClass1.class, 200);   Â¶ÇÈúÄÂÖ≥Èó≠Ê≥®ÂÜåÊ†°È™åÔºåÂèØÈÄöËøá ClassResolver#setClassChecker Ëá™ÂÆö‰πâÂÖÅËÆ∏ÁöÑÁ±ªÂêçÔºö  Fory fory = xxx; fory.getClassResolver().setClassChecker( (classResolver, className) -&gt; className.startsWith(&quot;org.example.&quot;));   Êàñ‰ΩøÁî® AllowListCheckerÔºö  AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFory fory = new ThreadLocalFory(classLoader -&gt; { Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Fory Êèê‰æõ‰∫Ü org.apache.fory.resolver.AllowListCheckerÔºå‰πüÂèØËá™Ë°åÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊ†°È™åÈÄªËæë„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÊåâÂêçÁß∞Ê≥®ÂÜåÁ±ª","content":" Êåâ id Ê≥®ÂÜåÁ±ªÊÄßËÉΩÂíå‰ΩìÁßØÊõ¥‰ºòÔºå‰ΩÜÂ¶ÇÈúÄÁÆ°ÁêÜÂ§ßÈáèÁ±ªÂûã idÔºåÂèØÁî® register(Class&lt;?&gt; cls, String namespace, String typeName) ÊåâÂêçÁß∞Ê≥®ÂÜåÔºö  fory.register(Foo.class, &quot;demo&quot;, &quot;Foo&quot;);   Â¶ÇÊó†ÈáçÂêçÔºånamespace ÂèØ‰∏∫Á©∫‰ª•ÂáèÂ∞ë‰ΩìÁßØ„ÄÇ  ‰∏çÂª∫ËÆÆÁî®ÂêçÁß∞Ê≥®ÂÜåÔºåÂõ†Â∫èÂàóÂåñ‰ΩìÁßØ‰ºöÊòæËëóÂ¢ûÂä†„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Èõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÈõ∂Êã∑Ë¥ùÂ∫èÂàóÂåñÔºåÂèØÈ´òÊïàÂ§ÑÁêÜÂ§ßÂØπË±°ÊàñÁõ¥Êé•ÂÜÖÂ≠òÁºìÂÜ≤Âå∫„ÄÇÁ§∫‰æãÔºö  import org.apache.fory.*; import org.apache.fory.config.*; import org.apache.fory.serializer.BufferObject; import org.apache.fory.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Ê≥®ÊÑèÔºöFory ÂÆû‰æãÂ∫îÂ§çÁî®Ôºå‰∏çË¶ÅÊØèÊ¨°Êñ∞Âª∫ static Fory fory = Fory.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fory.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fory.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fory.deserialize(bytes, buffers)); } }   ","version":"0.12","tagName":"h3"},{"title":"ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºàMeta SharingÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂÖÉÊï∞ÊçÆÂÖ±‰∫´meta-sharing","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂú®Âêå‰∏Ä‰∏ä‰∏ãÊñáÔºàÂ¶Ç TCP ËøûÊé•ÔºâÂÜÖÂÖ±‰∫´Á±ªÂûãÂÖÉÊï∞ÊçÆÔºàÁ±ªÂêç„ÄÅÂ≠óÊÆµÂêç„ÄÅÊúÄÁªàÂ≠óÊÆµÁ±ªÂûãÁ≠âÔºâ„ÄÇÈ¶ñÊ¨°Â∫èÂàóÂåñÊó∂ÂÖÉÊï∞ÊçÆ‰ºöÂèëÈÄÅÂà∞ÂØπÁ´ØÔºåÂØπÁ´ØÂèØÂü∫‰∫éÂÖÉÊï∞ÊçÆÈáçÂª∫ÂèçÂ∫èÂàóÂåñÂô®ÔºåÂêéÁª≠Â∫èÂàóÂåñÊó†ÈúÄÈáçÂ§ç‰º†ËæìÂÖÉÊï∞ÊçÆÔºå‰ªéËÄåÂáèÂ∞ëÁΩëÁªúÊµÅÈáèÂπ∂Ëá™Âä®ÊîØÊåÅÁ±ªÂûãÂâçÂêë/ÂêéÂêëÂÖºÂÆπ„ÄÇ  // Fory.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // Ë∑®Â∫èÂàóÂåñÂÖ±‰∫´ÂÖÉÊï∞ÊçÆ // .withMetaContextShare(true) // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); byte[] bytes = fory.serialize(o); // ÈùûÁ∫øÁ®ãÂÆâÂÖ® Fory MetaContext context = xxx; fory.getSerializationContext().setMetaContext(context); fory.deserialize(bytes); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); byte[] serialized = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // Á∫øÁ®ãÂÆâÂÖ® Fory fory.setClassLoader(beanA.getClass().getClassLoader()); Object newObj = fory.execute( f -&gt; { f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"0.12","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂèçÂ∫èÂàóÂåñ‰∏çÂ≠òÂú®ÁöÑÁ±ª„ÄÇÈÄöËøá ForyBuilder#deserializeNonexistentClass(true) ÂêØÁî®„ÄÇÂΩìÂêØÁî®‰∏îÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÂºÄÂêØÊó∂ÔºåFory ‰ºöÂ∞ÜËØ•Á±ªÂûãÁöÑÊï∞ÊçÆÂ≠òÂÇ®‰∏∫ Map ÁöÑÊÉ∞ÊÄßÂ≠êÁ±ªÔºåÈÅøÂÖçÂèçÂ∫èÂàóÂåñÊó∂Â°´ÂÖÖ Map ÁöÑÈáçÊéíÂºÄÈîÄÔºåÊèêÂçáÊÄßËÉΩ„ÄÇÂ¶ÇÊûúÊï∞ÊçÆË¢´ÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™ËøõÁ®ã‰∏îËØ•Á±ªÂ≠òÂú®ÔºåÂàôÂèØÊó†ÊçüËøòÂéü‰∏∫ÂéüÁ±ªÂûãÂØπË±°„ÄÇ  Ëã•Êú™ÂêØÁî®ÂÖÉÊï∞ÊçÆÂÖ±‰∫´ÔºåÂàôÊñ∞Á±ªÊï∞ÊçÆ‰ºöË¢´Ë∑≥ËøáÔºåËøîÂõû NonexistentSkipClass Âç†‰ΩçÂØπË±°„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"Á±ªÂûãÊò†Â∞ÑÔºàË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ù/Êò†Â∞ÑÔºâ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Á±ªÂûãÊò†Â∞ÑË∑®Á±ªÂûãÊ∑±Êã∑Ë¥ùÊò†Â∞Ñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™Á±ªÂûãÁöÑÂØπË±°Ê∑±Êã∑Ë¥ù/Êò†Â∞Ñ‰∏∫Âè¶‰∏Ä‰∏™Á±ªÂûã„ÄÇÊ≥®ÊÑè‰∫ãÈ°πÔºö  ËØ•Êò†Â∞Ñ‰ºöÊâßË°åÊ∑±Êã∑Ë¥ùÔºåÊâÄÊúâÊò†Â∞ÑÂ≠óÊÆµ‰ºöÂÖàÂ∫èÂàóÂåñ‰∏∫‰∫åËøõÂà∂ÔºåÂÜçÂèçÂ∫èÂàóÂåñ‰∏∫ÁõÆÊ†áÁ±ªÂûã„ÄÇÊâÄÊúâÁªìÊûÑ‰ΩìÁ±ªÂûãÂøÖÈ°ªÁî®Áõ∏Âêå ID Ê≥®ÂÜåÔºåÂê¶ÂàôÊó†Ê≥ïÊ≠£Á°ÆÊò†Â∞Ñ„ÄÇÂä°ÂøÖ‰øùËØÅÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÁ´ØÊ≥®ÂÜåÈ°∫Â∫è‰∏ÄËá¥„ÄÇ  Á§∫‰æãÔºö  public class StructMappingExample { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory1 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static ThreadSafeFory fory2 = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); static { fory1.register(Struct1.class); fory2.register(Struct2.class); } public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1)); Assert.assertEquals(struct2.f1, struct1.f1); Assert.assertEquals(struct2.f2, struct1.f2); struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2)); Assert.assertEquals(struct1.f1, struct2.f1); Assert.assertEquals(struct1.f2, struct2.f2); } }   ","version":"0.12","tagName":"h3"},{"title":"ËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ËøÅÁßª","content":" ","version":"0.12","tagName":"h2"},{"title":"JDK Â∫èÂàóÂåñËøÅÁßª‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#jdk-Â∫èÂàóÂåñËøÅÁßª","content":" Â¶ÇÊûú‰πãÂâç‰ΩøÁî® JDK Â∫èÂàóÂåñÔºå‰∏îÊó†Ê≥ïÂêåÊó∂ÂçáÁ∫ßÂÆ¢Êà∑Á´ØÂíåÊúçÂä°Á´ØÔºàÂ¶ÇÁ∫ø‰∏äÂ∫îÁî®Â∏∏ËßÅÂú∫ÊôØÔºâÔºåFory Êèê‰æõ org.apache.fory.serializer.JavaSerializer.serializedByJDK Â∑•ÂÖ∑ÊñπÊ≥ïÂà§Êñ≠‰∫åËøõÂà∂Êï∞ÊçÆÊòØÂê¶‰∏∫ JDK Â∫èÂàóÂåñÁîüÊàê„ÄÇÂèØÁî®Â¶Ç‰∏ãÊ®°ÂºèÂÆûÁé∞ÂçèËÆÆÂÖºÂÆπÔºåÊîØÊåÅÂºÇÊ≠•ÊªöÂä®ÂçáÁ∫ßÔºö  if (JavaSerializer.serializedByJDK(bytes)) { ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); } else { return fory.deserialize(bytes); }   ","version":"0.12","tagName":"h3"},{"title":"Apache Fory‚Ñ¢ ÁâàÊú¨ÂçáÁ∫ß‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#apache-fory-ÁâàÊú¨ÂçáÁ∫ß","content":" ÁõÆÂâç‰ªÖ‰øùËØÅÂ∞èÁâàÊú¨Èó¥ÁöÑ‰∫åËøõÂà∂ÂÖºÂÆπÊÄß„ÄÇ‰æãÂ¶ÇÔºåfory v0.11.1 ÂçáÁ∫ßÂà∞ v0.11.2 ÂèØÁõ¥Êé•ÂÖºÂÆπÔºåÂçáÁ∫ßÂà∞ v0.12.0 Âàô‰∏ç‰øùËØÅÂÖºÂÆπ„ÄÇÂ§ßÂ§öÊï∞Âú∫ÊôØÊó†ÈúÄÈ¢ëÁπÅÂçáÁ∫ß‰∏ªÁâàÊú¨ÔºåÂΩìÂâçÁâàÊú¨Â∑≤Ë∂≥Â§üÈ´òÊïàÁ¥ßÂáëÔºåËÄÅÁâàÊú¨‰πü‰ºöÊåÅÁª≠Áª¥Êä§ bugfix„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"ÊïÖÈöúÊéíÊü•‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÊïÖÈöúÊéíÊü•","content":" ","version":"0.12","tagName":"h2"},{"title":"Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#Á±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥‰∏éÁâàÊú¨Ê†°È™å","content":" Ëã•Êú™ËÆæÁΩÆ CompatibleMode ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLEÔºåÂá∫Áé∞Â∫èÂàóÂåñÂºÇÂ∏∏ÔºåÂèØËÉΩÊòØÂ∫èÂàóÂåñÁ´ØÂíåÂèçÂ∫èÂàóÂåñÁ´ØÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥„ÄÇ  Ê≠§Êó∂ÂèØÁî® ForyBuilder#withClassVersionCheck ÂàõÂª∫ Fory ËøõË°åÊ†°È™åÔºåËã•ÂèçÂ∫èÂàóÂåñÊäõÂá∫ org.apache.fory.exception.ClassNotCompatibleExceptionÔºåËØ¥ÊòéÁ±ªÁªìÊûÑ‰∏ç‰∏ÄËá¥ÔºåÂ∫îÊîπÁî® ForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE)„ÄÇ  CompatibleMode.COMPATIBLE ‰ºöÂ∏¶Êù•‰∏ÄÂÆöÊÄßËÉΩÂíå‰ΩìÁßØÂºÄÈîÄÔºåËã•Á±ªÁªìÊûÑÂßãÁªà‰∏ÄËá¥Ôºå‰∏çÂª∫ËÆÆÈªòËÆ§ÂºÄÂêØ„ÄÇ  ","version":"0.12","tagName":"h3"},{"title":"POJO Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#pojo-Ë∑®Á±ªÂûãÂèçÂ∫èÂàóÂåñ","content":" Apache Fory‚Ñ¢ ÊîØÊåÅÂ∞Ü‰∏Ä‰∏™ POJO Â∫èÂàóÂåñÂêéÂèçÂ∫èÂàóÂåñ‰∏∫‰∏çÂêåÁªìÊûÑÁöÑ POJO„ÄÇÊ≠§Êó∂ÈúÄÂ∞Ü CompatibleMode ËÆæ‰∏∫ org.apache.fory.config.CompatibleMode.COMPATIBLE„ÄÇ  public class DeserializeIntoType { static class Struct1 { int f1; String f2; public Struct1(int f1, String f2) { this.f1 = f1; this.f2 = f2; } } static class Struct2 { int f1; String f2; double f3; } static ThreadSafeFory fory = Fory.builder() .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory(); public static void main(String[] args) { Struct1 struct1 = new Struct1(10, &quot;abc&quot;); byte[] data = fory.serializeJavaObject(struct1); Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class); } }   ","version":"0.12","tagName":"h3"},{"title":"ÂèçÂ∫èÂàóÂåñ API ‰ΩøÁî®ÈîôËØØ‚Äã","type":1,"pageTitle":"Java Â∫èÂàóÂåñ","url":"/zh-CN/docs/guide/java_object_graph_guide#ÂèçÂ∫èÂàóÂåñ-api-‰ΩøÁî®ÈîôËØØ","content":" Áî® Fory#serialize Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserialize ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObject„ÄÇÁî® Fory#serializeJavaObject Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObject ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî® Fory#deserializeJavaObjectAndClass Êàñ Fory#deserialize„ÄÇÁî® Fory#serializeJavaObjectAndClass Â∫èÂàóÂåñÁöÑÂØπË±°ÔºåÈúÄÁî® Fory#deserializeJavaObjectAndClass ÂèçÂ∫èÂàóÂåñÔºå‰∏çËÉΩÁî®ÂÖ∂‰ªñ API„ÄÇ ","version":"0.12","tagName":"h3"}],"options":{"id":"default"}}