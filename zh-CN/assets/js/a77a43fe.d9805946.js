"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[7434],{78477:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>n,metadata:()=>t,toc:()=>d});var s=a(85893),l=a(11151);const n={title:"Scala Serialization Guide",sidebar_position:4,id:"scala_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},r=void 0,t={id:"guide/scala_guide",title:"Scala Serialization Guide",description:"Fory supports all scala object serialization:",source:"@site/versioned_docs/version-0.12.0/guide/scala_guide.md",sourceDirName:"guide",slug:"/guide/scala_guide",permalink:"/zh-CN/docs/0.12.0/guide/scala_guide",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/i18n/zh-CN/docusaurus-plugin-content-docs/version-0.12.0/guide/scala_guide.md",tags:[],version:"0.12.0",sidebarPosition:4,frontMatter:{title:"Scala Serialization Guide",sidebar_position:4,id:"scala_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'}},o={},d=[{value:"Install",id:"install",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Fory creation",id:"fory-creation",level:2},{value:"Serialize case class",id:"serialize-case-class",level:2},{value:"Serialize pojo",id:"serialize-pojo",level:2},{value:"Serialize object singleton",id:"serialize-object-singleton",level:2},{value:"Serialize collection",id:"serialize-collection",level:2},{value:"Serialize Tuple",id:"serialize-tuple",level:2},{value:"Serialize Enum",id:"serialize-enum",level:2},{value:"Scala3 Enum",id:"scala3-enum",level:3},{value:"Scala2 Enum",id:"scala2-enum",level:3},{value:"Serialize Option",id:"serialize-option",level:2},{value:"Scala Class Default Values Support",id:"scala-class-default-values-support",level:2},{value:"Overview",id:"overview",level:3},{value:"Supported Class Types",id:"supported-class-types",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:3},{value:"Case Class with Default Values",id:"case-class-with-default-values",level:4},{value:"Regular Scala Class with Default Values",id:"regular-scala-class-with-default-values",level:4},{value:"Complex Default Values",id:"complex-default-values",level:4},{value:"Nested Case Classes",id:"nested-case-classes",level:4}];function c(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"Fory supports all scala object serialization:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"case"})," class serialization supported"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"pojo/bean"})," class serialization supported"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"object"})," singleton serialization supported"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"collection"})," serialization supported"]}),"\n",(0,s.jsxs)(i.li,{children:["other types such as ",(0,s.jsx)(i.code,{children:"tuple/either"})," and basic types are all supported too."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Scala 2 and 3 are both supported."}),"\n",(0,s.jsx)(i.h2,{id:"install",children:"Install"}),"\n",(0,s.jsx)(i.p,{children:"To add a dependency on Fory scala for with sbt, use the following:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sbt",children:'libraryDependencies += "org.apache.fory" %% "fory-scala" % "0.12.0"\n'})}),"\n",(0,s.jsx)(i.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'case class Person(name: String, id: Long, github: String)\ncase class Point(x : Int, y : Int, z : Int)\n\nobject ScalaExample {\n  val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build()\n  // Register optimized fory serializers for scala\n  ScalaSerializers.registerSerializers(fory)\n  fory.register(classOf[Person])\n  fory.register(classOf[Point])\n\n  def main(args: Array[String]): Unit = {\n    val p = Person("Shawn Yang", 1, "https://github.com/chaokunyang")\n    println(fory.deserialize(fory.serialize(p)))\n    println(fory.deserialize(fory.serialize(Point(1, 2, 3))))\n  }\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"fory-creation",children:"Fory creation"}),"\n",(0,s.jsx)(i.p,{children:"When using fory for scala serialization, you should create fory at least with following options:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:"import org.apache.fory.Fory\nimport org.apache.fory.serializer.scala.ScalaSerializers\n\nval fory = Fory.builder().withScalaOptimizationEnabled(true).build()\n\n// Register optimized fory serializers for scala\nScalaSerializers.registerSerializers(fory)\n"})}),"\n",(0,s.jsx)(i.p,{children:"Depending on the object types you serialize, you may need to register some scala internal types:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'fory.register(Class.forName("scala.Enumeration.Val"))\n'})}),"\n",(0,s.jsxs)(i.p,{children:["If you want to avoid such registration, you can disable class registration by ",(0,s.jsx)(i.code,{children:"ForyBuilder#requireClassRegistration(false)"}),".\nNote that this option allow to deserialize objects unknown types, more flexible but may be insecure if the classes contains malicious code."]}),"\n",(0,s.jsxs)(i.p,{children:["And circular references are common in scala, ",(0,s.jsx)(i.code,{children:"Reference tracking"})," should be enabled by ",(0,s.jsx)(i.code,{children:"ForyBuilder#withRefTracking(true)"}),". If you don't enable reference tracking, ",(0,s.jsx)(i.a,{href:"https://github.com/apache/fory/issues/1032",children:"StackOverflowError"})," may happen for some scala versions when serializing scala Enumeration."]}),"\n",(0,s.jsx)(i.p,{children:"Note that fory instance should be shared between multiple serialization, the creation of fory instance is not cheap."}),"\n",(0,s.jsxs)(i.p,{children:["If you use shared fory instance across multiple threads, you should create ",(0,s.jsx)(i.code,{children:"ThreadSafeFory"})," instead by ",(0,s.jsx)(i.code,{children:"ForyBuilder#buildThreadSafeFory()"})," instead."]}),"\n",(0,s.jsx)(i.h2,{id:"serialize-case-class",children:"Serialize case class"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'case class Person(github: String, age: Int, id: Long)\nval p = Person("https://github.com/chaokunyang", 18, 1)\nprintln(fory.deserialize(fory.serialize(p)))\nprintln(fory.deserializeJavaObject(fory.serializeJavaObject(p)))\n'})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-pojo",children:"Serialize pojo"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'class Foo(f1: Int, f2: String) {\n  override def toString: String = s"Foo($f1, $f2)"\n}\nprintln(fory.deserialize(fory.serialize(Foo(1, "chaokunyang"))))\n'})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-object-singleton",children:"Serialize object singleton"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:"object singleton {\n}\nval o1 = fory.deserialize(fory.serialize(singleton))\nval o2 = fory.deserialize(fory.serialize(singleton))\nprintln(o1 == o2)\n"})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-collection",children:"Serialize collection"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'val seq = Seq(1,2)\nval list = List("a", "b")\nval map = Map("a" -> 1, "b" -> 2)\nprintln(fory.deserialize(fory.serialize(seq)))\nprintln(fory.deserialize(fory.serialize(list)))\nprintln(fory.deserialize(fory.serialize(map)))\n'})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-tuple",children:"Serialize Tuple"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'val tuple = (100, 10000L) //Tuple2\nprintln(fory.deserialize(fory.serialize(tuple)))\nval tuple = (100, 10000L, 10000L, "str") //Tuple4\nprintln(fory.deserialize(fory.serialize(tuple)))\n'})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-enum",children:"Serialize Enum"}),"\n",(0,s.jsx)(i.h3,{id:"scala3-enum",children:"Scala3 Enum"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:"enum Color { case Red, Green, Blue }\nprintln(fory.deserialize(fory.serialize(Color.Green)))\n"})}),"\n",(0,s.jsx)(i.h3,{id:"scala2-enum",children:"Scala2 Enum"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:"object ColorEnum extends Enumeration {\n  type ColorEnum = Value\n  val Red, Green, Blue = Value\n}\nprintln(fory.deserialize(fory.serialize(ColorEnum.Green)))\n"})}),"\n",(0,s.jsx)(i.h2,{id:"serialize-option",children:"Serialize Option"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:"val opt: Option[Long] = Some(100)\nprintln(fory.deserialize(fory.serialize(opt)))\nval opt1: Option[Long] = None\nprintln(fory.deserialize(fory.serialize(opt1)))\n"})}),"\n",(0,s.jsx)(i.h2,{id:"scala-class-default-values-support",children:"Scala Class Default Values Support"}),"\n",(0,s.jsx)(i.p,{children:"Fory supports Scala class default values during deserialization when using compatible mode. This feature enables forward/backward compatibility when case classes or regular Scala classes have default parameters."}),"\n",(0,s.jsx)(i.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(i.p,{children:["When a Scala class has default parameters, the Scala compiler generates methods in the companion object (for case classes) or in the class itself (for regular Scala classes) like ",(0,s.jsx)(i.code,{children:"apply$default$1"}),", ",(0,s.jsx)(i.code,{children:"apply$default$2"}),", etc. that return the default values. Fory can detect these methods and use them when deserializing objects where certain fields are missing from the serialized data."]}),"\n",(0,s.jsx)(i.h3,{id:"supported-class-types",children:"Supported Class Types"}),"\n",(0,s.jsx)(i.p,{children:"Fory supports default values for:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Case classes"})," with default parameters"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Regular Scala classes"})," with default parameters in their primary constructor"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Nested case classes"})," with default parameters"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Deeply nested case classes"})," with default parameters"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Detection"}),": Fory detects if a class is a Scala class by checking for the presence of default value methods (",(0,s.jsx)(i.code,{children:"apply$default$N"})," or ",(0,s.jsx)(i.code,{children:"$default$N"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Default Value Discovery"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["For case classes: Fory scans the companion object for methods named ",(0,s.jsx)(i.code,{children:"apply$default$1"}),", ",(0,s.jsx)(i.code,{children:"apply$default$2"}),", etc."]}),"\n",(0,s.jsxs)(i.li,{children:["For regular Scala classes: Fory scans the class itself for methods named ",(0,s.jsx)(i.code,{children:"$default$1"}),", ",(0,s.jsx)(i.code,{children:"$default$2"}),", etc."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Field Mapping"}),": During deserialization, Fory identifies fields that exist in the target class but are missing from the serialized data."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Value Application"}),": After reading all available fields from the serialized data, Fory applies default values to any missing fields using direct field access for optimal performance."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(i.p,{children:"This feature is automatically enabled when:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Compatible mode is enabled (",(0,s.jsx)(i.code,{children:"withCompatibleMode(CompatibleMode.COMPATIBLE)"}),")"]}),"\n",(0,s.jsx)(i.li,{children:"The target class is detected as a Scala class with default values"}),"\n",(0,s.jsx)(i.li,{children:"A field is missing from the serialized data but exists in the target class"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"No additional configuration is required."}),"\n",(0,s.jsx)(i.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(i.h4,{id:"case-class-with-default-values",children:"Case Class with Default Values"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'// Class WITHOUT default values (for serialization)\ncase class PersonNoDefaults(name: String)\n\n// Class WITH default values (for deserialization)\ncase class PersonWithDefaults(name: String, age: Int = 25, city: String = "Unknown")\n\nval fory = Fory.builder()\n  .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  .withScalaOptimizationEnabled(true)\n  .build()\n\n// Serialize using class without default values\nval original = PersonNoDefaults("John")\nval serialized = fory.serialize(original)\n\n// Deserialize into class with default values - missing fields will use defaults\nval deserialized = fory.deserialize(serialized, classOf[PersonWithDefaults])\n// deserialized.name will be "John"\n// deserialized.age will be 25 (default)\n// deserialized.city will be "Unknown" (default)\n'})}),"\n",(0,s.jsx)(i.h4,{id:"regular-scala-class-with-default-values",children:"Regular Scala Class with Default Values"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'// Class WITHOUT default values (for serialization)\nclass EmployeeNoDefaults(val name: String)\n\n// Class WITH default values (for deserialization)\nclass EmployeeWithDefaults(val name: String, val age: Int = 30, val department: String = "Engineering")\n\nval fory = Fory.builder()\n  .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  .withScalaOptimizationEnabled(true)\n  .build()\n\n// Serialize using class without default values\nval original = new EmployeeNoDefaults("Jane")\nval serialized = fory.serialize(original)\n\n// Deserialize into class with default values - missing fields will use defaults\nval deserialized = fory.deserialize(serialized, classOf[EmployeeWithDefaults])\n// deserialized.name will be "Jane"\n// deserialized.age will be 30 (default)\n// deserialized.department will be "Engineering" (default)\n'})}),"\n",(0,s.jsx)(i.h4,{id:"complex-default-values",children:"Complex Default Values"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'// Class WITHOUT default values (for serialization)\ncase class ConfigurationNoDefaults(name: String)\n\n// Class WITH default values (for deserialization)\ncase class ConfigurationWithDefaults(\n  name: String,\n  settings: Map[String, String] = Map("default" -> "value"),\n  tags: List[String] = List("default"),\n  enabled: Boolean = true\n)\n\nval fory = Fory.builder()\n  .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  .withScalaOptimizationEnabled(true)\n  .build()\n\n// Serialize using class without default values\nval original = ConfigurationNoDefaults("myConfig")\nval serialized = fory.serialize(original)\n\n// Deserialize into class with default values - missing fields will use defaults\nval deserialized = fory.deserialize(serialized, classOf[ConfigurationWithDefaults])\n// deserialized.name will be "myConfig"\n// deserialized.settings will be Map("default" -> "value")\n// deserialized.tags will be List("default")\n// deserialized.enabled will be true\n'})}),"\n",(0,s.jsx)(i.h4,{id:"nested-case-classes",children:"Nested Case Classes"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-scala",children:'object NestedClasses {\n  // Class WITHOUT default values (for serialization)\n  case class SimplePerson(name: String)\n\n  // Class WITH default values (for deserialization)\n  case class Address(street: String, city: String = "DefaultCity")\n  case class PersonWithDefaults(name: String, address: Address = Address("DefaultStreet"))\n}\n\nval fory = Fory.builder()\n  .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  .withScalaOptimizationEnabled(true)\n  .build()\n\n// Serialize using class without default values\nval original = NestedClasses.SimplePerson("Alice")\nval serialized = fory.serialize(original)\n\n// Deserialize into class with default values - missing address field will use default\nval deserialized = fory.deserialize(serialized, classOf[NestedClasses.PersonWithDefaults])\n// deserialized.name will be "Alice"\n// deserialized.address will be Address("DefaultStreet", "DefaultCity")\n'})})]})}function u(e={}){const{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,i,a)=>{a.d(i,{Z:()=>t,a:()=>r});var s=a(67294);const l={},n=s.createContext(l);function r(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);