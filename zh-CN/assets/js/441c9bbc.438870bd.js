"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[2236],{5172:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var o=r(85893),i=r(11151);const a={title:"\u884c\u5b58\u683c\u5f0f",sidebar_position:1,id:"row_format_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},t=void 0,c={id:"docs/guide/row_format_guide",title:"\u884c\u5b58\u683c\u5f0f",description:"Java",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/docs/guide/row_format_guide.md",sourceDirName:"docs/guide",slug:"/docs/guide/row_format_guide",permalink:"/zh-CN/docs/next/docs/guide/row_format_guide",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/i18n/zh-CN/docusaurus-plugin-content-docs/current/docs/guide/row_format_guide.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"\u884c\u5b58\u683c\u5f0f",sidebar_position:1,id:"row_format_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},sidebar:"docsSidebar",previous:{title:"Python Serialization",permalink:"/zh-CN/docs/next/docs/guide/python_serialization"},next:{title:"Rust Serialization",permalink:"/zh-CN/docs/next/docs/guide/rust_serialization"}},s={},d=[{value:"Java",id:"java",level:2},{value:"Python",id:"python",level:2},{value:"Apache Arrow \u652f\u6301",id:"apache-arrow-\u652f\u6301",level:3},{value:"\u652f\u6301\u63a5\u53e3\u4e0e\u7ee7\u627f\u7c7b\u578b",id:"\u652f\u6301\u63a5\u53e3\u4e0e\u7ee7\u627f\u7c7b\u578b",level:2},{value:"\u793a\u4f8b\uff1a\u63a5\u53e3\u7c7b\u578b\u7684 RowEncoder \u6620\u5c04",id:"\u793a\u4f8b\u63a5\u53e3\u7c7b\u578b\u7684-rowencoder-\u6620\u5c04",level:3},{value:"\u793a\u4f8b\uff1a\u7ee7\u627f\u7c7b\u578b\u7684 RowEncoder \u6620\u5c04",id:"\u793a\u4f8b\u7ee7\u627f\u7c7b\u578b\u7684-rowencoder-\u6620\u5c04",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"java",children:"Java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class Bar {\n  String f1;\n  List<Long> f2;\n}\n\npublic class Foo {\n  int f1;\n  List<Integer> f2;\n  Map<String, Integer> f3;\n  List<Bar> f4;\n}\n\nRowEncoder<Foo> encoder = Encoders.bean(Foo.class);\nFoo foo = new Foo();\nfoo.f1 = 10;\nfoo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());\nfoo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -> "k"+i, i->i));\nList<Bar> bars = new ArrayList<>(1000000);\nfor (int i = 0; i < 1000000; i++) {\n  Bar bar = new Bar();\n  bar.f1 = "s"+i;\n  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());\n  bars.add(bar);\n}\nfoo.f4 = bars;\n// \u53ef\u88ab python \u96f6\u62f7\u8d1d\u8bfb\u53d6\nBinaryRow binaryRow = encoder.toRow(foo);\n// \u4e5f\u53ef\u4ee5\u662f python \u751f\u6210\u7684\u6570\u636e\nFoo newFoo = encoder.fromRow(binaryRow);\n// \u96f6\u62f7\u8d1d\u8bfb\u53d6 List<Integer> f2\nBinaryArray binaryArray2 = binaryRow.getArray(1);\n// \u96f6\u62f7\u8d1d\u8bfb\u53d6 List<Bar> f4\nBinaryArray binaryArray4 = binaryRow.getArray(3);\n// \u96f6\u62f7\u8d1d\u8bfb\u53d6 `readList<Bar> f4` \u7684\u7b2c 11 \u4e2a\u5143\u7d20\nBinaryRow barStruct = binaryArray4.getStruct(10);\n\n// \u96f6\u62f7\u8d1d\u8bfb\u53d6 `readList<Bar> f4` \u7b2c 11 \u4e2a\u5143\u7d20\u7684 f2 \u7684\u7b2c 6 \u4e2a\u5143\u7d20\nbarStruct.getArray(1).getInt64(5);\nRowEncoder<Bar> barEncoder = Encoders.bean(Bar.class);\n// \u53ea\u53cd\u5e8f\u5217\u5316\u90e8\u5206\u6570\u636e\nBar newBar = barEncoder.fromRow(barStruct);\nBar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));\n'})}),"\n",(0,o.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass Bar:\n    f1: str\n    f2: List[pa.int64]\n@dataclass\nclass Foo:\n    f1: pa.int32\n    f2: List[pa.int32]\n    f3: Dict[str, pa.int32]\n    f4: List[Bar]\n\nencoder = pyfory.encoder(Foo)\nfoo = Foo(f1=10, f2=list(range(1000_000)),\n         f3={f"k{i}": i for i in range(1000_000)},\n         f4=[Bar(f1=f"s{i}", f2=list(range(10))) for i in range(1000_000)])\nbinary: bytes = encoder.to_row(foo).to_bytes()\nprint(f"start: {datetime.datetime.now()}")\nfoo_row = pyfory.RowData(encoder.schema, binary)\nprint(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5])\nprint(f"end: {datetime.datetime.now()}")\n\nbinary = pickle.dumps(foo)\nprint(f"pickle start: {datetime.datetime.now()}")\nnew_foo = pickle.loads(binary)\nprint(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5])\nprint(f"pickle end: {datetime.datetime.now()}")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"apache-arrow-\u652f\u6301",children:"Apache Arrow \u652f\u6301"}),"\n",(0,o.jsx)(n.p,{children:"Fory Format \u4e5f\u652f\u6301\u4e0e Arrow Table/RecordBatch \u7684\u81ea\u52a8\u8f6c\u6362\u3002"}),"\n",(0,o.jsx)(n.p,{children:"Java \u793a\u4f8b\uff1a"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"Schema schema = TypeInference.inferSchema(BeanA.class);\nArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema);\nEncoder<BeanA> encoder = Encoders.rowEncoder(BeanA.class);\nfor (int i = 0; i < 10; i++) {\n  BeanA beanA = BeanA.createBeanA(2);\n  arrowWriter.write(encoder.toRow(beanA));\n}\nreturn arrowWriter.finishAsRecordBatch();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\u652f\u6301\u63a5\u53e3\u4e0e\u7ee7\u627f\u7c7b\u578b",children:"\u652f\u6301\u63a5\u53e3\u4e0e\u7ee7\u627f\u7c7b\u578b"}),"\n",(0,o.jsxs)(n.p,{children:["Fury \u73b0\u5df2\u652f\u6301 Java ",(0,o.jsx)(n.code,{children:"interface"})," \u7c7b\u578b\u548c\u5b50\u7c7b\uff08",(0,o.jsx)(n.code,{children:"extends"}),"\uff09\u7c7b\u578b\u7684\u884c\u683c\u5f0f\u6620\u5c04\uff0c\u5e26\u6765\u66f4\u52a8\u6001\u548c\u7075\u6d3b\u7684\u6570\u636e schema\u3002"]}),"\n",(0,o.jsxs)(n.p,{children:["\u76f8\u5173\u589e\u5f3a\u89c1 ",(0,o.jsx)(n.a,{href:"https://github.com/apache/fury/pull/2243",children:"#2243"}),"\u3001",(0,o.jsx)(n.a,{href:"https://github.com/apache/fury/pull/2250",children:"#2250"}),"\u3001",(0,o.jsx)(n.a,{href:"https://github.com/apache/fury/pull/2256",children:"#2256"}),"\u3002"]}),"\n",(0,o.jsx)(n.h3,{id:"\u793a\u4f8b\u63a5\u53e3\u7c7b\u578b\u7684-rowencoder-\u6620\u5c04",children:"\u793a\u4f8b\uff1a\u63a5\u53e3\u7c7b\u578b\u7684 RowEncoder \u6620\u5c04"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public interface Animal {\n  String speak();\n}\n\npublic class Dog implements Animal {\n  public String name;\n\n  @Override\n  public String speak() {\n    return "Woof";\n  }\n}\n\n// \u4f7f\u7528 RowEncoder \u4ee5\u63a5\u53e3\u7c7b\u578b\u7f16\u7801\u548c\u89e3\u7801\nRowEncoder<Animal> encoder = Encoders.bean(Animal.class);\nDog dog = new Dog();\ndog.name = "Bingo";\nBinaryRow row = encoder.toRow(dog);\nAnimal decoded = encoder.fromRow(row);\nSystem.out.println(decoded.speak()); // Woof\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\u793a\u4f8b\u7ee7\u627f\u7c7b\u578b\u7684-rowencoder-\u6620\u5c04",children:"\u793a\u4f8b\uff1a\u7ee7\u627f\u7c7b\u578b\u7684 RowEncoder \u6620\u5c04"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class Parent {\n    public String parentField;\n}\n\npublic class Child extends Parent {\n    public String childField;\n}\n\n// \u4f7f\u7528 RowEncoder \u4ee5\u7236\u7c7b\u7c7b\u578b\u7f16\u7801\u548c\u89e3\u7801\nRowEncoder<Parent> encoder = Encoders.bean(Parent.class);\nChild child = new Child();\nchild.parentField = "Hello";\nchild.childField = "World";\nBinaryRow row = encoder.toRow(child);\nParent decoded = encoder.fromRow(row);\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Python \u793a\u4f8b\uff1a"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import pyfory\nencoder = pyfory.encoder(Foo)\nencoder.to_arrow_record_batch([foo] * 10000)\nencoder.to_arrow_table([foo] * 10000)\n"})}),"\n",(0,o.jsx)(n.p,{children:"C++ \u793a\u4f8b\uff1a"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c++",children:"std::shared_ptr<ArrowWriter> arrow_writer;\nEXPECT_TRUE(\n    ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &arrow_writer)\n        .ok());\nfor (auto &row : rows) {\n  EXPECT_TRUE(arrow_writer->Write(row).ok());\n}\nstd::shared_ptr<::arrow::RecordBatch> record_batch;\nEXPECT_TRUE(arrow_writer->Finish(&record_batch).ok());\nEXPECT_TRUE(record_batch->Validate().ok());\nEXPECT_EQ(record_batch->num_columns(), schema->num_fields());\nEXPECT_EQ(record_batch->num_rows(), row_nums);\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"Schema schema = TypeInference.inferSchema(BeanA.class);\nArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema);\nEncoder<BeanA> encoder = Encoders.rowEncoder(BeanA.class);\nfor (int i = 0; i < 10; i++) {\n  BeanA beanA = BeanA.createBeanA(2);\n  arrowWriter.write(encoder.toRow(beanA));\n}\nreturn arrowWriter.finishAsRecordBatch();\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>t});var o=r(67294);const i={},a=o.createContext(i);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);