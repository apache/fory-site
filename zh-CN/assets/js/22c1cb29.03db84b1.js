"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[7500],{31254:(e,a,r)=>{r.d(a,{AI:()=>i,Gj:()=>n,NN:()=>s,VZ:()=>o,of:()=>t});const n="Copied!",t="Failed to copy!",s=2e3,i={java:{label:"Java",code:"import java.util.List;\nimport java.util.Arrays;\nimport org.apache.fory.*;\n\npublic class Example {\n  // Note that Fory instances should be reused between\n  // multiple serializations of different objects.\n  static ThreadSafeFory fory = Fory.builder().withLanguage(Language.JAVA)\n    // Allow to deserialize objects unknown types,\n    // more flexible but less secure.\n    // .requireClassRegistration(false)\n    .buildThreadSafeFory();\n\n  static {\n    // Registering types can reduce class name serialization\n    // overhead but not mandatory.\n    // If secure mode enabled\n    //all custom types must be registered.\n    fory.register(SomeClass.class);\n  }\n\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    byte[] bytes = fory.serialize(object);\n    System.out.println(fory.deserialize(bytes));\n  }\n}"},kotlin:{label:"Kotlin",code:'import org.apache.fory.Fory\nimport org.apache.fory.ThreadSafeFory\nimport org.apache.fory.serializer.kotlin.KotlinSerializers\n\ndata class Person(val name: String, val id: Long, val github: String)\ndata class Point(val x : Int, val y : Int, val z : Int)\n\nfun main(args: Array<String>) {\n    // Note: following fory init code should be executed only once in a global scope instead\n    // of initializing it everytime when serialization.\n    val fory: ThreadSafeFory = Fory.builder().requireClassRegistration(true).buildThreadSafeFory()\n    KotlinSerializers.registerSerializers(fory)\n    fory.register(Person::class.java)\n    fory.register(Point::class.java)\n\n    val p = Person("Shawn Yang", 1, "https://github.com/chaokunyang")\n    println(fory.deserialize(fory.serialize(p)))\n    println(fory.deserialize(fory.serialize(Point(1, 2, 3))))\n}'},scala:{label:"Scala",code:'case class Person(name: String, id: Long, github: String)\ncase class Point(x : Int, y : Int, z : Int)\n\nobject ScalaExample {\n  val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build()\n  // Register optimized fory serializers for scala\n  ScalaSerializers.registerSerializers(fory)\n  fory.register(classOf[Person])\n  fory.register(classOf[Point])\n\n  def main(args: Array[String]): Unit = {\n    val p = Person("Shawn Yang", 1, "https://github.com/chaokunyang")\n    println(fory.deserialize(fory.serialize(p)))\n    println(fory.deserialize(fory.serialize(Point(1, 2, 3))))\n  }\n}'},rust:{label:"Rust",code:'use fory::{Fory, Error};\nuse fory::ForyObject;\n\n#[derive(ForyObject, Debug, PartialEq)]\nstruct User {\n\tname: String,\n\tage: i32,\n\temail: String,\n}\n\nfn main() -> Result<(), Error> {\n\tlet mut fory = Fory::default();\n\tfory.register::<User>(1)?;\n\n\tlet user = User { name: "Alice".into(), age: 30, email: "alice@example.com".into() };\n\tlet bytes = fory.serialize(&user)?;\n\tlet decoded: User = fory.deserialize(&bytes)?;\n\tassert_eq!(user, decoded);\n\tOk(())\n}'},python:{label:"Python",code:'import pyfory\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    scores: List[int]\n    metadata: Dict[str, str]\n\n# Python mode - supports all Python types including dataclasses\nfory = pyfory.Fory(xlang=False, ref=True)\nfory.register(Person)\nperson = Person("Bob", 25, [88, 92, 85], {"team": "engineering"})\ndata = fory.serialize(person)\nresult = fory.deserialize(data)\nprint(result)  # Person(name=\'Bob\', age=25, ...)'}},o=[{key:"java",src:"/home/java.svg",label:"Java"},{key:"python",src:"/home/python.svg",label:"Python"},{key:"golang",src:"/home/golang.svg",label:"Golang"},{key:"javascript",src:"/home/JavaScript.svg",label:"JavaScript"},{key:"rust",src:"/home/Rust.svg",label:"Rust"},{key:"more",src:"/home/more.svg",label:"More"}]},43661:(e,a,r)=>{r.r(a),r.d(a,{default:()=>l});var n=r(67294),t=r(44996),s=r(31254);const i={languageCard:"languageCard_un5a"};var o=r(85893);function l(){const[e,a]=(0,n.useState)("en-US"),[r,l]=(0,n.useState)([]),c=s.VZ.map((e=>({...e,src:(0,t.Z)(e.src)})));(0,n.useEffect)((()=>{"undefined"!=typeof navigator&&a(navigator.language||"en-US"),l(c)}),[]);return(0,o.jsxs)("div",{className:"text-center p-8",children:[(0,o.jsx)("h2",{className:"text-3xl font-bold mb-4 dark:text-white",children:"Quick Start!"}),(0,o.jsx)("p",{className:"text-lg mb-8 text-gray-600 dark:text-gray-400",children:"Choose a language to get started."}),(0,o.jsx)("div",{className:"max-w-4xl mx-auto",children:(0,o.jsx)("div",{className:"grid md:grid-cols-3 sm:grid-cols-1 gap-6",children:r.map((({key:a,src:r,label:n})=>(0,o.jsxs)("div",{className:i.languageCard,onClick:()=>{return window.location.href=(r="java"===a?"java-serialization":"more"===a?"cross-language-serialization":a,`${e.startsWith("zh-CN")?"https://fory.apache.org/zh-CN/docs/docs/start/usage/#":"https://fory.apache.org/docs/docs/start/usage/#"}${r}`);var r},children:[(0,o.jsx)("img",{src:r,className:"w-16 h-16 mb-4",alt:`${n} logo`}),(0,o.jsx)("span",{className:"text-xl font-semibold",children:n})]},a)))})})]})}}}]);