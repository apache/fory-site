"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[611],{29754:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>a});var s=r(85893),i=r(11151);const t={},l="Introducing Apache Fory\u2122 Rust: A Versatile Serialization Framework for the Modern Age",d={permalink:"/zh-CN/blog/2025/10/29/fory_rust_versatile_serialization_framework",editUrl:"https://github.com/apache/fory-site/tree/main/i18n/zh-CN/docusaurus-plugin-content-blog/2025-10-29-fory_rust_versatile_serialization_framework.md",source:"@site/i18n/zh-CN/docusaurus-plugin-content-blog/2025-10-29-fory_rust_versatile_serialization_framework.md",title:"Introducing Apache Fory\u2122 Rust: A Versatile Serialization Framework for the Modern Age",description:"TL;DR: Apache Fory Rust is a blazingly-fast, cross-language serialization framework that delivers ultra-fast serialization performance while automatically handling circular references, trait objects, and schema evolution. Built with Rust's safety guarantees and zero-copy techniques, it's designed for developers who refuse to compromise between performance and developer experience.",date:"2025-10-29T00:00:00.000Z",formattedDate:"2025\u5e7410\u670829\u65e5",tags:[],readingTime:11.5,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,nextItem:{title:"Fory v0.13.0 Released",permalink:"/zh-CN/blog/fory_0_13_0_release"}},c={authorsImageUrls:[]},a=[{value:"The Serialization Dilemma",id:"the-serialization-dilemma",level:2},{value:"What Makes Apache Fory Rust Different?",id:"what-makes-apache-fory-rust-different",level:2},{value:"1. <strong>Truly Cross-Language</strong>",id:"1-truly-cross-language",level:3},{value:"2. <strong>Automatic Shared/Circular Reference Handling</strong>",id:"2-automatic-sharedcircular-reference-handling",level:3},{value:"3. <strong>Trait Object Serialization</strong>",id:"3-trait-object-serialization",level:3},{value:"4. <strong>Schema Evolution Without Breaking Changes</strong>",id:"4-schema-evolution-without-breaking-changes",level:3},{value:"The Technical Foundation",id:"the-technical-foundation",level:2},{value:"Protocol Design",id:"protocol-design",level:3},{value:"Compile-Time Code Generation",id:"compile-time-code-generation",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Benchmarks: Real-World Performance",id:"benchmarks-real-world-performance",level:2},{value:"When to Use Apache Fory Rust",id:"when-to-use-apache-fory-rust",level:2},{value:"\u2705 <strong>Ideal Use Cases</strong>",id:"-ideal-use-cases",level:3},{value:"\u26a0\ufe0f <strong>Consider Alternatives If</strong>",id:"\ufe0f-consider-alternatives-if",level:3},{value:"Getting Started in 5 Minutes",id:"getting-started-in-5-minutes",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Object Serialization",id:"basic-object-serialization",level:3},{value:"Cross-Language Serialization",id:"cross-language-serialization",level:3},{value:"Supported Types",id:"supported-types",level:2},{value:"Roadmap: What&#39;s Next",id:"roadmap-whats-next",level:2},{value:"\u2705 <strong>Shipped in v0.13</strong>",id:"-shipped-in-v013",level:3},{value:"\ud83d\udea7 <strong>Coming Soon</strong>",id:"-coming-soon",level:3},{value:"\ud83c\udfaf <strong>Help Wanted</strong>",id:"-help-wanted",level:3},{value:"Production Considerations",id:"production-considerations",level:2},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Community and Contribution",id:"community-and-contribution",level:2},{value:"How to Contribute",id:"how-to-contribute",level:3},{value:"License",id:"license",level:3},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TL;DR"}),": Apache Fory Rust is a blazingly-fast, cross-language serialization framework that delivers ",(0,s.jsx)(n.strong,{children:"ultra-fast serialization performance"})," while ",(0,s.jsx)(n.strong,{children:"automatically handling circular references, trait objects, and schema evolution"}),". Built with Rust's safety guarantees and zero-copy techniques, it's designed for developers who refuse to compromise between performance and developer experience."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"the-serialization-dilemma",children:"The Serialization Dilemma"}),"\n",(0,s.jsx)(n.p,{children:"Every backend engineer has faced this moment: your application needs to serialize complex data structures such as nested objects, circular references, polymorphic types, and you're forced to choose between three bad options:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast but fragile"}),": Hand-rolled binary formats that break with schema changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible but slow"}),": JSON/Protocol with 10x performance overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex and limiting"}),": Existing solutions that don't support your language's advanced features"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory Rust eliminates this false choice. It's a serialization framework that delivers exceptional performance while automatically handling the complexities of modern applications\u2014no IDL files, no manual schema management, no compromises."}),"\n",(0,s.jsx)(n.h2,{id:"what-makes-apache-fory-rust-different",children:"What Makes Apache Fory Rust Different?"}),"\n",(0,s.jsxs)(n.h3,{id:"1-truly-cross-language",children:["1. ",(0,s.jsx)(n.strong,{children:"Truly Cross-Language"})]}),"\n",(0,s.jsxs)(n.p,{children:["Apache Fory Rust speaks the same binary protocol as Java, Python, C++, Go, and other language implementations. Serialize data in Rust, deserialize in Python \u2014 ",(0,s.jsx)(n.strong,{children:"it just works"}),". No schema files. No code generation. No version mismatches."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Rust: Serialize\nlet user = User {\n    name: "Alice".to_string(),\n    age: 30,\n    metadata: HashMap::from([("role", "admin")]),\n};\nlet bytes = fory.serialize(&user);\n\n// Python: Deserialize (same binary format!)\nuser = fory.deserialize(bytes)  # Just works!\n'})}),"\n",(0,s.jsx)(n.p,{children:"This isn't just convenient \u2014 it changes how we develop microservices architectures where different teams use different languages."}),"\n",(0,s.jsxs)(n.h3,{id:"2-automatic-sharedcircular-reference-handling",children:["2. ",(0,s.jsx)(n.strong,{children:"Automatic Shared/Circular Reference Handling"})]}),"\n",(0,s.jsx)(n.p,{children:"Most serialization frameworks panic when encountering circular references. Apache Fory tracks and preserves reference identity automatically:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Shared Reference"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::Fory;\nuse std::rc::Rc;\n\nlet fory = Fory::default();\n\n// Create a shared value\nlet shared = Rc::new(String::from("shared_value"));\n\n// Reference it multiple times\nlet data = vec![shared.clone(), shared.clone(), shared.clone()];\n\n// The shared value is serialized only once\nlet bytes = fory.serialize(&data);\nlet decoded: Vec<Rc<String>> = fory.deserialize(&bytes)?;\n\n// Verify reference identity is preserved\nassert_eq!(decoded.len(), 3);\nassert_eq!(*decoded[0], "shared_value");\n\n// All three Rc pointers point to the same object\nassert!(Rc::ptr_eq(&decoded[0], &decoded[1]));\nassert!(Rc::ptr_eq(&decoded[1], &decoded[2]));\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Circular Reference"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use fory::{ForyObject, RcWeak};\n\n#[derive(ForyObject)]\nstruct Node {\n    value: i32,\n    parent: RcWeak<RefCell<Node>>,     // Weak pointer breaks cycles\n    children: Vec<Rc<RefCell<Node>>>,  // Strong references tracked\n}\n\n// Build a parent-child tree with circular references\nlet parent = Rc::new(RefCell::new(Node { ... }));\nlet child = Rc::new(RefCell::new(Node {\n    parent: RcWeak::from(&parent),  // Points back to parent\n    ...\n}));\nparent.borrow_mut().children.push(child.clone());\n\n// Serialization handles the cycle automatically\nlet bytes = fory.serialize(&parent);\nlet decoded: Rc<RefCell<Node>> = fory.deserialize(&bytes)?;\n\n// Reference relationships preserved!\nassert!(Rc::ptr_eq(&decoded, &decoded.borrow().children[0].borrow().parent.upgrade().unwrap()));\n"})}),"\n",(0,s.jsx)(n.p,{children:"This isn't just a feature\u2014it's essential for graph databases, object-relational mappers, and domain models."}),"\n",(0,s.jsxs)(n.h3,{id:"3-trait-object-serialization",children:["3. ",(0,s.jsx)(n.strong,{children:"Trait Object Serialization"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rust's trait system enables powerful abstractions, but serializing ",(0,s.jsx)(n.code,{children:"Box<dyn Trait>"})," is notoriously difficult. Apache Fory makes it trivial:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::{ForyObject, Serializer, register_trait_type};\n\ntrait Animal: Serializer {\n    fn speak(&self) -> String;\n}\n\n#[derive(ForyObject)]\nstruct Dog { name: String, breed: String }\n\n#[derive(ForyObject)]\nstruct Cat { name: String, color: String }\n\n// Register implementations\nregister_trait_type!(Animal, Dog, Cat);\n\n// Serialize heterogeneous collections\nlet animals: Vec<Box<dyn Animal>> = vec![\n    Box::new(Dog { ... }),\n    Box::new(Cat { ... }),\n];\n\nlet bytes = fory.serialize(&animals);\nlet decoded: Vec<Box<dyn Animal>> = fory.deserialize(&bytes)?;\n\n// Polymorphism preserved!\ndecoded[0].speak();  // "Woof!"\ndecoded[1].speak();  // "Meow!"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Alternative: Using ",(0,s.jsx)(n.code,{children:"dyn Any"})," without trait registration"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use std::rc::Rc;\nuse std::any::Any;\n\n// No trait definition or registration needed\nlet dog: Rc<dyn Any> = Rc::new(Dog { name: "Rex".to_string(), breed: "Labrador".to_string() });\nlet cat: Rc<dyn Any> = Rc::new(Cat { name: "Whiskers".to_string(), color: "Orange".to_string() });\n\nlet bytes = fory.serialize(&dog);\nlet decoded: Rc<dyn Any> = fory.deserialize(&bytes)?;\n\n// Downcast to concrete type\nlet unwrapped = decoded.downcast_ref::<Dog>().unwrap();\nassert_eq!(unwrapped.name, "Rex");\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Supports"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Box<dyn Trait>"})," - Owned trait objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Rc<dyn Trait>"})," / ",(0,s.jsx)(n.code,{children:"Arc<dyn Trait>"})," - Reference-counted trait objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Rc<dyn Any>"})," / ",(0,s.jsx)(n.code,{children:"Arc<dyn Any>"})," - Runtime type dispatch without traits"]}),"\n",(0,s.jsx)(n.li,{children:"Auto-generated wrapper types for standalone serialization"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This unlocks plugin systems, heterogeneous collections, and extensible architectures that were previously impossible to serialize."}),"\n",(0,s.jsxs)(n.h3,{id:"4-schema-evolution-without-breaking-changes",children:["4. ",(0,s.jsx)(n.strong,{children:"Schema Evolution Without Breaking Changes"})]}),"\n",(0,s.jsxs)(n.p,{children:["Microservices evolve independently. Apache Fory's ",(0,s.jsx)(n.strong,{children:"Compatible mode"})," allows schema changes without coordination:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use fory::{Fory, ForyObject};\n\n// Service A: Version 1\n#[derive(ForyObject)]\nstruct User {\n    name: String,\n    age: i32,\n    address: String,\n}\n\nlet mut fory_v1 = Fory::default().compatible(true);\nfory_v1.register::<User>(1);\n\n// Service B: Version 2 (evolved independently)\n#[derive(ForyObject)]\nstruct User {\n    name: String,\n    age: i32,\n    // address removed\n    phone: Option<String>,     // New field\n    metadata: HashMap<String, String>,  // Another new field\n}\n\nlet mut fory_v2 = Fory::default().compatible(true);\nfory_v2.register::<User>(1);\n\n// V1 data deserializes into V2 structure\nlet v1_bytes = fory_v1.serialize(&user_v1);\nlet user_v2: User = fory_v2.deserialize(&v1_bytes)?;\n// Missing fields get default values automatically\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Compatibility rules"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Add new fields (default values applied)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Remove fields (skipped during deserialization)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Reorder fields (matched by name)"}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 Change nullability (",(0,s.jsx)(n.code,{children:"T"})," \u2194 ",(0,s.jsx)(n.code,{children:"Option<T>"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"\u274c Type changes (except nullable variants)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This is critical for zero-downtime deployments and polyglot microservices."}),"\n",(0,s.jsx)(n.h2,{id:"the-technical-foundation",children:"The Technical Foundation"}),"\n",(0,s.jsx)(n.h3,{id:"protocol-design",children:"Protocol Design"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory uses a sophisticated binary protocol designed for both performance and flexibility:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"| fory header | reference meta | type meta | value data |\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key innovations"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient encoding"}),": Variable-length integers, compact type IDs, bit-packed flags"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reference tracking"}),": Deduplicates shared objects automatically (serialize once, reference thereafter)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Meta compression"}),": Gzip compression for type metadata in meta-sharing mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Little-endian layout"}),": Optimized for modern CPU architectures"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"compile-time-code-generation",children:"Compile-Time Code Generation"}),"\n",(0,s.jsx)(n.p,{children:"Unlike reflection-based frameworks, Apache Fory generates serialization code at compile time via procedural macros:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use fory::ForyObject;\n\n#[derive(ForyObject)]\nstruct Person {\n    name: String,\n    age: i32,\n    address: Address,\n}\n\n// Macro generates:\n// - fory_write_data() for serialization\n// - fory_read_data() for deserialization\n// - fory_reserved_space() for buffer pre-allocation\n// - fory_get_type_id() for type registration\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u26a1 ",(0,s.jsx)(n.strong,{children:"Zero runtime overhead"}),": No reflection, no vtable lookups"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(n.strong,{children:"Type safety"}),": Compile-time errors instead of runtime panics"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,s.jsx)(n.strong,{children:"Small binary size"}),": Only code for types you actually use"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,s.jsx)(n.strong,{children:"IDE support"}),": Full autocomplete and error checking"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory Rust consists of three focused crates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"fory/            # High-level API\n  \u2514\u2500 Convenience wrappers, derive re-exports\n\nfory-core/       # Core serialization engine\n  \u251c\u2500 fory.rs         # Main entry point\n  \u251c\u2500 buffer.rs       # Zero-copy binary I/O\n  \u251c\u2500 serializer/     # Type-specific serializers\n  \u251c\u2500 resolver/       # Type registration & dispatch\n  \u251c\u2500 meta/           # Meta string compression\n  \u2514\u2500 row/            # Row format implementation\n\nfory-derive/     # Procedural macros\n  \u251c\u2500 object/         # ForyObject derive macro\n  \u2514\u2500 fory_row.rs    # ForyRow derive macro\n"})}),"\n",(0,s.jsx)(n.p,{children:"This modular design ensures clean separation of concerns and makes the codebase maintainable."}),"\n",(0,s.jsx)(n.h2,{id:"benchmarks-real-world-performance",children:"Benchmarks: Real-World Performance"}),"\n",(0,s.jsx)("img",{src:"/img/benchmarks/rust/ecommerce_data.png",width:"90%"}),"\n",(0,s.jsx)("img",{src:"/img/benchmarks/rust/system_data.png",width:"90%"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Datatype"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Operation"}),(0,s.jsx)(n.th,{children:"Fory TPS"}),(0,s.jsx)(n.th,{children:"JSON TPS"}),(0,s.jsx)(n.th,{children:"Protobuf TPS"}),(0,s.jsx)(n.th,{children:"Fastest"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"company"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"10,063,906"}),(0,s.jsx)(n.td,{children:"761,673"}),(0,s.jsx)(n.td,{children:"896,620"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"company"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"412,507"}),(0,s.jsx)(n.td,{children:"33,835"}),(0,s.jsx)(n.td,{children:"37,590"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"company"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"9,183"}),(0,s.jsx)(n.td,{children:"793"}),(0,s.jsx)(n.td,{children:"880"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ecommerce_data"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"2,350,729"}),(0,s.jsx)(n.td,{children:"206,262"}),(0,s.jsx)(n.td,{children:"256,970"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ecommerce_data"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"59,977"}),(0,s.jsx)(n.td,{children:"4,699"}),(0,s.jsx)(n.td,{children:"5,242"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ecommerce_data"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"3,727"}),(0,s.jsx)(n.td,{children:"266"}),(0,s.jsx)(n.td,{children:"295"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"person"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"13,632,522"}),(0,s.jsx)(n.td,{children:"1,345,189"}),(0,s.jsx)(n.td,{children:"1,475,035"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"person"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"3,839,656"}),(0,s.jsx)(n.td,{children:"337,610"}),(0,s.jsx)(n.td,{children:"369,031"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"person"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"907,853"}),(0,s.jsx)(n.td,{children:"79,631"}),(0,s.jsx)(n.td,{children:"91,408"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_list"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"27,726,945"}),(0,s.jsx)(n.td,{children:"4,874,957"}),(0,s.jsx)(n.td,{children:"4,643,172"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_list"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"4,770,765"}),(0,s.jsx)(n.td,{children:"401,558"}),(0,s.jsx)(n.td,{children:"397,551"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_list"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"606,061"}),(0,s.jsx)(n.td,{children:"41,061"}),(0,s.jsx)(n.td,{children:"44,565"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_map"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"22,862,369"}),(0,s.jsx)(n.td,{children:"3,888,025"}),(0,s.jsx)(n.td,{children:"2,695,999"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_map"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"2,128,973"}),(0,s.jsx)(n.td,{children:"204,319"}),(0,s.jsx)(n.td,{children:"193,132"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_map"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"177,847"}),(0,s.jsx)(n.td,{children:"18,419"}),(0,s.jsx)(n.td,{children:"18,668"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_struct"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"35,729,598"}),(0,s.jsx)(n.td,{children:"10,167,045"}),(0,s.jsx)(n.td,{children:"8,633,342"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_struct"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"34,988,279"}),(0,s.jsx)(n.td,{children:"9,737,098"}),(0,s.jsx)(n.td,{children:"6,433,350"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"simple_struct"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"31,801,558"}),(0,s.jsx)(n.td,{children:"4,545,041"}),(0,s.jsx)(n.td,{children:"7,420,049"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"system_data"}),(0,s.jsx)(n.td,{children:"small"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"5,382,131"}),(0,s.jsx)(n.td,{children:"468,033"}),(0,s.jsx)(n.td,{children:"569,930"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"system_data"}),(0,s.jsx)(n.td,{children:"medium"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"174,240"}),(0,s.jsx)(n.td,{children:"11,896"}),(0,s.jsx)(n.td,{children:"14,753"}),(0,s.jsx)(n.td,{children:"fory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"system_data"}),(0,s.jsx)(n.td,{children:"large"}),(0,s.jsx)(n.td,{children:"serialize"}),(0,s.jsx)(n.td,{children:"10,671"}),(0,s.jsx)(n.td,{children:"876"}),(0,s.jsx)(n.td,{children:"1,040"}),(0,s.jsx)(n.td,{children:"fory"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-apache-fory-rust",children:"When to Use Apache Fory Rust"}),"\n",(0,s.jsxs)(n.h3,{id:"-ideal-use-cases",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Ideal Use Cases"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Microservices with polyglot teams"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Different services in different languages"}),"\n",(0,s.jsx)(n.li,{children:"Need seamless data exchange without schema files"}),"\n",(0,s.jsx)(n.li,{children:"Schema evolution across independent deployments"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"High-performance data pipelines"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Processing millions of records per second"}),"\n",(0,s.jsx)(n.li,{children:"Memory-constrained environments (use row format)"}),"\n",(0,s.jsx)(n.li,{children:"Analytics workloads with selective field access"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Complex domain models"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Circular references (parent-child relationships, graphs)"}),"\n",(0,s.jsx)(n.li,{children:"Polymorphic types (trait objects, inheritance hierarchies)"}),"\n",(0,s.jsx)(n.li,{children:"Rich object graphs with shared references"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Real-time systems"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Low-latency requirements (",(0,s.jsx)(n.code,{children:"<1ms"})," serialization)"]}),"\n",(0,s.jsx)(n.li,{children:"Memory-mapped file access"}),"\n",(0,s.jsx)(n.li,{children:"Zero-copy deserialization critical"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"\ufe0f-consider-alternatives-if",children:["\u26a0\ufe0f ",(0,s.jsx)(n.strong,{children:"Consider Alternatives If"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"You need human-readable data"}),": Use JSON/YAML for debugging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"You need long-term storage format"}),": Use Parquet for data lakes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Your data is trivial"}),": serde + bincode is simpler for basic types"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started-in-5-minutes",children:"Getting Started in 5 Minutes"}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["Add to ",(0,s.jsx)(n.code,{children:"Cargo.toml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[dependencies]\nfory = "0.13"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"basic-object-serialization",children:"Basic Object Serialization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::{Fory, Error, ForyObject};\n\n#[derive(ForyObject, Debug, PartialEq)]\nstruct User {\n    name: String,\n    age: i32,\n    email: String,\n}\n\nfn main() -> Result<(), Error> {\n    let mut fory = Fory::default();\n    fory.register::<User>(1);  // Register with unique ID\n    let user = User {\n        name: "Alice".to_string(),\n        age: 30,\n        email: "alice@example.com".to_string(),\n    };\n    // Serialize\n    let bytes = fory.serialize(&user);\n    // Deserialize\n    let decoded: User = fory.deserialize(&bytes)?;\n    assert_eq!(user, decoded);\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cross-language-serialization",children:"Cross-Language Serialization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::Fory;\n\n// Enable cross-language mode\nlet mut fory = Fory::default().compatible(true).xlang(true);\n\n// Register with id/namespace for cross-language compatibility\nfory.register_by_namespace::<User>(1);\n// fory.register_by_namespace::<User>("example", "User");\n\nlet bytes = fory.serialize(&user);\n// This can now be deserialized in Java, Python, Go, etc.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Register types with ",(0,s.jsx)(n.strong,{children:"consistent IDs or names"})," across all languages:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"By ID"})," (",(0,s.jsx)(n.code,{children:"fory.register::<User>(1)"}),"): Faster serialization, more compact encoding, but requires coordination to avoid ID conflicts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"By name"})," (",(0,s.jsx)(n.code,{children:'fory.register_by_name::<User>("example.User")'}),"): More flexible, less prone to conflicts, easier to manage across teams, but slightly larger encoding"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory Rust supports a comprehensive type system:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Primitives"}),": ",(0,s.jsx)(n.code,{children:"bool"}),", ",(0,s.jsx)(n.code,{children:"i8"}),", ",(0,s.jsx)(n.code,{children:"i16"}),", ",(0,s.jsx)(n.code,{children:"i32"}),", ",(0,s.jsx)(n.code,{children:"i64"}),", ",(0,s.jsx)(n.code,{children:"f32"}),", ",(0,s.jsx)(n.code,{children:"f64"}),", ",(0,s.jsx)(n.code,{children:"String"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Collections"}),": ",(0,s.jsx)(n.code,{children:"Vec<T>"}),", ",(0,s.jsx)(n.code,{children:"HashMap<K,V>"}),", ",(0,s.jsx)(n.code,{children:"BTreeMap<K,V>"}),", ",(0,s.jsx)(n.code,{children:"HashSet<T>"}),", ",(0,s.jsx)(n.code,{children:"Option<T>"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Smart Pointers"}),": ",(0,s.jsx)(n.code,{children:"Box<T>"}),", ",(0,s.jsx)(n.code,{children:"Rc<T>"}),", ",(0,s.jsx)(n.code,{children:"Arc<T>"}),", ",(0,s.jsx)(n.code,{children:"RcWeak<T>"}),", ",(0,s.jsx)(n.code,{children:"ArcWeak<T>"}),", ",(0,s.jsx)(n.code,{children:"RefCell<T>"}),", ",(0,s.jsx)(n.code,{children:"Mutex<T>"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Date/Time"}),": ",(0,s.jsx)(n.code,{children:"chrono::NaiveDate"}),", ",(0,s.jsx)(n.code,{children:"chrono::NaiveDateTime"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Custom Types"}),": Derive ",(0,s.jsx)(n.code,{children:"ForyObject"})," for object graphs, ",(0,s.jsx)(n.code,{children:"ForyRow"})," for row format"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trait Objects"}),": ",(0,s.jsx)(n.code,{children:"Box<dyn T>"}),", ",(0,s.jsx)(n.code,{children:"Rc<dyn T>"}),", ",(0,s.jsx)(n.code,{children:"Arc<dyn T>"}),", ",(0,s.jsx)(n.code,{children:"Rc<dyn Any>"}),", ",(0,s.jsx)(n.code,{children:"Arc<dyn Any>"})]}),"\n",(0,s.jsx)(n.h2,{id:"roadmap-whats-next",children:"Roadmap: What's Next"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory Rust is production-ready today, but we're just getting started and continuing active development:"}),"\n",(0,s.jsxs)(n.h3,{id:"-shipped-in-v013",children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Shipped in v0.13"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Static codegen via procedural macros"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Row format serialization with zero-copy"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Cross-language object graph serialization"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Shared and circular reference tracking"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Weak pointer support (RcWeak, ArcWeak)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Trait object serialization (Box/Rc/Arc)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Schema evolution in compatible mode"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-coming-soon",children:["\ud83d\udea7 ",(0,s.jsx)(n.strong,{children:"Coming Soon"})]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Cross-language reference serialization"}),": serialize ",(0,s.jsx)(n.code,{children:"Rc/Arc"})," to/from other languages."]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Partial row updates"}),": Mutate row format in-place"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-help-wanted",children:["\ud83c\udfaf ",(0,s.jsx)(n.strong,{children:"Help Wanted"})]}),"\n",(0,s.jsx)(n.p,{children:"We're actively seeking contributors for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance tuning"}),": Profile and optimize hot paths"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": More examples, tutorials, and guides"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Fuzzing, property tests, edge case coverage"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Fory"})," becomes fully thread-safe after registration is complete. Once every type is registered (which requires ",(0,s.jsx)(n.code,{children:"&mut Fory"}),"), wrap the instance in an ",(0,s.jsx)(n.code,{children:"Arc"})," and freely share it across worker threads for concurrent serialization and deserialization."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::Fory;\nuse std::{sync::Arc, thread};\n\nlet mut fory = Fory::default();\nfory.register::<Item>(1)?;\nlet fory = Arc::new(fory); // `Fory` is Send + Sync once registration is done\n\nlet item = Item::default();\nlet handles: Vec<_> = (0..4)\n    .map(|_| {\n        let fory = Arc::clone(&fory);\n        let input = item.clone();\n        thread::spawn(move || {\n            let bytes = fory.serialize(&input);\n            let decoded: Item = fory.deserialize(&bytes).expect("valid data");\n            (bytes, decoded)\n        })\n    })\n    .collect();\n\nfor handle in handles {\n    let (bytes, decoded) = handle.join().expect("thread finished");\n    // work with `bytes` / `decoded`\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.p,{children:["Apache Fory uses ",(0,s.jsx)(n.code,{children:"Result<T, Error>"})," for all fallible operations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use fory::Error;\n\nmatch fory.deserialize::<User>(&bytes) {\n    Ok(user) => process_user(user),\n    Err(Error::TypeMismatch) => log::error!("Schema mismatch"),\n    Err(Error::BufferTooShort) => log::error!("Incomplete data"),\n    Err(e) => log::error!("Deserialization failed: {}", e),\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"community-and-contribution",children:"Community and Contribution"}),"\n",(0,s.jsxs)(n.p,{children:["Apache Fory is an ",(0,s.jsx)(n.strong,{children:"Apache Software Foundation"})," project with a vibrant, growing community:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitHub"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory",children:"apache/fory"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Docs"}),": ",(0,s.jsx)(n.a,{href:"https://fory.apache.org",children:"fory.apache.org"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slack"}),": ",(0,s.jsx)(n.a,{href:"https://join.slack.com/t/fory-project/shared_invite/zt-1u8soj4qc-ieYEu7ciHOqA2mo47llS8A",children:"Join our community"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Issue Tracker"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/issues",children:"GitHub Issues"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-to-contribute",children:"How to Contribute"}),"\n",(0,s.jsx)(n.p,{children:"We welcome contributions of all kinds:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code"}),": Implement features from the roadmap"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Docs"}),": Write tutorials, examples, and guides"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Add benchmarks, fuzz tests, integration tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feedback"}),": Report bugs, request features, share use cases"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/blob/main/CONTRIBUTING.md",children:"CONTRIBUTING.md"})," for guidelines."]}),"\n",(0,s.jsx)(n.h3,{id:"license",children:"License"}),"\n",(0,s.jsxs)(n.p,{children:["Apache Fory is licensed under the ",(0,s.jsx)(n.strong,{children:"Apache License 2.0"}),", a permissive open-source license that allows commercial use, modification, and distribution."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory Rust represents a paradigm shift in serialization:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more trade-offs"}),": Get performance ",(0,s.jsx)(n.em,{children:"and"})," flexibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more boilerplate"}),": Derive macros handle the complexity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more lock-in"}),": Trait-object and shared reference support by nature"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether you're building microservices, data pipelines, or real-time systems, Apache Fory Rust delivers the performance you need with the ergonomics you deserve."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Try it today"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo add fory\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Join the community"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/apache/fory.git\ncd fory/rust\ncargo test --features tests\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Share your experience"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write a blog post about your use case"}),"\n",(0,s.jsx)(n.li,{children:"Present at your local Rust meetup"}),"\n",(0,s.jsx)(n.li,{children:"Contribute benchmarks from your domain"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>l});var s=r(67294);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);