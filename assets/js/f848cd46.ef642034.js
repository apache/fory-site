"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[8196],{20656:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var r=n(85893),s=n(11151);const l={id:"features",title:"Features",sidebar_position:2},a=void 0,t={id:"docs/introduction/features",title:"Features",description:"Core Capabilities",source:"@site/docs/docs/introduction/features.md",sourceDirName:"docs/introduction",slug:"/docs/introduction/features",permalink:"/docs/next/docs/introduction/features",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/docs/docs/introduction/features.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"features",title:"Features",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/docs/next/docs/introduction/"},next:{title:"Benchmark",permalink:"/docs/next/docs/introduction/benchmark"}},o={},c=[{value:"Core Capabilities",id:"core-capabilities",level:2},{value:"\ud83d\ude80 High-Performance Serialization",id:"-high-performance-serialization",level:3},{value:"\ud83c\udf0d Cross-Language Serialization",id:"-cross-language-serialization",level:3},{value:"\ud83d\udcca Row Format",id:"-row-format",level:3},{value:"\ud83d\udd12 Security &amp; Production-Readiness",id:"-security--production-readiness",level:3},{value:"Java Features",id:"java-features",level:2},{value:"\ud83d\ude80 High Performance",id:"-high-performance",level:3},{value:"\ud83d\udd27 Drop-in Replacement",id:"-drop-in-replacement",level:3},{value:"\ud83d\udd04 Advanced Features",id:"-advanced-features",level:3},{value:"Python Features",id:"python-features",level:2},{value:"\ud83d\udd27 <strong>Flexible Serialization Modes</strong>",id:"-flexible-serialization-modes",level:3},{value:"\ud83c\udfaf Versatile Serialization Features",id:"-versatile-serialization-features",level:3},{value:"\u26a1 <strong>Blazing Fast Performance</strong>",id:"-blazing-fast-performance",level:3},{value:"\ud83d\udce6 Compact Data Size",id:"-compact-data-size",level:3},{value:"\ud83d\udee1\ufe0f <strong>Security &amp; Safety</strong>",id:"\ufe0f-security--safety",level:3},{value:"Rust Features",id:"rust-features",level:2},{value:"\ud83d\ude80 Why Apache Fory\u2122 Rust?",id:"-why-apache-fory-rust",level:3},{value:"Object Graph Serialization",id:"object-graph-serialization",level:3},{value:"Shared and Circular References",id:"shared-and-circular-references",level:3},{value:"Trait Object Serialization",id:"trait-object-serialization",level:3},{value:"Schema Evolution",id:"schema-evolution",level:3},{value:"Custom Serializers",id:"custom-serializers",level:3},{value:"Row-Based Serialization",id:"row-based-serialization",level:3},{value:"Scala Features",id:"scala-features",level:2},{value:"Supported Types",id:"supported-types",level:3},{value:"Scala Class Default Values Support",id:"scala-class-default-values-support",level:3},{value:"Kotlin Features",id:"kotlin-features",level:2},{value:"Supported Types",id:"supported-types-1",level:3},{value:"Data Class Default Value Support",id:"data-class-default-value-support",level:3}];function d(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"core-capabilities",children:"Core Capabilities"}),"\n",(0,r.jsx)(i.h3,{id:"-high-performance-serialization",children:"\ud83d\ude80 High-Performance Serialization"}),"\n",(0,r.jsx)(i.p,{children:"Apache Fory\u2122 delivers exceptional performance through advanced optimization techniques:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"JIT Compilation"}),": Runtime code generation for Java eliminates virtual method calls and inlines hot paths"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Static Code Generation"}),": Compile-time code generation for Rust, C++, and Go delivers peak performance without runtime overhead"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Zero-Copy Operations"}),": Direct memory access without intermediate buffer copies; row format enables random access and partial serialization"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Intelligent Encoding"}),": Variable-length compression for integers and strings; SIMD acceleration for arrays (Java 16+)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Meta Sharing"}),": Class metadata packing reduces redundant type information across serializations"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-cross-language-serialization",children:"\ud83c\udf0d Cross-Language Serialization"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.a,{href:"/docs/next/specification/fory_xlang_serialization_spec",children:"xlang serialization format"})})," enables seamless data exchange across programming languages:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Automatic Type Mapping"}),": Intelligent conversion between language-specific types (",(0,r.jsx)(i.a,{href:"/docs/next/specification/xlang_type_mapping",children:"type mapping"}),")"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Reference Preservation"}),": Shared and circular references work correctly across languages"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Polymorphism"}),": Objects serialize/deserialize with their actual runtime types"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Schema Evolution"}),": Optional forward/backward compatibility for evolving schemas"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Automatic Serialization"}),": No IDL or schema definitions required; serialize any object directly without code generation"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-row-format",children:"\ud83d\udcca Row Format"}),"\n",(0,r.jsxs)(i.p,{children:["A cache-friendly ",(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.a,{href:"/docs/next/specification/fory_row_format_spec",children:"row format"})})," optimized for analytics workloads:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Zero-Copy Random Access"}),": Read individual fields without deserializing entire objects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Partial Operations"}),": Selective field serialization and deserialization for efficiency"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Apache Arrow Integration"}),": Seamless conversion to columnar format for analytics pipelines"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Multi-Language"}),": Available in Java, Python, Rust and C++"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-security--production-readiness",children:"\ud83d\udd12 Security & Production-Readiness"}),"\n",(0,r.jsx)(i.p,{children:"Enterprise-grade security and compatibility:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Class Registration"}),": Whitelist-based deserialization control (enabled by default)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Depth Limiting"}),": Protection against recursive object graph attacks"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Configurable Policies"}),": Custom class checkers and deserialization policies"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Platform Support"}),": Java 8-24, GraalVM native image, multiple OS platforms"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"java-features",children:"Java Features"}),"\n",(0,r.jsx)(i.h3,{id:"-high-performance",children:"\ud83d\ude80 High Performance"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"JIT Code Generation"}),": Highly-extensible JIT framework generates serializer code at runtime using async multi-threaded compilation, delivering 20-170x speedup through:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Inlining variables to reduce memory access"}),"\n",(0,r.jsx)(i.li,{children:"Inlining method calls to eliminate virtual dispatch overhead"}),"\n",(0,r.jsx)(i.li,{children:"Minimizing conditional branching"}),"\n",(0,r.jsx)(i.li,{children:"Eliminating hash lookups"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Zero-Copy"}),": Direct memory access without intermediate buffer copies; row format supports random access and partial serialization"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Variable-Length Encoding"}),": Optimized compression for integers, longs"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Meta Sharing"}),": Cached class metadata reduces redundant type information"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"SIMD Acceleration"}),": Java Vector API support for array operations (Java 16+)"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-drop-in-replacement",children:"\ud83d\udd27 Drop-in Replacement"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"100% JDK Serialization Compatible"}),": Supports ",(0,r.jsx)(i.code,{children:"writeObject"}),"/",(0,r.jsx)(i.code,{children:"readObject"}),"/",(0,r.jsx)(i.code,{children:"writeReplace"}),"/",(0,r.jsx)(i.code,{children:"readResolve"}),"/",(0,r.jsx)(i.code,{children:"readObjectNoData"}),"/",(0,r.jsx)(i.code,{children:"Externalizable"})]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Java 8-24 Support"}),": Works across all modern Java versions including Java 17+ records"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"GraalVM Native Image"}),": AOT compilation support without reflection configuration"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-advanced-features",children:"\ud83d\udd04 Advanced Features"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Reference Tracking"}),": Automatic handling of shared and circular references"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Schema Evolution"}),": Forward/backward compatibility for class schema changes"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Polymorphism"}),": Full support for inheritance hierarchies and interfaces"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Deep Copy"}),": Efficient deep cloning of complex object graphs with reference preservation"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Security"}),": Class registration and configurable deserialization policies"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"python-features",children:"Python Features"}),"\n",(0,r.jsxs)(i.h3,{id:"-flexible-serialization-modes",children:["\ud83d\udd27 ",(0,r.jsx)(i.strong,{children:"Flexible Serialization Modes"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Python native Mode"}),": Full Python compatibility, drop-in replacement for pickle/cloudpickle"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cross-Language Mode"}),": Optimized for multi-language data exchange"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Row Format"}),": Zero-copy row format for analytics workloads"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-versatile-serialization-features",children:"\ud83c\udfaf Versatile Serialization Features"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Shared/circular reference support"})," for complex object graphs in both Python-native and cross-language modes"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Polymorphism support"})," for customized types with automatic type dispatching"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Schema evolution"})," support for backward/forward compatibility when using dataclasses in cross-language mode"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Out-of-band buffer support"})," for zero-copy serialization of large data structures like NumPy arrays and Pandas DataFrames, compatible with pickle protocol 5"]}),"\n"]}),"\n",(0,r.jsxs)(i.h3,{id:"-blazing-fast-performance",children:["\u26a1 ",(0,r.jsx)(i.strong,{children:"Blazing Fast Performance"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Extremely fast performance"})," compared to other serialization frameworks"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Runtime code generation"})," and ",(0,r.jsx)(i.strong,{children:"Cython-accelerated"})," core implementation for optimal performance"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"-compact-data-size",children:"\ud83d\udce6 Compact Data Size"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Compact object graph protocol"})," with minimal space overhead\u2014up to 3\xd7 size reduction compared to pickle/cloudpickle"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Meta packing and sharing"})," to minimize type forward/backward compatibility space overhead"]}),"\n"]}),"\n",(0,r.jsxs)(i.h3,{id:"\ufe0f-security--safety",children:["\ud83d\udee1\ufe0f ",(0,r.jsx)(i.strong,{children:"Security & Safety"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Strict mode"})," prevents deserialization of untrusted types by type registration and checks."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Reference tracking"})," for handling circular references safely"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"rust-features",children:"Rust Features"}),"\n",(0,r.jsx)(i.h3,{id:"-why-apache-fory-rust",children:"\ud83d\ude80 Why Apache Fory\u2122 Rust?"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83d\udd25 Blazingly Fast"}),": Zero-copy deserialization and optimized binary protocols"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83c\udf0d Cross-Language"}),": Seamlessly serialize/deserialize data across Java, Python, C++, Go, JavaScript, and Rust"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83c\udfaf Type-Safe"}),": Compile-time type checking with derive macros"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83d\udd04 Circular References"}),": Automatic tracking of shared and circular references with ",(0,r.jsx)(i.code,{children:"Rc"}),"/",(0,r.jsx)(i.code,{children:"Arc"})," and weak pointers"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83e\uddec Polymorphic"}),": Serialize trait objects with ",(0,r.jsx)(i.code,{children:"Box<dyn Trait>"}),", ",(0,r.jsx)(i.code,{children:"Rc<dyn Trait>"}),", and ",(0,r.jsx)(i.code,{children:"Arc<dyn Trait>"})]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\ud83d\udce6 Schema Evolution"}),": Compatible mode for independent schema changes"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u26a1 Two Modes"}),": Object graph serialization and zero-copy row-based format"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"object-graph-serialization",children:"Object Graph Serialization"}),"\n",(0,r.jsxs)(i.p,{children:["Automatic serialization of complex object graphs, preserving the structure and relationships between objects. The ",(0,r.jsx)(i.code,{children:"#[derive(ForyObject)]"})," macro generates efficient serialization code at compile time, eliminating runtime overhead:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Nested struct serialization with arbitrary depth"}),"\n",(0,r.jsx)(i.li,{children:"Collection types (Vec, HashMap, HashSet, BTreeMap)"}),"\n",(0,r.jsxs)(i.li,{children:["Optional fields with ",(0,r.jsx)(i.code,{children:"Option<T>"})]}),"\n",(0,r.jsx)(i.li,{children:"Automatic handling of primitive types and strings"}),"\n",(0,r.jsx)(i.li,{children:"Efficient binary encoding with variable-length integers"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"shared-and-circular-references",children:"Shared and Circular References"}),"\n",(0,r.jsxs)(i.p,{children:["Automatically tracks and preserves reference identity for shared objects using ",(0,r.jsx)(i.code,{children:"Rc<T>"})," and ",(0,r.jsx)(i.code,{children:"Arc<T>"}),". When the same object is referenced multiple times, Fory serializes it only once and uses reference IDs for subsequent occurrences. This ensures:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Space efficiency"}),": No data duplication in serialized output"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Reference identity preservation"}),": Deserialized objects maintain the same sharing relationships"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Circular reference support"}),": Use ",(0,r.jsx)(i.code,{children:"RcWeak<T>"})," and ",(0,r.jsx)(i.code,{children:"ArcWeak<T>"})," to break cycles"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"trait-object-serialization",children:"Trait Object Serialization"}),"\n",(0,r.jsx)(i.p,{children:"Polymorphic serialization through trait objects, enabling dynamic dispatch and type flexibility. This is essential for plugin systems, heterogeneous collections, and extensible architectures. Supported trait object types:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"Box<dyn Trait>"})," - Owned trait objects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"Rc<dyn Trait>"})," - Reference-counted trait objects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"Arc<dyn Trait>"})," - Thread-safe reference-counted trait objects"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"Vec<Box<dyn Trait>>"}),", ",(0,r.jsx)(i.code,{children:"HashMap<K, Box<dyn Trait>>"})," - Collections of trait objects"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"schema-evolution",children:"Schema Evolution"}),"\n",(0,r.jsxs)(i.p,{children:["Schema evolution in ",(0,r.jsx)(i.strong,{children:"Compatible mode"}),", allowing serialization and deserialization peers to have different type definitions. This enables independent evolution of services in distributed systems without breaking compatibility:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Add new fields with default values"}),"\n",(0,r.jsx)(i.li,{children:"Remove obsolete fields (skipped during deserialization)"}),"\n",(0,r.jsxs)(i.li,{children:["Change field nullability (",(0,r.jsx)(i.code,{children:"T"})," \u2194 ",(0,r.jsx)(i.code,{children:"Option<T>"}),")"]}),"\n",(0,r.jsx)(i.li,{children:"Reorder fields (matched by name, not position)"}),"\n",(0,r.jsx)(i.li,{children:"Type-safe fallback to default values for missing fields"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"custom-serializers",children:"Custom Serializers"}),"\n",(0,r.jsxs)(i.p,{children:["For types that don't support ",(0,r.jsx)(i.code,{children:"#[derive(ForyObject)]"}),", implement the ",(0,r.jsx)(i.code,{children:"Serializer"})," trait manually. This is useful for:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"External types from other crates"}),"\n",(0,r.jsx)(i.li,{children:"Types with special serialization requirements"}),"\n",(0,r.jsx)(i.li,{children:"Legacy data format compatibility"}),"\n",(0,r.jsx)(i.li,{children:"Performance-critical custom encoding"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"row-based-serialization",children:"Row-Based Serialization"}),"\n",(0,r.jsxs)(i.p,{children:["High-performance ",(0,r.jsx)(i.strong,{children:"row format"})," for zero-copy deserialization. Unlike traditional object serialization that reconstructs entire objects in memory, row format enables ",(0,r.jsx)(i.strong,{children:"random access"})," to fields directly from binary data without full deserialization."]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Zero-copy access"}),": Read fields without allocating or copying data"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Partial deserialization"}),": Access only the fields you need"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Memory-mapped files"}),": Work with data larger than RAM"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cache-friendly"}),": Sequential memory layout for better CPU cache utilization"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Lazy evaluation"}),": Defer expensive operations until field access"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"scala-features",children:"Scala Features"}),"\n",(0,r.jsx)(i.h3,{id:"supported-types",children:"Supported Types"}),"\n",(0,r.jsx)(i.p,{children:"Apache Fory\u2122 supports all scala object serialization:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"case"})," class serialization supported"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"pojo/bean"})," class serialization supported"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"object"})," singleton serialization supported"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"collection"})," serialization supported"]}),"\n",(0,r.jsxs)(i.li,{children:["other types such as ",(0,r.jsx)(i.code,{children:"tuple/either"})," and basic types are all supported too."]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Scala 2 and 3 are both supported."}),"\n",(0,r.jsx)(i.h3,{id:"scala-class-default-values-support",children:"Scala Class Default Values Support"}),"\n",(0,r.jsx)(i.p,{children:"Fory supports Scala class default values during deserialization when using compatible mode. This feature enables forward/backward compatibility when case classes or regular Scala classes have default parameters."}),"\n",(0,r.jsxs)(i.p,{children:["When a Scala class has default parameters, the Scala compiler generates methods in the companion object (for case classes) or in the class itself (for regular Scala classes) like ",(0,r.jsx)(i.code,{children:"apply$default$1"}),", ",(0,r.jsx)(i.code,{children:"apply$default$2"}),", etc. that return the default values. Fory can detect these methods and use them when deserializing objects where certain fields are missing from the serialized data."]}),"\n",(0,r.jsx)(i.h2,{id:"kotlin-features",children:"Kotlin Features"}),"\n",(0,r.jsx)(i.h3,{id:"supported-types-1",children:"Supported Types"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["primitives: ",(0,r.jsx)(i.code,{children:"Byte"}),", ",(0,r.jsx)(i.code,{children:"Boolean"}),", ",(0,r.jsx)(i.code,{children:"Int"}),", ",(0,r.jsx)(i.code,{children:"Short"}),", ",(0,r.jsx)(i.code,{children:"Long"}),", ",(0,r.jsx)(i.code,{children:"Char"}),", ",(0,r.jsx)(i.code,{children:"Float"}),", ",(0,r.jsx)(i.code,{children:"Double"}),", ",(0,r.jsx)(i.code,{children:"UByte"}),", ",(0,r.jsx)(i.code,{children:"UShort"}),", ",(0,r.jsx)(i.code,{children:"UInt"}),", ",(0,r.jsx)(i.code,{children:"ULong"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"Byte"}),", ",(0,r.jsx)(i.code,{children:"Boolean"}),", ",(0,r.jsx)(i.code,{children:"Int"}),", ",(0,r.jsx)(i.code,{children:"Short"}),", ",(0,r.jsx)(i.code,{children:"Long"}),", ",(0,r.jsx)(i.code,{children:"Char"}),", ",(0,r.jsx)(i.code,{children:"Float"}),", ",(0,r.jsx)(i.code,{children:"Double"})," works out of the box with the default fory java implementation."]}),"\n",(0,r.jsxs)(i.li,{children:["stdlib ",(0,r.jsx)(i.code,{children:"collection"}),": ",(0,r.jsx)(i.code,{children:"ArrayDeque"}),", ",(0,r.jsx)(i.code,{children:"ArrayList"}),", ",(0,r.jsx)(i.code,{children:"HashMap"}),",",(0,r.jsx)(i.code,{children:"HashSet"}),", ",(0,r.jsx)(i.code,{children:"LinkedHashSet"}),", ",(0,r.jsx)(i.code,{children:"LinkedHashMap"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"ArrayList"}),", ",(0,r.jsx)(i.code,{children:"HashMap"}),",",(0,r.jsx)(i.code,{children:"HashSet"}),", ",(0,r.jsx)(i.code,{children:"LinkedHashSet"}),", ",(0,r.jsx)(i.code,{children:"LinkedHashMap"})," works out of the box with the default fory java implementation."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"String"})," works out of the box with the default fory java implementation."]}),"\n",(0,r.jsxs)(i.li,{children:["arrays: ",(0,r.jsx)(i.code,{children:"Array"}),", ",(0,r.jsx)(i.code,{children:"BooleanArray"}),", ",(0,r.jsx)(i.code,{children:"ByteArray"}),", ",(0,r.jsx)(i.code,{children:"CharArray"}),", ",(0,r.jsx)(i.code,{children:"DoubleArray"}),", ",(0,r.jsx)(i.code,{children:"FloatArray"}),", ",(0,r.jsx)(i.code,{children:"IntArray"}),", ",(0,r.jsx)(i.code,{children:"LongArray"}),", ",(0,r.jsx)(i.code,{children:"ShortArray"})]}),"\n",(0,r.jsx)(i.li,{children:"all standard array types work out of the box with the default fory java implementation."}),"\n",(0,r.jsxs)(i.li,{children:["unsigned arrays: ",(0,r.jsx)(i.code,{children:"UByteArray"}),", ",(0,r.jsx)(i.code,{children:"UShortArray"}),", ",(0,r.jsx)(i.code,{children:"UIntArray"}),", ",(0,r.jsx)(i.code,{children:"ULongArray"})]}),"\n",(0,r.jsxs)(i.li,{children:["from stdlib: ",(0,r.jsx)(i.code,{children:"Pair"}),", ",(0,r.jsx)(i.code,{children:"Triple"}),", ",(0,r.jsx)(i.code,{children:"Result"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.random: ",(0,r.jsx)(i.code,{children:"Random"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.ranges: ",(0,r.jsx)(i.code,{children:"CharRange"}),", ",(0,r.jsx)(i.code,{children:"CharProgression"}),", ",(0,r.jsx)(i.code,{children:"IntRange"}),", ",(0,r.jsx)(i.code,{children:"IntProgression"}),", ",(0,r.jsx)(i.code,{children:"LongRange"}),", ",(0,r.jsx)(i.code,{children:"LongProgression"}),", ",(0,r.jsx)(i.code,{children:"UintRange"}),", ",(0,r.jsx)(i.code,{children:"UintProgression"}),", ",(0,r.jsx)(i.code,{children:"ULongRange"}),", ",(0,r.jsx)(i.code,{children:"ULongProgression"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.text: ",(0,r.jsx)(i.code,{children:"Regex"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.time: ",(0,r.jsx)(i.code,{children:"Duration"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.uuid: ",(0,r.jsx)(i.code,{children:"Uuid"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Additional support is added for the following classes in kotlin:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Unsigned primitives: ",(0,r.jsx)(i.code,{children:"UByte"}),", ",(0,r.jsx)(i.code,{children:"UShort"}),", ",(0,r.jsx)(i.code,{children:"UInt"}),", ",(0,r.jsx)(i.code,{children:"ULong"})]}),"\n",(0,r.jsxs)(i.li,{children:["Unsigned array types: ",(0,r.jsx)(i.code,{children:"UByteArray"}),", ",(0,r.jsx)(i.code,{children:"UShortArray"}),", ",(0,r.jsx)(i.code,{children:"UIntArray"}),", ",(0,r.jsx)(i.code,{children:"ULongArray"})]}),"\n",(0,r.jsxs)(i.li,{children:["Empty collections: ",(0,r.jsx)(i.code,{children:"emptyList"}),", ",(0,r.jsx)(i.code,{children:"emptyMap"}),", ",(0,r.jsx)(i.code,{children:"emptySet"})]}),"\n",(0,r.jsxs)(i.li,{children:["Collections: ",(0,r.jsx)(i.code,{children:"ArrayDeque"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.time: ",(0,r.jsx)(i.code,{children:"Duration"})]}),"\n",(0,r.jsxs)(i.li,{children:["kotlin.uuid: ",(0,r.jsx)(i.code,{children:"Uuid"})]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"data-class-default-value-support",children:"Data Class Default Value Support"}),"\n",(0,r.jsx)(i.p,{children:"Apache Fory\u2122 Kotlin provides support for Kotlin data class default values during serialization and deserialization. This feature allows for backward and forward compatibility when data class schemas evolve."}),"\n",(0,r.jsx)(i.p,{children:"When a Kotlin data class has parameters with default values, Apache Fory\u2122 can:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Detect default values"})," using Kotlin reflection"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Apply default values"})," during deserialization when fields are missing from serialized data"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Support schema evolution"})," by allowing new fields with defaults to be added without breaking existing serialized data"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>t,a:()=>a});var r=n(67294);const s={},l=r.createContext(s);function a(e){const i=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:i},e.children)}}}]);