"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[5237],{31254:(e,r,a)=>{a.d(r,{AI:()=>i,Gj:()=>n,NN:()=>s,VZ:()=>o,of:()=>t});const n="Copied!",t="Failed to copy!",s=2e3,i={java:{label:"Java",code:"import java.util.List;\nimport java.util.Arrays;\nimport org.apache.fory.*;\n\npublic class Example {\n  // Note that Fory instances should be reused between\n  // multiple serializations of different objects.\n  static ThreadSafeFory fory = Fory.builder().withLanguage(Language.JAVA)\n    // Allow to deserialize objects unknown types,\n    // more flexible but less secure.\n    // .requireClassRegistration(false)\n    .buildThreadSafeFory();\n\n  static {\n    // Registering types can reduce class name serialization\n    // overhead but not mandatory.\n    // If secure mode enabled\n    //all custom types must be registered.\n    fory.register(SomeClass.class);\n  }\n\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    byte[] bytes = fory.serialize(object);\n    System.out.println(fory.deserialize(bytes));\n  }\n}"},kotlin:{label:"Kotlin",code:'import org.apache.fory.Fory\nimport org.apache.fory.ThreadSafeFory\nimport org.apache.fory.serializer.kotlin.KotlinSerializers\n\ndata class Person(val name: String, val id: Long, val github: String)\ndata class Point(val x : Int, val y : Int, val z : Int)\n\nfun main(args: Array<String>) {\n    // Note: following fory init code should be executed only once in a global scope instead\n    // of initializing it everytime when serialization.\n    val fory: ThreadSafeFory = Fory.builder().requireClassRegistration(true).buildThreadSafeFory()\n    KotlinSerializers.registerSerializers(fory)\n    fory.register(Person::class.java)\n    fory.register(Point::class.java)\n\n    val p = Person("Shawn Yang", 1, "https://github.com/chaokunyang")\n    println(fory.deserialize(fory.serialize(p)))\n    println(fory.deserialize(fory.serialize(Point(1, 2, 3))))\n}'},scala:{label:"Scala",code:'case class Person(name: String, id: Long, github: String)\ncase class Point(x : Int, y : Int, z : Int)\n\nobject ScalaExample {\n  val fory: Fory = Fory.builder().withScalaOptimizationEnabled(true).build()\n  // Register optimized fory serializers for scala\n  ScalaSerializers.registerSerializers(fory)\n  fory.register(classOf[Person])\n  fory.register(classOf[Point])\n\n  def main(args: Array[String]): Unit = {\n    val p = Person("Shawn Yang", 1, "https://github.com/chaokunyang")\n    println(fory.deserialize(fory.serialize(p)))\n    println(fory.deserialize(fory.serialize(Point(1, 2, 3))))\n  }\n}'},rust:{label:"Rust",code:'use fory::{Fory, Error};\nuse fory::ForyObject;\n\n#[derive(ForyObject, Debug, PartialEq)]\nstruct User {\n\tname: String,\n\tage: i32,\n\temail: String,\n}\n\nfn main() -> Result<(), Error> {\n\tlet mut fory = Fory::default();\n\tfory.register::<User>(1)?;\n\n\tlet user = User { name: "Alice".into(), age: 30, email: "alice@example.com".into() };\n\tlet bytes = fory.serialize(&user)?;\n\tlet decoded: User = fory.deserialize(&bytes)?;\n\tassert_eq!(user, decoded);\n\tOk(())\n}'},python:{label:"Python",code:'import pyfory\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    scores: List[int]\n    metadata: Dict[str, str]\n\n# Python mode - supports all Python types including dataclasses\nfory = pyfory.Fory(xlang=False, ref=True)\nfory.register(Person)\nperson = Person("Bob", 25, [88, 92, 85], {"team": "engineering"})\ndata = fory.serialize(person)\nresult = fory.deserialize(data)\nprint(result)  # Person(name=\'Bob\', age=25, ...)'}},o=[{key:"java",src:"/home/java.svg",label:"Java"},{key:"python",src:"/home/python.svg",label:"Python"},{key:"golang",src:"/home/golang.svg",label:"Golang"},{key:"javascript",src:"/home/JavaScript.svg",label:"JavaScript"},{key:"rust",src:"/home/Rust.svg",label:"Rust"},{key:"more",src:"/home/more.svg",label:"More"}]},50510:(e,r,a)=>{a.r(r),a.d(r,{default:()=>g});var n=a(67294),t=a(44996),s=a(34209),i=a(30703),o=a(89508),l=a(89681),c=a(31254),d=a(85893);const y=6e3;function g(){const[e,r]=(0,n.useState)("java"),[a,g]=(0,n.useState)(""),u=(0,t.Z)("/home/programming.svg"),f=(0,n.useRef)(null),m=Object.keys(c.AI);(0,n.useEffect)((()=>(p(),()=>h())),[]);const p=()=>{h(),f.current=setInterval((()=>{r((e=>{const r=m.indexOf(e);return m[(r+1)%m.length]}))}),y)},h=()=>{f.current&&clearInterval(f.current)};return(0,d.jsxs)("div",{className:"flex flex-col md:flex-row items-center justify-center md:m-32 m-6 space-y-6 md:space-y-0 md:space-x-8",children:[(0,d.jsx)("div",{className:"hidden md:flex w-full md:w-1/2 justify-center",children:(0,d.jsx)("img",{src:u,alt:"programming-coding",className:"w-full max-w-md h-auto"})}),(0,d.jsxs)("div",{className:"relative text-sm overflow-hidden bg-[#1e1e2f]rounded-lg",style:{width:"100%",maxWidth:"600px",height:"666px"},children:[(0,d.jsx)("div",{className:"flex items-center px-3 py-2 bg-[#1e1e2f]",children:(0,d.jsx)("div",{className:"space-x-3 overflow-auto",children:m.map((a=>(0,d.jsx)("button",{onClick:()=>(e=>{r(e),p()})(a),className:"px-3 py-1 rounded-full text-sm font-medium border border-gray-500 duration-200 "+(e===a?"bg-blue-600 text-white":"bg-gray-600 text-gray-300 hover:bg-gray-500"),children:c.AI[a].label},a)))})}),(0,d.jsx)(o.M,{mode:"wait",children:(0,d.jsxs)(l.E.div,{initial:{opacity:0,x:50},animate:{opacity:1,x:0},exit:{opacity:0,x:-50},transition:{duration:.4},className:"relative w-full h-full",children:[(0,d.jsx)("button",{onClick:()=>{navigator.clipboard.writeText(c.AI[e].code).then((()=>{g(c.Gj||"Copied!"),setTimeout((()=>g("")),c.NN)})).catch((()=>{g(c.of||"Copy failed")}))},className:"absolute top-5 right-5 z-10 text-xs px-2 py-1 rounded border border-gray-500 text-white hover:bg-white/10 transition",children:a||"Copy"}),(0,d.jsx)("div",{className:"w-full h-full overflow-auto px-4 py-2",children:(0,d.jsx)(s.Z,{language:e,style:i.Z,wrapLongLines:!0,codeTagProps:{className:"text-sm bg-transparent"},children:c.AI[e].code})})]},e)})]})]})}}}]);