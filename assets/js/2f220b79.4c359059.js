"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[7878],{50455:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});var n=r(85893),a=r(11151);const s={title:"GraalVM Guide",sidebar_position:6,id:"graalvm_serialization",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},o=void 0,t={id:"docs/guide/graalvm_serialization",title:"GraalVM Guide",description:"GraalVM Native Image",source:"@site/docs/docs/guide/graalvm_guide.md",sourceDirName:"docs/guide",slug:"/docs/guide/graalvm_serialization",permalink:"/docs/next/docs/guide/graalvm_serialization",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/docs/docs/guide/graalvm_guide.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"GraalVM Guide",sidebar_position:6,id:"graalvm_serialization",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},sidebar:"docsSidebar",previous:{title:"Row Format Guide",permalink:"/docs/next/docs/guide/row_format"},next:{title:"Development",permalink:"/docs/next/docs/guide/development"}},l={},c=[{value:"GraalVM Native Image",id:"graalvm-native-image",level:2},{value:"Registering Your Classes",id:"registering-your-classes",level:2},{value:"Not thread-safe Fory",id:"not-thread-safe-fory",level:2},{value:"Thread-safe Fory",id:"thread-safe-fory",level:2},{value:"Framework Integration",id:"framework-integration",level:2},{value:"Benchmark",id:"benchmark",level:2},{value:"Struct Benchmark",id:"struct-benchmark",level:3},{value:"Class Fields",id:"class-fields",level:4},{value:"Benchmark Results",id:"benchmark-results",level:4},{value:"Pojo Benchmark",id:"pojo-benchmark",level:3},{value:"Class Fields",id:"class-fields-1",level:4},{value:"Benchmark Results",id:"benchmark-results-1",level:4}];function d(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"graalvm-native-image",children:"GraalVM Native Image"}),"\n",(0,n.jsxs)(i.p,{children:["GraalVM ",(0,n.jsx)(i.code,{children:"native image"})," can compile java code into native code ahead to build faster, smaller, leaner applications.\nThe native image doesn't have a JIT compiler to compile bytecode into machine code, and doesn't support\nreflection unless configure reflection file."]}),"\n",(0,n.jsxs)(i.p,{children:["Apache Fory\u2122 runs on GraalVM native image pretty well. Apache Fory\u2122 generates all serializer code for ",(0,n.jsx)(i.code,{children:"Fory JIT framework"})," and ",(0,n.jsx)(i.code,{children:"MethodHandle/LambdaMetafactory"})," at graalvm build time. Then use those generated code for serialization at runtime without\nany extra cost, the performance is great."]}),"\n",(0,n.jsxs)(i.p,{children:["In order to use Apache Fory\u2122 on graalvm native image, you must create Fory as an ",(0,n.jsx)(i.strong,{children:"static"})," field of a class, and ",(0,n.jsx)(i.strong,{children:"register"})," all classes at\nthe enclosing class initialize time. Then configure ",(0,n.jsx)(i.code,{children:"native-image.properties"})," under\n",(0,n.jsx)(i.code,{children:"resources/META-INF/native-image/$xxx/native-image.properties"})," to tell graalvm to init the class at native image\nbuild time. For example, here we configure ",(0,n.jsx)(i.code,{children:"org.apache.fory.graalvm.Example"})," class be init at build time:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.Example\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsxs)(i.strong,{children:["The main benefit of using Fory with GraalVM is that you don't need to configure ",(0,n.jsx)(i.a,{href:"https://www.graalvm.org/latest/reference-manual/native-image/metadata/#specifying-reflection-metadata-in-json",children:"reflection json"})," or\n",(0,n.jsx)(i.a,{href:"https://www.graalvm.org/latest/reference-manual/native-image/metadata/#serialization",children:"serialization json"})," for your serializable classes!"]})," This eliminates the tedious, cumbersome and error-prone configuration process."]}),"\n",(0,n.jsxs)(i.p,{children:["Fory achieves this by using ",(0,n.jsx)(i.strong,{children:"codegen instead of reflection"})," - all serialization code is generated at build time when you call:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"fory.register(YourClass.class)"})," to register your classes"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"fory.ensureSerializersCompiled()"})," to compile serializers at build time"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Note that Fory ",(0,n.jsx)(i.code,{children:"asyncCompilationEnabled"})," option will be disabled automatically for graalvm native image since graalvm\nnative image doesn't support JIT at the image run time."]}),"\n",(0,n.jsx)(i.h2,{id:"registering-your-classes",children:"Registering Your Classes"}),"\n",(0,n.jsx)(i.p,{children:"If you encounter a GraalVM error like:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Type com.example.MyClass is instantiated reflectively but was never registered\n"})}),"\n",(0,n.jsxs)(i.p,{children:["This means you need to register your class with Fory. ",(0,n.jsx)(i.strong,{children:"Do NOT add it to reflect-config.json"})," - instead, register it with Fory's codegen system:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"static {\n  fory = Fory.builder().build();\n  // register class\n  fory.register(MyClass.class);\n  // ensure all serializers for registered classes being compiled by fory at graalvm native image build time.\n  fory.ensureSerializersCompiled();\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["And make sure the class executing static registering is initialized at build time in ",(0,n.jsx)(i.code,{children:"native-image.properties"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-properties",children:"Args = --initialize-at-build-time=com.example.MyForySerializer\n"})}),"\n",(0,n.jsx)(i.p,{children:"This approach is much more efficient than reflection-based serialization and eliminates the need for complex GraalVM configuration files."}),"\n",(0,n.jsx)(i.h2,{id:"not-thread-safe-fory",children:"Not thread-safe Fory"}),"\n",(0,n.jsx)(i.p,{children:"Example:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'import org.apache.fory.Fory;\nimport org.apache.fory.util.Preconditions;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class Example {\n  public record Record (\n    int f1,\n    String f2,\n    List<String> f3,\n    Map<String, Long> f4) {\n  }\n\n  static Fory fory;\n\n  static {\n    fory = Fory.builder().build();\n    // register class\n    fory.register(Record.class);\n    // ensure all serializers for registered classes being compiled by fory at graalvm native image build time.\n    fory.ensureSerializersCompiled();\n  }\n\n  public static void main(String[] args) {\n    Record record = new Record(10, "abc", List.of("str1", "str2"), Map.of("k1", 10L, "k2", 20L));\n    System.out.println(record);\n    byte[] bytes = fory.serialize(record);\n    Object o = fory.deserialize(bytes);\n    System.out.println(o);\n    Preconditions.checkArgument(record.equals(o));\n  }\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["Then add ",(0,n.jsx)(i.code,{children:"org.apache.fory.graalvm.Example"})," build time init to ",(0,n.jsx)(i.code,{children:"native-image.properties"})," configuration:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.Example\n"})}),"\n",(0,n.jsx)(i.h2,{id:"thread-safe-fory",children:"Thread-safe Fory"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:'import org.apache.fory.Fory;\nimport org.apache.fory.ThreadLocalFory;\nimport org.apache.fory.ThreadSafeFory;\nimport org.apache.fory.util.Preconditions;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class ThreadSafeExample {\n  public record Foo (\n    int f1,\n    String f2,\n    List<String> f3,\n    Map<String, Long> f4) {\n  }\n\n  static ThreadSafeFory fory;\n\n  static {\n    fory = new ThreadLocalFory(classLoader -> {\n      Fory f = Fory.builder().build();\n      // register class\n      f.register(Foo.class);\n      // ensure all serializers for registered classes being compiled by fory at graalvm native image build time.\n      fory.ensureSerializersCompiled();\n      return f;\n    });\n  }\n\n  public static void main(String[] args) {\n    System.out.println(fory.deserialize(fory.serialize("abc")));\n    System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3))));\n    System.out.println(fory.deserialize(fory.serialize(Map.of("k1", 1, "k2", 2))));\n    Foo foo = new Foo(10, "abc", List.of("str1", "str2"), Map.of("k1", 10L, "k2", 20L));\n    System.out.println(foo);\n    byte[] bytes = fory.serialize(foo);\n    Object o = fory.deserialize(bytes);\n    System.out.println(o);\n  }\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["Then add ",(0,n.jsx)(i.code,{children:"org.apache.fory.graalvm.ThreadSafeExample"})," build time init to ",(0,n.jsx)(i.code,{children:"native-image.properties"})," configuration:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample\n"})}),"\n",(0,n.jsx)(i.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,n.jsxs)(i.p,{children:["For framework developers, if you want to integrate fory for serialization, you can provided a configuration file to let\nthe users to list all the classes they want to serialize, then you can load those classes and invoke\n",(0,n.jsx)(i.code,{children:"org.apache.fory.Fory.register(Class<?>)"})," to register those classes in your Fory integration class. After all classes are registered, you need to invoke ",(0,n.jsx)(i.code,{children:"org.apache.fory.Fory.ensureSerializersCompiled()"})," to compile serializers at build time, and configure that class be initialized at graalvm native image build time."]}),"\n",(0,n.jsx)(i.h2,{id:"benchmark",children:"Benchmark"}),"\n",(0,n.jsx)(i.p,{children:"Here we give two class benchmarks between Fory and Graalvm Serialization."}),"\n",(0,n.jsx)(i.p,{children:"When Fory compression is disabled:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Struct: Fory is ",(0,n.jsx)(i.code,{children:"46x speed, 43% size"})," compared to JDK."]}),"\n",(0,n.jsxs)(i.li,{children:["Pojo: Fory is ",(0,n.jsx)(i.code,{children:"12x speed, 56% size"})," compared to JDK."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"When Fory compression is enabled:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Struct: Fory is ",(0,n.jsx)(i.code,{children:"24x speed, 31% size"})," compared to JDK."]}),"\n",(0,n.jsxs)(i.li,{children:["Pojo: Fory is ",(0,n.jsx)(i.code,{children:"12x speed, 48% size"})," compared to JDK."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["See [",(0,n.jsx)(i.a,{href:"https://github.com/apache/fory/blob/main/integration_tests/graalvm_tests/src/main/java/org/apache/fory/graalvm/Benchmark.java",children:"Benchmark.java"}),"] for benchmark code."]}),"\n",(0,n.jsx)(i.h3,{id:"struct-benchmark",children:"Struct Benchmark"}),"\n",(0,n.jsx)(i.h4,{id:"class-fields",children:"Class Fields"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"public class Struct implements Serializable {\n  public int f1;\n  public long f2;\n  public float f3;\n  public double f4;\n  public int f5;\n  public long f6;\n  public float f7;\n  public double f8;\n  public int f9;\n  public long f10;\n  public float f11;\n  public double f12;\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"benchmark-results",children:"Benchmark Results"}),"\n",(0,n.jsx)(i.p,{children:"No compression:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Struct\nCompress number: false\nFory size: 76.0\nJDK size: 178.0\nFory serialization took mills: 49\nJDK serialization took mills: 2254\nCompare speed: Fory is 45.70x speed of JDK\nCompare size: Fory is 0.43x size of JDK\n"})}),"\n",(0,n.jsx)(i.p,{children:"Compress number:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Struct\nCompress number: true\nFory size: 55.0\nJDK size: 178.0\nFory serialization took mills: 130\nJDK serialization took mills: 3161\nCompare speed: Fory is 24.16x speed of JDK\nCompare size: Fory is 0.31x size of JDK\n"})}),"\n",(0,n.jsx)(i.h3,{id:"pojo-benchmark",children:"Pojo Benchmark"}),"\n",(0,n.jsx)(i.h4,{id:"class-fields-1",children:"Class Fields"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-java",children:"public class Foo implements Serializable {\n  int f1;\n  String f2;\n  List<String> f3;\n  Map<String, Long> f4;\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"benchmark-results-1",children:"Benchmark Results"}),"\n",(0,n.jsx)(i.p,{children:"No compression:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Foo\nCompress number: false\nFory size: 541.0\nJDK size: 964.0\nFory serialization took mills: 1663\nJDK serialization took mills: 16266\nCompare speed: Fory is 12.19x speed of JDK\nCompare size: Fory is 0.56x size of JDK\n"})}),"\n",(0,n.jsx)(i.p,{children:"Compress number:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Foo\nCompress number: true\nFory size: 459.0\nJDK size: 964.0\nFory serialization took mills: 1289\nJDK serialization took mills: 15069\nCompare speed: Fory is 12.11x speed of JDK\nCompare size: Fory is 0.48x size of JDK\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,i,r)=>{r.d(i,{Z:()=>t,a:()=>o});var n=r(67294);const a={},s=n.createContext(a);function o(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);