"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[6658],{3846:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var r=a(85893),s=a(11151);const i={id:"usage",title:"Usage",sidebar_position:1},o=void 0,t={id:"docs/start/usage",title:"Usage",description:"This section provides quick examples for getting started with Apache Fory\u2122.",source:"@site/docs/docs/start/usage.md",sourceDirName:"docs/start",slug:"/docs/start/usage",permalink:"/docs/next/docs/start/usage",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/docs/docs/start/usage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"usage",title:"Usage",sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Install",permalink:"/docs/next/docs/start/install"},next:{title:"Java Serialization",permalink:"/docs/next/docs/guide/java_serialization"}},l={},c=[{value:"Native Serialization",id:"native-serialization",level:2},{value:"Java Serialization",id:"java-serialization",level:3},{value:"Python Serialization",id:"python-serialization",level:3},{value:"Scala Serialization",id:"scala-serialization",level:3},{value:"Kotlin Serialization",id:"kotlin-serialization",level:3},{value:"Cross-Language Serialization",id:"cross-language-serialization",level:2},{value:"Row Format Encoding",id:"row-format-encoding",level:2},{value:"Java",id:"java",level:3},{value:"Python",id:"python",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This section provides quick examples for getting started with Apache Fory\u2122."}),"\n",(0,r.jsx)(n.h2,{id:"native-serialization",children:"Native Serialization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Always use native mode when working with a single language."})," Native mode delivers optimal performance by avoiding the type metadata overhead required for cross-language compatibility."]}),"\n",(0,r.jsx)(n.p,{children:"Xlang mode introduces additional metadata encoding costs and restricts serialization to types that are common across all supported languages. Language-specific types will be rejected during serialization in xlang-mode."}),"\n",(0,r.jsx)(n.h3,{id:"java-serialization",children:"Java Serialization"}),"\n",(0,r.jsx)(n.p,{children:"When you don't need cross-language support, use Java mode for optimal performance."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.*;\nimport org.apache.fory.config.*;\n\npublic class Example {\n  public static class Person {\n    String name;\n    int age;\n  }\n\n  public static void main(String[] args) {\n    // Create Fory instance - should be reused across serializations\n    BaseFory fory = Fory.builder()\n      .withLanguage(Language.JAVA)\n      .requireClassRegistration(true)\n      // replace `build` with `buildThreadSafeFory` for Thread-Safe Usage\n      .build();\n    // Register your classes (required when class registration is enabled)\n    fory.register(Person.class);\n    // Serialize\n    Person person = new Person();\n    person.name = "chaokunyang";\n    person.age = 28;\n    byte[] bytes = fory.serialize(person);\n    Person result = (Person) fory.deserialize(bytes);\n    System.out.println(result.name + " " + result.age);  // Output: chaokunyang 28\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For detailed Java usage including compatibility modes, compression, and advanced features, see ",(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/java_serialization",children:"Java Serialization Guide"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"python-serialization",children:"Python Serialization"}),"\n",(0,r.jsx)(n.p,{children:"Python native mode provides a high-performance drop-in replacement for pickle/cloudpickle with better speed and compatibility."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\nimport pyfory\n\n@dataclass\nclass Person:\n    name: str\n    age: pyfory.int32\n\n# Create Fory instance - should be reused across serializations\nfory = pyfory.Fory()\n# Register your classes (required when class registration is enabled)\nfory.register_type(Person)\nperson = Person(name="chaokunyang", age=28)\ndata = fory.serialize(person)\nresult = fory.deserialize(data)\nprint(result.name, result.age)  # Output: chaokunyang 28\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For detailed Python usage including type hints, compatibility modes, and advanced features, see ",(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/python_serialization",children:"Python Guide"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"scala-serialization",children:"Scala Serialization"}),"\n",(0,r.jsx)(n.p,{children:"Scala native mode provides optimized serialization for Scala-specific types including case classes, collections, and Option types."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'import org.apache.fory.Fory\nimport org.apache.fory.config.Language\nimport org.apache.fory.serializer.scala.ScalaSerializers\n\ncase class Person(name: String, age: Int)\n\nobject Example {\n  def main(args: Array[String]): Unit = {\n    // Create Fory instance - should be reused across serializations\n    val fory = Fory.builder()\n      .withLanguage(Language.JAVA)\n      .requireClassRegistration(true)\n      .build()\n    // Register Scala serializers for Scala-specific types\n    ScalaSerializers.registerSerializers(fory)\n    // Register your case classes\n    fory.register(classOf[Person])\n    val bytes = fory.serialize(Person("chaokunyang", 28))\n    val result = fory.deserialize(bytes).asInstanceOf[Person]\n    println(s"${result.name} ${result.age}")  // Output: chaokunyang 28\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For detailed Scala usage including collection serialization and integration patterns, see ",(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/scala_serialization",children:"Scala Guide"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"kotlin-serialization",children:"Kotlin Serialization"}),"\n",(0,r.jsx)(n.p,{children:"Kotlin native mode provides optimized serialization for Kotlin-specific types including data classes, nullable types, and Kotlin collections."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'import org.apache.fory.Fory\nimport org.apache.fory.config.Language\nimport org.apache.fory.serializer.kotlin.KotlinSerializers\n\ndata class Person(val name: String, val age: Int)\n\nfun main() {\n    // Create Fory instance - should be reused across serializations\n    val fory = Fory.builder()\n        .withLanguage(Language.JAVA)\n        .requireClassRegistration(true)\n        .build()\n    // Register Kotlin serializers for Kotlin-specific types\n    KotlinSerializers.registerSerializers(fory)\n    // Register your data classes\n    fory.register(Person::class.java)\n    val bytes = fory.serialize(Person("chaokunyang", 28))\n    val result = fory.deserialize(bytes) as Person\n    println("${result.name} ${result.age}")  // Output: chaokunyang 28\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For detailed Kotlin usage including null safety and default value support, see ",(0,r.jsx)(n.a,{href:"https://github.com/apache/fory/blob/main/kotlin/README.md",children:"kotlin/README.md"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"cross-language-serialization",children:"Cross-Language Serialization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Only use xlang mode when you need cross-language data exchange."})," Xlang mode adds type metadata overhead for cross-language compatibility and only supports types that can be mapped across all languages. For single-language use cases, always prefer native mode for better performance."]}),"\n",(0,r.jsxs)(n.p,{children:["The following examples demonstrate serializing a ",(0,r.jsx)(n.code,{children:"Person"})," object across Java and Rust. For other languages (Python, Go, JavaScript, etc.), simply set the language mode to ",(0,r.jsx)(n.code,{children:"XLANG"})," and follow the same pattern."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Java"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.*;\nimport org.apache.fory.config.*;\n\npublic class XlangExample {\n  public record Person(String name, int age) {}\n\n  public static void main(String[] args) {\n    // Create Fory instance with XLANG mode\n    Fory fory = Fory.builder()\n      .withLanguage(Language.XLANG)\n      .build();\n\n    // Register with cross-language type id/name\n    fory.register(Person.class, 1);\n    // fory.register(Person.class, "example.Person");\n    Person person = new Person("chaokunyang", 28);\n    byte[] bytes = fory.serialize(person);\n    // bytes can be deserialized by Rust, Python, Go, or other languages\n    Person result = (Person) fory.deserialize(bytes);\n    System.out.println(result.name + " " + result.age);  // Output: chaokunyang 28\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rust"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use fory::{Fory, ForyObject};\n\n#[derive(ForyObject, Debug)]\nstruct Person {\n    name: String,\n    age: i32,\n}\n\nfn main() -> Result<(), Error> {\n    let mut fory = Fory::default();\n    fory.register::<Person>(1)?;\n    // fory.register_by_name::<Person>("example.Person")?;\n    let person = Person {\n        name: "chaokunyang".to_string(),\n        age: 28,\n    };\n    let bytes = fory.serialize(&person);\n    // bytes can be deserialized by Java, Python, Go, or other languages\n    let result: Person = fory.deserialize(&bytes)?;\n    println!("{} {}", result.name, result.age);  // Output: chaokunyang 28\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Points for Cross-Language Serialization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"Language.XLANG"})," mode in all languages"]}),"\n",(0,r.jsxs)(n.li,{children:["Register types with ",(0,r.jsx)(n.strong,{children:"consistent IDs or names"})," across all languages:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By ID"})," (",(0,r.jsx)(n.code,{children:"fory.register(Person.class, 1)"}),"): Faster serialization, more compact encoding, but requires coordination to avoid ID conflicts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By name"})," (",(0,r.jsx)(n.code,{children:'fory.register(Person.class, "example.Person")'}),"): More flexible, less prone to conflicts, easier to manage across teams, but slightly larger encoding"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Type IDs/names must match across all languages for successful deserialization"}),"\n",(0,r.jsxs)(n.li,{children:["Only use types that have cross-language mappings (see ",(0,r.jsx)(n.a,{href:"/docs/next/specification/xlang_type_mapping",children:"Type Mapping"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For examples with ",(0,r.jsx)(n.strong,{children:"circular references"}),", ",(0,r.jsx)(n.strong,{children:"shared references"}),", and ",(0,r.jsx)(n.strong,{children:"polymorphism"})," across languages, see:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/xlang_serialization",children:"Cross-Language Serialization Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/java_serialization#cross-language-serialization",children:"Java Serialization Guide - Cross Language"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/python_serialization#cross-language-serialization",children:"Python Guide - Cross Language"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"row-format-encoding",children:"Row Format Encoding"}),"\n",(0,r.jsx)(n.p,{children:"Row format provides zero-copy random access to serialized data, making it ideal for analytics workloads and data processing pipelines."}),"\n",(0,r.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.format.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class Bar {\n  String f1;\n  List<Long> f2;\n}\n\npublic class Foo {\n  int f1;\n  List<Integer> f2;\n  Map<String, Integer> f3;\n  List<Bar> f4;\n}\n\nRowEncoder<Foo> encoder = Encoders.bean(Foo.class);\nFoo foo = new Foo();\nfoo.f1 = 10;\nfoo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());\nfoo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -> "k"+i, i -> i));\n\nList<Bar> bars = new ArrayList<>(1000000);\nfor (int i = 0; i < 1000000; i++) {\n  Bar bar = new Bar();\n  bar.f1 = "s" + i;\n  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());\n  bars.add(bar);\n}\nfoo.f4 = bars;\n\n// Serialize to row format (can be zero-copy read by Python)\nBinaryRow binaryRow = encoder.toRow(foo);\n\n// Deserialize entire object\nFoo newFoo = encoder.fromRow(binaryRow);\n\n// Zero-copy access to nested fields without full deserialization\nBinaryArray binaryArray2 = binaryRow.getArray(1);  // Access f2 field\nBinaryArray binaryArray4 = binaryRow.getArray(3);  // Access f4 field\nBinaryRow barStruct = binaryArray4.getStruct(10);   // Access 11th Bar element\nlong value = barStruct.getArray(1).getInt64(5);     // Access nested value\n\n// Partial deserialization\nRowEncoder<Bar> barEncoder = Encoders.bean(Bar.class);\nBar newBar = barEncoder.fromRow(barStruct);\nBar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\nfrom typing import List, Dict\nimport pyarrow as pa\nimport pyfory\n\n@dataclass\nclass Bar:\n    f1: str\n    f2: List[pa.int64]\n\n@dataclass\nclass Foo:\n    f1: pa.int32\n    f2: List[pa.int32]\n    f3: Dict[str, pa.int32]\n    f4: List[Bar]\n\nencoder = pyfory.encoder(Foo)\nfoo = Foo(\n    f1=10,\n    f2=list(range(1000_000)),\n    f3={f"k{i}": i for i in range(1000_000)},\n    f4=[Bar(f1=f"s{i}", f2=list(range(10))) for i in range(1000_000)]\n)\n\n# Serialize to row format\nbinary: bytes = encoder.to_row(foo).to_bytes()\n\n# Zero-copy random access without full deserialization\nfoo_row = pyfory.RowData(encoder.schema, binary)\nprint(foo_row.f2[100000])           # Access element directly\nprint(foo_row.f4[100000].f1)        # Access nested field\nprint(foo_row.f4[200000].f2[5])     # Access deeply nested field\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For more details on row format, see ",(0,r.jsx)(n.a,{href:"/docs/next/docs/guide/row_format",children:"Row Format Guide"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>t,a:()=>o});var r=a(67294);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);