"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[9087],{33369:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var s=r(85893),i=r(11151);const a={title:"Python Serialization",sidebar_position:1,id:"python_serialization",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},o="Apache Fory\u2122 Python",t={id:"docs/guide/python_serialization",title:"Python Serialization",description:"Build Status",source:"@site/docs/docs/guide/python_guide.md",sourceDirName:"docs/guide",slug:"/docs/guide/python_serialization",permalink:"/docs/next/docs/guide/python_serialization",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/docs/docs/guide/python_guide.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Python Serialization",sidebar_position:1,id:"python_serialization",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},sidebar:"docsSidebar",previous:{title:"Java Serialization Guide",permalink:"/docs/next/docs/guide/java_object_graph_guide"},next:{title:"Rust Serialization",permalink:"/docs/next/docs/guide/rust_serialization"}},l={},c=[{value:"\ud83d\ude80 Key Features",id:"-key-features",level:2},{value:"\ud83d\udd27 <strong>Flexible Serialization Modes</strong>",id:"-flexible-serialization-modes",level:3},{value:"\ud83c\udfaf Versatile Serialization Features",id:"-versatile-serialization-features",level:3},{value:"\u26a1 <strong>Blazing Fast Performance</strong>",id:"-blazing-fast-performance",level:3},{value:"\ud83d\udce6 Compact Data Size",id:"-compact-data-size",level:3},{value:"\ud83d\udee1\ufe0f <strong>Security &amp; Safety</strong>",id:"\ufe0f-security--safety",level:3},{value:"\ud83d\udce6 Installation",id:"-installation",level:2},{value:"Basic Installation",id:"basic-installation",level:3},{value:"Optional Dependencies",id:"optional-dependencies",level:3},{value:"Requirements",id:"requirements",level:3},{value:"\ud83d\udc0d Python Native Serialization",id:"-python-native-serialization",level:2},{value:"Basic Object Serialization",id:"basic-object-serialization",level:3},{value:"Custom Class Serialization",id:"custom-class-serialization",level:3},{value:"Drop-in Replacement for Pickle/Cloudpickle",id:"drop-in-replacement-for-picklecloudpickle",level:3},{value:"Common Usage",id:"common-usage",level:4},{value:"Serialize Global Functions",id:"serialize-global-functions",level:4},{value:"Serialize Local Functions/Lambdas",id:"serialize-local-functionslambdas",level:4},{value:"Serialize Global Classes/Methods",id:"serialize-global-classesmethods",level:4},{value:"Serialize Local Classes/Methods",id:"serialize-local-classesmethods",level:4},{value:"Out-of-Band Buffer Serialization",id:"out-of-band-buffer-serialization",level:3},{value:"Basic Out-of-Band Serialization",id:"basic-out-of-band-serialization",level:4},{value:"Out-of-Band with Pandas DataFrames",id:"out-of-band-with-pandas-dataframes",level:4},{value:"Selective Out-of-Band Serialization",id:"selective-out-of-band-serialization",level:4},{value:"Pickle5 Compatibility",id:"pickle5-compatibility",level:4},{value:"Writing Buffers to Different Streams",id:"writing-buffers-to-different-streams",level:4},{value:"\ud83c\udfc3\u200d\u2642\ufe0f Cross-Language Object Graph Serialization",id:"\ufe0f-cross-language-object-graph-serialization",level:2},{value:"Cross-Language Sserialization",id:"cross-language-sserialization",level:3},{value:"\ud83d\udcca Row Format - Zero-Copy Processing",id:"-row-format---zero-copy-processing",level:2},{value:"Basic Row Format Usage",id:"basic-row-format-usage",level:3},{value:"Cross-Language Compatibility",id:"cross-language-compatibility",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"\ud83c\udfd7\ufe0f Core API Reference",id:"\ufe0f-core-api-reference",level:2},{value:"Fory Class",id:"fory-class",level:3},{value:"ThreadSafeFory Class",id:"threadsafefory-class",level:3},{value:"Language Modes Comparison",id:"language-modes-comparison",level:3},{value:"Python Mode (<code>xlang=False</code>)",id:"python-mode-xlangfalse",level:4},{value:"Cross-Language Mode (<code>xlang=True</code>)",id:"cross-language-mode-xlangtrue",level:4},{value:"\ud83d\udd27 Advanced Features",id:"-advanced-features",level:2},{value:"Reference Tracking &amp; Circular References",id:"reference-tracking--circular-references",level:3},{value:"Type Registration &amp; Security",id:"type-registration--security",level:3},{value:"Custom Serializers",id:"custom-serializers",level:3},{value:"Numpy &amp; Scientific Computing",id:"numpy--scientific-computing",level:3},{value:"\ud83d\udca1 Best Practices",id:"-best-practices",level:2},{value:"Production Configuration",id:"production-configuration",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Type Registration Patterns",id:"type-registration-patterns",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"\ud83d\udee0\ufe0f Migration Guide",id:"\ufe0f-migration-guide",level:2},{value:"From Pickle",id:"from-pickle",level:3},{value:"From JSON",id:"from-json",level:3},{value:"\ud83d\udea8 Security Best Practices",id:"-security-best-practices",level:2},{value:"Production Configuration",id:"production-configuration-1",level:3},{value:"Development vs Production",id:"development-vs-production",level:3},{value:"\ud83d\udc1b Troubleshooting",id:"-troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"\ud83e\udd1d Contributing",id:"-contributing",level:2},{value:"How to Contribute",id:"how-to-contribute",level:3},{value:"Development Setup",id:"development-setup",level:3},{value:"\ud83d\udcc4 License",id:"-license",level:2},{value:"\ud83d\udd17 Links",id:"-links",level:2},{value:"\ud83c\udf1f Community",id:"-community",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"apache-fory-python",children:"Apache Fory\u2122 Python"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/actions/workflows/ci.yml",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/actions/workflow/status/apache/fory/ci.yml?branch=main&style=for-the-badge&label=GITHUB%20ACTIONS&logo=github",alt:"Build Status"})}),"\n",(0,s.jsx)(n.a,{href:"https://pypi.org/project/pyfory/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/pypi/v/pyfory.svg?logo=PyPI",alt:"PyPI"})}),"\n",(0,s.jsx)(n.a,{href:"https://pypi.org/project/pyfory/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/pypi/pyversions/pyfory.svg?logo=python",alt:"Python Versions"})}),"\n",(0,s.jsx)(n.a,{href:"https://opensource.org/licenses/Apache-2.0",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/License-Apache%202.0-blue.svg",alt:"License"})}),"\n",(0,s.jsx)(n.a,{href:"https://join.slack.com/t/fory-project/shared_invite/zt-36g0qouzm-kcQSvV_dtfbtBKHRwT5gsw",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/slack-join-3f0e40?logo=slack&style=for-the-badge",alt:"Slack Channel"})}),"\n",(0,s.jsx)(n.a,{href:"https://x.com/ApacheFory",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/@ApacheFory-follow-blue?logo=x&style=for-the-badge",alt:"X"})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Apache Fory\u2122"})," is a blazing fast multi-language serialization framework powered by ",(0,s.jsx)(n.strong,{children:"JIT compilation"})," and ",(0,s.jsx)(n.strong,{children:"zero-copy"})," techniques, providing up to ",(0,s.jsx)(n.strong,{children:"ultra-fast performance"})," while maintaining ease of use and safety."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyfory"})," provides the Python implementation of Apache Fory\u2122, offering both high-performance object serialization and advanced row-format capabilities for data processing tasks."]}),"\n",(0,s.jsx)(n.h2,{id:"-key-features",children:"\ud83d\ude80 Key Features"}),"\n",(0,s.jsxs)(n.h3,{id:"-flexible-serialization-modes",children:["\ud83d\udd27 ",(0,s.jsx)(n.strong,{children:"Flexible Serialization Modes"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python native Mode"}),": Full Python compatibility, drop-in replacement for pickle/cloudpickle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-Language Mode"}),": Optimized for multi-language data exchange"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Row Format"}),": Zero-copy row format for analytics workloads"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-versatile-serialization-features",children:"\ud83c\udfaf Versatile Serialization Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared/circular reference support"})," for complex object graphs in both Python-native and cross-language modes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Polymorphism support"})," for customized types with automatic type dispatching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema evolution"})," support for backward/forward compatibility when using dataclasses in cross-language mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Out-of-band buffer support"})," for zero-copy serialization of large data structures like NumPy arrays and Pandas DataFrames, compatible with pickle protocol 5"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-blazing-fast-performance",children:["\u26a1 ",(0,s.jsx)(n.strong,{children:"Blazing Fast Performance"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extremely fast performance"})," compared to other serialization frameworks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime code generation"})," and ",(0,s.jsx)(n.strong,{children:"Cython-accelerated"})," core implementation for optimal performance"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-compact-data-size",children:"\ud83d\udce6 Compact Data Size"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compact object graph protocol"})," with minimal space overhead\u2014up to 3\xd7 size reduction compared to pickle/cloudpickle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Meta packing and sharing"})," to minimize type forward/backward compatibility space overhead"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"\ufe0f-security--safety",children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(n.strong,{children:"Security & Safety"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strict mode"})," prevents deserialization of untrusted types by type registration and checks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reference tracking"})," for handling circular references safely"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-installation",children:"\ud83d\udce6 Installation"}),"\n",(0,s.jsx)(n.h3,{id:"basic-installation",children:"Basic Installation"}),"\n",(0,s.jsx)(n.p,{children:"Install pyfory using pip:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install pyfory\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optional-dependencies",children:"Optional Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Install with row format support (requires Apache Arrow)\npip install pyfory[format]\n\n# Install from source for development\ngit clone https://github.com/apache/fory.git\ncd fory/python\npip install -e ".[dev,format]"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python"}),": 3.8 or higher"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OS"}),": Linux, macOS, Windows"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-python-native-serialization",children:"\ud83d\udc0d Python Native Serialization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyfory"})," provides a Python-native serialization mode that offers the same functionality as pickle/cloudpickle, but with ",(0,s.jsx)(n.strong,{children:"significantly better performance, smaller data size, and enhanced security features"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The binary protocol and API are similar to Fory's xlang mode, but Python-native mode can serialize any Python object\u2014including global functions, local functions, lambdas, local classes and types with customized serialization using ",(0,s.jsx)(n.code,{children:"__getstate__/__reduce__/__reduce_ex__"}),", which are not allowed in xlang mode."]}),"\n",(0,s.jsxs)(n.p,{children:["To use Python-native mode, create ",(0,s.jsx)(n.code,{children:"Fory"})," with ",(0,s.jsx)(n.code,{children:"xlang=False"}),". This mode is optimized for pure Python applications:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nfory = pyfory.Fory(xlang=False, ref=False, strict=True)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"basic-object-serialization",children:"Basic Object Serialization"}),"\n",(0,s.jsx)(n.p,{children:"Serialize and deserialize Python objects with a simple API. This example shows serializing a dictionary with mixed types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Create Fory instance\nfory = pyfory.Fory(xlang=True)\n\n# Serialize any Python object\ndata = fory.dumps({\"name\": \"Alice\", \"age\": 30, \"scores\": [95, 87, 92]})\n\n# Deserialize back to Python object\nobj = fory.loads(data)\nprint(obj)  # {'name': 'Alice', 'age': 30, 'scores': [95, 87, 92]}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": ",(0,s.jsx)(n.code,{children:"dumps()"}),"/",(0,s.jsx)(n.code,{children:"loads()"})," are aliases for ",(0,s.jsx)(n.code,{children:"serialize()"}),"/",(0,s.jsx)(n.code,{children:"deserialize()"}),". Both APIs are identical, use whichever feels more intuitive."]}),"\n",(0,s.jsx)(n.h3,{id:"custom-class-serialization",children:"Custom Class Serialization"}),"\n",(0,s.jsx)(n.p,{children:"Fory automatically handles dataclasses and custom types. Register your class once, then serialize instances seamlessly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    scores: List[int]\n    metadata: Dict[str, str]\n\n# Python mode - supports all Python types including dataclasses\nfory = pyfory.Fory(xlang=False, ref=True)\nfory.register(Person)\nperson = Person("Bob", 25, [88, 92, 85], {"team": "engineering"})\ndata = fory.serialize(person)\nresult = fory.deserialize(data)\nprint(result)  # Person(name=\'Bob\', age=25, ...)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"drop-in-replacement-for-picklecloudpickle",children:"Drop-in Replacement for Pickle/Cloudpickle"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyfory"})," can serialize any Python object with the following configuration:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For circular references"}),": Set ",(0,s.jsx)(n.code,{children:"ref=True"})," to enable reference tracking"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For functions/classes"}),": Set ",(0,s.jsx)(n.code,{children:"strict=False"})," to allow deserialization of dynamic types"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u26a0\ufe0f Security Warning"}),": When ",(0,s.jsx)(n.code,{children:"strict=False"}),", Fory will deserialize arbitrary types, which can pose security risks if data comes from untrusted sources. Only use ",(0,s.jsx)(n.code,{children:"strict=False"})," in controlled environments where you trust the data source completely."]}),"\n",(0,s.jsx)(n.h4,{id:"common-usage",children:"Common Usage"}),"\n",(0,s.jsx)(n.p,{children:"Serialize common Python objects including dicts, lists, and custom classes without any registration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\n\n# Create Fory instance\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\n# serialize common Python objects\ndata = fory.dumps({"name": "Alice", "age": 30, "scores": [95, 87, 92]})\nprint(fory.loads(data))\n\n# serialize custom objects\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\nperson = Person("Bob", 25)\ndata = fory.dumps(person)\nprint(fory.loads(data))  # Person(name=\'Bob\', age=25)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"serialize-global-functions",children:"Serialize Global Functions"}),"\n",(0,s.jsx)(n.p,{children:"Capture and get functions defined at module level. Fory deserialize and return same function object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Create Fory instance\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\n# serialize global functions\ndef my_global_function(x):\n    return 10 * x\n\ndata = fory.dumps(my_global_function)\nprint(fory.loads(data)(10))  # 100\n"})}),"\n",(0,s.jsx)(n.h4,{id:"serialize-local-functionslambdas",children:"Serialize Local Functions/Lambdas"}),"\n",(0,s.jsx)(n.p,{children:"Serialize functions with closures and lambda expressions. Fory captures the closure variables automatically:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Create Fory instance\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\n# serialize local functions with closures\ndef my_function():\n    local_var = 10\n    def local_func(x):\n        return x * local_var\n    return local_func\n\ndata = fory.dumps(my_function())\nprint(fory.loads(data)(10))  # 100\n\n# serialize lambdas\ndata = fory.dumps(lambda x: 10 * x)\nprint(fory.loads(data)(10))  # 100\n"})}),"\n",(0,s.jsx)(n.h4,{id:"serialize-global-classesmethods",children:"Serialize Global Classes/Methods"}),"\n",(0,s.jsx)(n.p,{children:"Serialize class objects, instance methods, class methods, and static methods. All method types are supported:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\nimport pyfory\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\n# serialize global class\n@dataclass\nclass Person:\n    name: str\n    age: int\n\n    def f(self, x):\n        return self.age * x\n\n    @classmethod\n    def g(cls, x):\n        return 10 * x\n\n    @staticmethod\n    def h(x):\n        return 10 * x\n\nprint(fory.loads(fory.dumps(Person))("Bob", 25))  # Person(name=\'Bob\', age=25)\n# serialize global class instance method\nprint(fory.loads(fory.dumps(Person("Bob", 20).f))(10))  # 200\n# serialize global class class method\nprint(fory.loads(fory.dumps(Person.g))(10))  # 100\n# serialize global class static method\nprint(fory.loads(fory.dumps(Person.h))(10))  # 100\n'})}),"\n",(0,s.jsx)(n.h4,{id:"serialize-local-classesmethods",children:"Serialize Local Classes/Methods"}),"\n",(0,s.jsx)(n.p,{children:"Serialize classes defined inside functions along with their methods. Useful for dynamic class creation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from dataclasses import dataclass\nimport pyfory\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\ndef create_local_class():\n    class LocalClass:\n        def f(self, x):\n            return 10 * x\n\n        @classmethod\n        def g(cls, x):\n            return 10 * x\n\n        @staticmethod\n        def h(x):\n            return 10 * x\n    return LocalClass\n\n# serialize local class\ndata = fory.dumps(create_local_class())\nprint(fory.loads(data)().f(10))  # 100\n\n# serialize local class instance method\ndata = fory.dumps(create_local_class()().f)\nprint(fory.loads(data)(10))  # 100\n\n# serialize local class method\ndata = fory.dumps(create_local_class().g)\nprint(fory.loads(data)(10))  # 100\n\n# serialize local class static method\ndata = fory.dumps(create_local_class().h)\nprint(fory.loads(data)(10))  # 100\n"})}),"\n",(0,s.jsx)(n.h3,{id:"out-of-band-buffer-serialization",children:"Out-of-Band Buffer Serialization"}),"\n",(0,s.jsx)(n.p,{children:"Fory supports pickle5-compatible out-of-band buffer serialization for efficient zero-copy handling of large data structures. This is particularly useful for NumPy arrays, Pandas DataFrames, and other objects with large memory footprints."}),"\n",(0,s.jsx)(n.p,{children:"Out-of-band serialization separates metadata from the actual data buffers, allowing for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero-copy transfers"})," when sending data over networks or IPC using ",(0,s.jsx)(n.code,{children:"memoryview"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved performance"})," for large datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pickle5 compatibility"})," using ",(0,s.jsx)(n.code,{children:"pickle.PickleBuffer"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible stream support"})," - write to any writable object (files, BytesIO, sockets, etc.)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"basic-out-of-band-serialization",children:"Basic Out-of-Band Serialization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport numpy as np\n\nfory = pyfory.Fory(xlang=False, ref=False, strict=False)\n\n# Large numpy array\narray = np.arange(10000, dtype=np.float64)\n\n# Serialize with out-of-band buffers\nbuffer_objects = []\nserialized_data = fory.serialize(array, buffer_callback=buffer_objects.append)\n\n# Convert buffer objects to memoryview for zero-copy transmission\n# For contiguous buffers (bytes, numpy arrays), this is zero-copy\n# For non-contiguous data, a copy may be created to ensure contiguity\nbuffers = [obj.getbuffer() for obj in buffer_objects]\n\n# Deserialize with out-of-band buffers (accepts memoryview, bytes, or Buffer)\ndeserialized_array = fory.deserialize(serialized_data, buffers=buffers)\n\nassert np.array_equal(array, deserialized_array)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"out-of-band-with-pandas-dataframes",children:"Out-of-Band with Pandas DataFrames"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport pandas as pd\nimport numpy as np\n\nfory = pyfory.Fory(xlang=False, ref=False, strict=False)\n\n# Create a DataFrame with numeric columns\ndf = pd.DataFrame({\n    'a': np.arange(1000, dtype=np.float64),\n    'b': np.arange(1000, dtype=np.int64),\n    'c': ['text'] * 1000\n})\n\n# Serialize with out-of-band buffers\nbuffer_objects = []\nserialized_data = fory.serialize(df, buffer_callback=buffer_objects.append)\nbuffers = [obj.getbuffer() for obj in buffer_objects]\n\n# Deserialize\ndeserialized_df = fory.deserialize(serialized_data, buffers=buffers)\n\nassert df.equals(deserialized_df)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"selective-out-of-band-serialization",children:"Selective Out-of-Band Serialization"}),"\n",(0,s.jsxs)(n.p,{children:["You can control which buffers go out-of-band by providing a callback that returns ",(0,s.jsx)(n.code,{children:"True"})," to keep data in-band or ",(0,s.jsx)(n.code,{children:"False"})," (and appending to a list) to send it out-of-band:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport numpy as np\n\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\narr1 = np.arange(1000, dtype=np.float64)\narr2 = np.arange(2000, dtype=np.float64)\ndata = [arr1, arr2]\n\nbuffer_objects = []\ncounter = 0\n\ndef selective_callback(buffer_object):\n    global counter\n    counter += 1\n    # Only send even-numbered buffers out-of-band\n    if counter % 2 == 0:\n        buffer_objects.append(buffer_object)\n        return False  # Out-of-band\n    return True  # In-band\n\nserialized = fory.serialize(data, buffer_callback=selective_callback)\nbuffers = [obj.getbuffer() for obj in buffer_objects]\ndeserialized = fory.deserialize(serialized, buffers=buffers)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"pickle5-compatibility",children:"Pickle5 Compatibility"}),"\n",(0,s.jsxs)(n.p,{children:["Fory's out-of-band serialization is fully compatible with pickle protocol 5. When objects implement ",(0,s.jsx)(n.code,{children:"__reduce_ex__(protocol)"}),", Fory automatically uses protocol 5 to enable ",(0,s.jsx)(n.code,{children:"pickle.PickleBuffer"})," support:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\nimport pickle\n\nfory = pyfory.Fory(xlang=False, ref=False, strict=False)\n\n# PickleBuffer objects are automatically supported\ndata = b"Large binary data"\npickle_buffer = pickle.PickleBuffer(data)\n\n# Serialize with buffer callback for out-of-band handling\nbuffer_objects = []\nserialized = fory.serialize(pickle_buffer, buffer_callback=buffer_objects.append)\nbuffers = [obj.getbuffer() for obj in buffer_objects]\n\n# Deserialize with buffers\ndeserialized = fory.deserialize(serialized, buffers=buffers)\nassert bytes(deserialized.raw()) == data\n'})}),"\n",(0,s.jsx)(n.h4,{id:"writing-buffers-to-different-streams",children:"Writing Buffers to Different Streams"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"BufferObject.write_to()"})," method accepts any writable stream object, making it flexible for various use cases:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport numpy as np\nimport io\n\nfory = pyfory.Fory(xlang=False, ref=False, strict=False)\n\narray = np.arange(1000, dtype=np.float64)\n\n# Collect out-of-band buffers\nbuffer_objects = []\nserialized = fory.serialize(array, buffer_callback=buffer_objects.append)\n\n# Write to different stream types\nfor buffer_obj in buffer_objects:\n    # Write to BytesIO (in-memory stream)\n    bytes_stream = io.BytesIO()\n    buffer_obj.write_to(bytes_stream)\n\n    # Write to file\n    with open('/tmp/buffer_data.bin', 'wb') as f:\n        buffer_obj.write_to(f)\n\n    # Get zero-copy memoryview (for contiguous buffers)\n    mv = buffer_obj.getbuffer()\n    assert isinstance(mv, memoryview)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": For contiguous memory buffers (like bytes, numpy arrays), ",(0,s.jsx)(n.code,{children:"getbuffer()"})," returns a zero-copy ",(0,s.jsx)(n.code,{children:"memoryview"}),". For non-contiguous data, a copy may be created to ensure contiguity."]}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-cross-language-object-graph-serialization",children:"\ud83c\udfc3\u200d\u2642\ufe0f Cross-Language Object Graph Serialization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyfory"})," supports cross-language object graph serialization, allowing you to serialize data in Python and deserialize it in Java, Go, Rust, or other supported languages."]}),"\n",(0,s.jsxs)(n.p,{children:["The binary protocol and API are similar to ",(0,s.jsx)(n.code,{children:"pyfory"}),"'s python-native mode, but Python-native mode can serialize any Python object\u2014including global functions, local functions, lambdas, local classes, and types with customized serialization using ",(0,s.jsx)(n.code,{children:"__getstate__/__reduce__/__reduce_ex__"}),", which are not allowed in xlang mode."]}),"\n",(0,s.jsxs)(n.p,{children:["To use xlang mode, create ",(0,s.jsx)(n.code,{children:"Fory"})," with ",(0,s.jsx)(n.code,{children:"xlang=True"}),". This mode is for xlang serialization applications:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nfory = pyfory.Fory(xlang=True, ref=False, strict=True)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cross-language-sserialization",children:"Cross-Language Sserialization"}),"\n",(0,s.jsx)(n.p,{children:"Serialize data in Python and deserialize it in Java, Go, Rust, or other supported languages. Both sides must register the same type with matching names:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python (Serializer)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\n\n# Cross-language mode for interoperability\nf = pyfory.Fory(xlang=True, ref=True)\n\n# Register type for cross-language compatibility\n@dataclass\nclass Person:\n    name: str\n    age: pyfory.int32\n\nf.register(Person, typename="example.Person")\n\nperson = Person("Charlie", 35)\nbinary_data = f.serialize(person)\n# binary_data can now be sent to Java, Go, etc.\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Java (Deserializer)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.*;\n\npublic class Person {\n    public String name;\n    public int age;\n}\n\nFory fory = Fory.builder()\n    .withLanguage(Language.XLANG)\n    .withRefTracking(true)\n    .build();\n\nfory.register(Person.class, "example.Person");\nPerson person = (Person) fory.deserialize(binaryData);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-row-format---zero-copy-processing",children:"\ud83d\udcca Row Format - Zero-Copy Processing"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fury\u2122 provides a random-access row format that enables reading nested fields from binary data without full deserialization. This drastically reduces overhead when working with large objects where only partial data access is needed. The format also supports memory-mapped files for ultra-low memory footprint."}),"\n",(0,s.jsx)(n.h3,{id:"basic-row-format-usage",children:"Basic Row Format Usage"}),"\n",(0,s.jsx)(n.p,{children:"Encode objects to row format for random access without full deserialization. Ideal for large datasets:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\nimport pyarrow as pa\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n@dataclass\nclass Bar:\n    f1: str\n    f2: List[pa.int64]\n\n@dataclass\nclass Foo:\n    f1: pa.int32\n    f2: List[pa.int32]\n    f3: Dict[str, pa.int32]\n    f4: List[Bar]\n\n# Create encoder for row format\nencoder = pyfory.encoder(Foo)\n\n# Create large dataset\nfoo = Foo(\n    f1=10,\n    f2=list(range(1_000_000)),\n    f3={f"k{i}": i for i in range(1_000_000)},\n    f4=[Bar(f1=f"s{i}", f2=list(range(10))) for i in range(1_000_000)]\n)\n\n# Encode to row format\nbinary: bytes = encoder.to_row(foo).to_bytes()\n\n# Zero-copy access - no full deserialization needed!\nfoo_row = pyfory.RowData(encoder.schema, binary)\nprint(foo_row.f2[100000])              # Access 100,000th element directly\nprint(foo_row.f4[100000].f1)           # Access nested field directly\nprint(foo_row.f4[200000].f2[5])        # Access deeply nested field directly\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cross-language-compatibility",children:"Cross-Language Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"Row format works across languages. Here's the same data structure accessed in Java:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Bar {\n  String f1;\n  List<Long> f2;\n}\n\npublic class Foo {\n  int f1;\n  List<Integer> f2;\n  Map<String, Integer> f3;\n  List<Bar> f4;\n}\n\nRowEncoder<Foo> encoder = Encoders.bean(Foo.class);\n\n// Create large dataset\nFoo foo = new Foo();\nfoo.f1 = 10;\nfoo.f2 = IntStream.range(0, 1_000_000).boxed().collect(Collectors.toList());\nfoo.f3 = IntStream.range(0, 1_000_000).boxed().collect(Collectors.toMap(i -> "k" + i, i -> i));\nList<Bar> bars = new ArrayList<>(1_000_000);\nfor (int i = 0; i < 1_000_000; i++) {\n  Bar bar = new Bar();\n  bar.f1 = "s" + i;\n  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());\n  bars.add(bar);\n}\nfoo.f4 = bars;\n\n// Encode to row format (cross-language compatible with Python)\nBinaryRow binaryRow = encoder.toRow(foo);\n\n// Zero-copy random access without full deserialization\nBinaryArray f2Array = binaryRow.getArray(1);              // Access f2 list\nBinaryArray f4Array = binaryRow.getArray(3);              // Access f4 list\nBinaryRow bar10 = f4Array.getStruct(10);                  // Access 11th Bar\nlong value = bar10.getArray(1).getInt64(5);               // Access 6th element of bar.f2\n\n// Partial deserialization - only deserialize what you need\nRowEncoder<Bar> barEncoder = Encoders.bean(Bar.class);\nBar bar1 = barEncoder.fromRow(f4Array.getStruct(10));     // Deserialize 11th Bar only\nBar bar2 = barEncoder.fromRow(f4Array.getStruct(20));     // Deserialize 21st Bar only\n\n// Full deserialization when needed\nFoo newFoo = encoder.fromRow(binaryRow);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"C++"})}),"\n",(0,s.jsx)(n.p,{children:"And in C++ with compile-time type information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "fory/encoder/row_encoder.h"\n#include "fory/row/writer.h"\n\nstruct Bar {\n  std::string f1;\n  std::vector<int64_t> f2;\n};\n\nFORY_FIELD_INFO(Bar, f1, f2);\n\nstruct Foo {\n  int32_t f1;\n  std::vector<int32_t> f2;\n  std::map<std::string, int32_t> f3;\n  std::vector<Bar> f4;\n};\n\nFORY_FIELD_INFO(Foo, f1, f2, f3, f4);\n\n// Create large dataset\nFoo foo;\nfoo.f1 = 10;\nfor (int i = 0; i < 1000000; i++) {\n  foo.f2.push_back(i);\n  foo.f3["k" + std::to_string(i)] = i;\n}\nfor (int i = 0; i < 1000000; i++) {\n  Bar bar;\n  bar.f1 = "s" + std::to_string(i);\n  for (int j = 0; j < 10; j++) {\n    bar.f2.push_back(j);\n  }\n  foo.f4.push_back(bar);\n}\n\n// Encode to row format (cross-language compatible with Python/Java)\nfory::encoder::RowEncoder<Foo> encoder;\nencoder.Encode(foo);\nauto row = encoder.GetWriter().ToRow();\n\n// Zero-copy random access without full deserialization\nauto f2_array = row->GetArray(1);                    // Access f2 list\nauto f4_array = row->GetArray(3);                    // Access f4 list\nauto bar10 = f4_array->GetStruct(10);                // Access 11th Bar\nint64_t value = bar10->GetArray(1)->GetInt64(5);    // Access 6th element of bar.f2\nstd::string str = bar10->GetString(0);               // Access bar.f1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero-Copy Access"}),": Read nested fields without deserializing the entire object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Efficiency"}),": Memory-map large datasets directly from disk"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-Language"}),": Binary format is compatible between Python, Java, and other Fury implementations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partial Deserialization"}),": Deserialize only the specific elements you need"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Performance"}),": Skip unnecessary data parsing for analytics and big data workloads"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-core-api-reference",children:"\ud83c\udfd7\ufe0f Core API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"fory-class",children:"Fory Class"}),"\n",(0,s.jsx)(n.p,{children:"The main serialization interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Fory:\n    def __init__(\n        self,\n        xlang: bool = False,\n        ref: bool = False,\n        strict: bool = True,\n        compatible: bool = False,\n        max_depth: int = 50\n    )\n"})}),"\n",(0,s.jsx)(n.h3,{id:"threadsafefory-class",children:"ThreadSafeFory Class"}),"\n",(0,s.jsx)(n.p,{children:"Thread-safe serialization interface using thread-local storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class ThreadSafeFory:\n    def __init__(\n        self,\n        xlang: bool = False,\n        ref: bool = False,\n        strict: bool = True,\n        compatible: bool = False,\n        max_depth: int = 50\n    )\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ThreadSafeFory"})," provides thread-safe serialization by maintaining a pool of ",(0,s.jsx)(n.code,{children:"Fory"})," instances protected by a lock. When a thread needs to serialize/deserialize, it gets an instance from the pool, uses it, and returns it. All type registrations must be done before any serialization to ensure consistency across all instances."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Thread Safety Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\nimport threading\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\n# Create thread-safe Fory instance\nfory = pyfory.ThreadSafeFory(xlang=False, ref=True)\nfory.register(Person)\n\n# Use in multiple threads safely\ndef serialize_in_thread(thread_id):\n    person = Person(name=f"User{thread_id}", age=25 + thread_id)\n    data = fory.serialize(person)\n    result = fory.deserialize(data)\n    print(f"Thread {thread_id}: {result}")\n\nthreads = [threading.Thread(target=serialize_in_thread, args=(i,)) for i in range(10)]\nfor t in threads: t.start()\nfor t in threads: t.join()\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instance Pool"}),": Maintains a pool of ",(0,s.jsx)(n.code,{children:"Fory"})," instances protected by a lock for thread safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Configuration"}),": All registrations must be done upfront and are applied to all instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Same API"}),": Drop-in replacement for ",(0,s.jsx)(n.code,{children:"Fory"})," class with identical methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Registration Safety"}),": Prevents registration after first use to ensure consistency"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-threaded Applications"}),": Web servers, concurrent workers, parallel processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Fory Instances"}),": When multiple threads need to serialize/deserialize data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Thread Pools"}),": Applications using thread pools or concurrent.futures"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"xlang"})})," (",(0,s.jsx)(n.code,{children:"bool"}),", default=",(0,s.jsx)(n.code,{children:"False"}),"): Enable cross-language serialization. When ",(0,s.jsx)(n.code,{children:"False"}),", enables Python-native mode supporting all Python objects. When ",(0,s.jsx)(n.code,{children:"True"}),", enables cross-language mode compatible with Java, Go, Rust, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ref"})})," (",(0,s.jsx)(n.code,{children:"bool"}),", default=",(0,s.jsx)(n.code,{children:"False"}),"): Enable reference tracking for shared/circular references. Disable for better performance if your data has no shared references."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"strict"})})," (",(0,s.jsx)(n.code,{children:"bool"}),", default=",(0,s.jsx)(n.code,{children:"True"}),"): Require type registration for security. ",(0,s.jsx)(n.strong,{children:"Highly recommended"})," for production. Only disable in trusted environments."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"compatible"})})," (",(0,s.jsx)(n.code,{children:"bool"}),", default=",(0,s.jsx)(n.code,{children:"False"}),"): Enable schema evolution in cross-language mode, allowing fields to be added/removed while maintaining compatibility."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"max_depth"})})," (",(0,s.jsx)(n.code,{children:"int"}),", default=",(0,s.jsx)(n.code,{children:"50"}),"): Maximum deserialization depth for security, preventing stack overflow attacks."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Methods:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Serialization (serialize/deserialize are identical to dumps/loads)\ndata: bytes = fory.serialize(obj)\nobj = fory.deserialize(data)\n\n# Alternative API (aliases)\ndata: bytes = fory.dumps(obj)\nobj = fory.loads(data)\n\n# Type registration by id (for Python mode)\nfory.register(MyClass, type_id=123)\nfory.register(MyClass, type_id=123, serializer=custom_serializer)\n\n# Type registration by name (for cross-language mode)\nfory.register(MyClass, typename="my.package.MyClass")\nfory.register(MyClass, typename="my.package.MyClass", serializer=custom_serializer)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"language-modes-comparison",children:"Language Modes Comparison"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsxs)(n.th,{children:["Python Mode (",(0,s.jsx)(n.code,{children:"xlang=False"}),")"]}),(0,s.jsxs)(n.th,{children:["Cross-Language Mode (",(0,s.jsx)(n.code,{children:"xlang=True"}),")"]})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Use Case"})}),(0,s.jsx)(n.td,{children:"Pure Python applications"}),(0,s.jsx)(n.td,{children:"Multi-language systems"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Compatibility"})}),(0,s.jsx)(n.td,{children:"Python only"}),(0,s.jsx)(n.td,{children:"Java, Go, Rust, C++, JavaScript, etc."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Supported Types"})}),(0,s.jsx)(n.td,{children:"All Python types"}),(0,s.jsx)(n.td,{children:"Cross-language compatible types only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Functions/Lambdas"})}),(0,s.jsx)(n.td,{children:"\u2713 Supported"}),(0,s.jsx)(n.td,{children:"\u2717 Not allowed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Local Classes"})}),(0,s.jsx)(n.td,{children:"\u2713 Supported"}),(0,s.jsx)(n.td,{children:"\u2717 Not allowed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Dynamic Classes"})}),(0,s.jsx)(n.td,{children:"\u2713 Supported"}),(0,s.jsx)(n.td,{children:"\u2717 Not allowed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Schema Evolution"})}),(0,s.jsxs)(n.td,{children:["\u2713 Supported (with ",(0,s.jsx)(n.code,{children:"compatible=True"}),")"]}),(0,s.jsxs)(n.td,{children:["\u2713 Supported (with ",(0,s.jsx)(n.code,{children:"compatible=True"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),(0,s.jsx)(n.td,{children:"Extremely fast"}),(0,s.jsx)(n.td,{children:"Very fast"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Data Size"})}),(0,s.jsx)(n.td,{children:"Compact"}),(0,s.jsx)(n.td,{children:"Compact with type metadata"})]})]})]}),"\n",(0,s.jsxs)(n.h4,{id:"python-mode-xlangfalse",children:["Python Mode (",(0,s.jsx)(n.code,{children:"xlang=False"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Python mode supports all Python types including functions, classes, and closures. Perfect for pure Python applications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Full Python compatibility mode\nfory = pyfory.Fory(xlang=False, ref=True, strict=False)\n\n# Supports ALL Python objects:\ndata = fory.dumps({\n    'function': lambda x: x * 2,        # Functions and lambdas\n    'class': type('Dynamic', (), {}),    # Dynamic classes\n    'method': str.upper,                # Methods\n    'nested': {'circular_ref': None}    # Circular references (when ref=True)\n})\n\n# Drop-in replacement for pickle/cloudpickle\nimport pickle\nobj = [1, 2, {\"nested\": [3, 4]}]\nassert fory.loads(fory.dumps(obj)) == pickle.loads(pickle.dumps(obj))\n\n# Significantly faster and more compact than pickle\nimport timeit\nobj = {f\"key{i}\": f\"value{i}\" for i in range(10000)}\nprint(f\"Fory: {timeit.timeit(lambda: fory.dumps(obj), number=1000):.3f}s\")\nprint(f\"Pickle: {timeit.timeit(lambda: pickle.dumps(obj), number=1000):.3f}s\")\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"cross-language-mode-xlangtrue",children:["Cross-Language Mode (",(0,s.jsx)(n.code,{children:"xlang=True"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Cross-language mode restricts types to those compatible across all Fory implementations. Use for multi-language systems:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\n\n# Cross-language compatibility mode\nf = pyfory.Fory(xlang=True, ref=True)\n\n# Only supports cross-language compatible types\nf.register(MyDataClass, typename="com.example.MyDataClass")\n\n# Data can be read by Java, Go, Rust, etc.\ndata = f.serialize(MyDataClass(field1="value", field2=42))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-advanced-features",children:"\ud83d\udd27 Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"reference-tracking--circular-references",children:"Reference Tracking & Circular References"}),"\n",(0,s.jsxs)(n.p,{children:["Handle shared references and circular dependencies safely. Set ",(0,s.jsx)(n.code,{children:"ref=True"})," to deduplicate objects:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\n\nf = pyfory.Fory(ref=True)  # Enable reference tracking\n\n# Handle circular references safely\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n        self.parent = None\n\nroot = Node("root")\nchild = Node("child")\nchild.parent = root  # Circular reference\nroot.children.append(child)\n\n# Serializes without infinite recursion\ndata = f.serialize(root)\nresult = f.deserialize(data)\nassert result.children[0].parent is result  # Reference preserved\n'})}),"\n",(0,s.jsx)(n.h3,{id:"type-registration--security",children:"Type Registration & Security"}),"\n",(0,s.jsx)(n.p,{children:"In strict mode, only registered types can be deserialized. This prevents arbitrary code execution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\n\n# Strict mode (recommended for production)\nf = pyfory.Fory(strict=True)\n\nclass SafeClass:\n    def __init__(self, data):\n        self.data = data\n\n# Must register types in strict mode\nf.register(SafeClass, typename="com.example.SafeClass")\n\n# Now serialization works\nobj = SafeClass("safe data")\ndata = f.serialize(obj)\nresult = f.deserialize(data)\n\n# Unregistered types will raise an exception\nclass UnsafeClass:\n    pass\n\n# This will fail in strict mode\ntry:\n    f.serialize(UnsafeClass())\nexcept Exception as e:\n    print("Security protection activated!")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-serializers",children:"Custom Serializers"}),"\n",(0,s.jsxs)(n.p,{children:["Implement custom serialization logic for specialized types. Override ",(0,s.jsx)(n.code,{children:"write/read"})," for Python mode, ",(0,s.jsx)(n.code,{children:"xwrite/xread"})," for cross-language:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nfrom pyfory.serializer import Serializer\nfrom dataclasses import dataclass\n\n@dataclass\nclass Foo:\n    f1: int\n    f2: str\n\nclass FooSerializer(Serializer):\n    def __init__(self, fory, cls):\n        super().__init__(fory, cls)\n\n    def write(self, buffer, obj: Foo):\n        # Custom serialization logic\n        buffer.write_varint32(obj.f1)\n        buffer.write_string(obj.f2)\n\n    def read(self, buffer):\n        # Custom deserialization logic\n        f1 = buffer.read_varint32()\n        f2 = buffer.read_string()\n        return Foo(f1, f2)\n\n    # For cross-language mode\n    def xwrite(self, buffer, obj: Foo):\n        buffer.write_int32(obj.f1)\n        buffer.write_string(obj.f2)\n\n    def xread(self, buffer):\n        return Foo(buffer.read_int32(), buffer.read_string())\n\nf = pyfory.Fory()\nf.register(Foo, type_id=100, serializer=FooSerializer(f, Foo))\n\n# Now Foo uses your custom serializer\ndata = f.dumps(Foo(42, \"hello\"))\nresult = f.loads(data)\nprint(result)  # Foo(f1=42, f2='hello')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"numpy--scientific-computing",children:"Numpy & Scientific Computing"}),"\n",(0,s.jsx)(n.p,{children:"Fory natively supports numpy arrays with optimized serialization. Large arrays use zero-copy when possible:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport numpy as np\n\nf = pyfory.Fory()\n\n# Numpy arrays are supported natively\narrays = {\n    'matrix': np.random.rand(1000, 1000),\n    'vector': np.arange(10000),\n    'bool_mask': np.random.choice([True, False], size=5000)\n}\n\ndata = f.serialize(arrays)\nresult = f.deserialize(data)\n\n# Zero-copy for compatible array types\nassert np.array_equal(arrays['matrix'], result['matrix'])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\udca1 Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"production-configuration",children:"Production Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Use these recommended settings to balance security, performance, and functionality in production:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Recommended settings for production\nfory = pyfory.Fory(\n    xlang=False,        # Use True if you need cross-language support\n    ref=False,           # Enable if you have shared/circular references\n    strict=True,        # CRITICAL: Always True in production\n    compatible=False,   # Enable only if you need schema evolution\n    max_depth=20       # Adjust based on your data structure depth\n)\n\n# Register all types upfront\nfory.register(UserModel, type_id=100)\nfory.register(OrderModel, type_id=101)\nfory.register(ProductModel, type_id=102)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsx)(n.p,{children:"Optimize serialization speed and memory usage with these guidelines:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Disable ",(0,s.jsx)(n.code,{children:"ref=True"})," if not needed"]}),": Reference tracking has overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use type_id instead of typename"}),": Integer IDs are faster than string names"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reuse Fory instances"}),": Create once, use many times"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable Cython"}),": Make sure ",(0,s.jsx)(n.code,{children:"ENABLE_FORY_CYTHON_SERIALIZATION=1"}),", should be enabled by default"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use row format for large arrays"}),": Zero-copy access for analytics"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Good: Reuse instance\nfory = pyfory.Fory()\nfor obj in objects:\n    data = fory.dumps(obj)\n\n# Bad: Create new instance each time\nfor obj in objects:\n    fory = pyfory.Fory()  # Wasteful!\n    data = fory.dumps(obj)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"type-registration-patterns",children:"Type Registration Patterns"}),"\n",(0,s.jsx)(n.p,{children:"Choose the right registration approach for your use case:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Pattern 1: Simple registration\nfory.register(MyClass, type_id=100)\n\n# Pattern 2: Cross-language with typename\nfory.register(MyClass, typename="com.example.MyClass")\n\n# Pattern 3: With custom serializer\nfory.register(MyClass, type_id=100, serializer=MySerializer(fory, MyClass))\n\n# Pattern 4: Batch registration\ntype_id = 100\nfor model_class in [User, Order, Product, Invoice]:\n    fory.register(model_class, type_id=type_id)\n    type_id += 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Handle common serialization errors gracefully. Catch specific exceptions for better error recovery:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pyfory\nfrom pyfory.error import TypeUnregisteredError, TypeNotCompatibleError\n\nfory = pyfory.Fory(strict=True)\n\ntry:\n    data = fory.dumps(my_object)\nexcept TypeUnregisteredError as e:\n    print(f"Type not registered: {e}")\n    # Register the type and retry\n    fory.register(type(my_object), type_id=100)\n    data = fory.dumps(my_object)\nexcept Exception as e:\n    print(f"Serialization failed: {e}")\n\ntry:\n    obj = fory.loads(data)\nexcept TypeNotCompatibleError as e:\n    print(f"Schema mismatch: {e}")\n    # Handle version mismatch\nexcept Exception as e:\n    print(f"Deserialization failed: {e}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-migration-guide",children:"\ud83d\udee0\ufe0f Migration Guide"}),"\n",(0,s.jsx)(n.h3,{id:"from-pickle",children:"From Pickle"}),"\n",(0,s.jsx)(n.p,{children:"Replace pickle with Fory for better performance while keeping the same API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Before (pickle)\nimport pickle\ndata = pickle.dumps(obj)\nresult = pickle.loads(data)\n\n# After (Fory - drop-in replacement with better performance)\nimport pyfory\nf = pyfory.Fory(xlang=False, ref=True, strict=False)\ndata = f.dumps(obj)      # Faster and more compact\nresult = f.loads(data)   # Faster deserialization\n\n# Benefits:\n# - 2-10x faster serialization\n# - 2-5x faster deserialization\n# - Up to 3x smaller data size\n# - Same API, better performance\n"})}),"\n",(0,s.jsx)(n.h3,{id:"from-json",children:"From JSON"}),"\n",(0,s.jsx)(n.p,{children:"Unlike JSON, Fory supports arbitrary Python types including functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Before (JSON - limited types)\nimport json\ndata = json.dumps({"name": "Alice", "age": 30})\nresult = json.loads(data)\n\n# After (Fory - all Python types)\nimport pyfory\nf = pyfory.Fory()\ndata = f.dumps({"name": "Alice", "age": 30, "func": lambda x: x})\nresult = f.loads(data)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-security-best-practices",children:"\ud83d\udea8 Security Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"production-configuration-1",children:"Production Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Never disable ",(0,s.jsx)(n.code,{children:"strict=True"})," in production unless your environment is completely trusted:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\n\n# Recommended production settings\nf = pyfory.Fory(\n    xlang=False,   # or True for cross-language\n    ref=True,      # Handle circular references\n    strict=True,   # IMPORTANT: Prevent malicious data\n    max_depth=100  # Prevent deep recursion attacks\n)\n\n# Explicitly register allowed types\nf.register(UserModel, type_id=100)\nf.register(OrderModel, type_id=101)\n# Never set strict=False in production with untrusted data!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"development-vs-production",children:"Development vs Production"}),"\n",(0,s.jsx)(n.p,{children:"Use environment variables to switch between development and production configurations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import pyfory\nimport os\n\n# Development configuration\nif os.getenv('ENV') == 'development':\n    fory = pyfory.Fory(\n        xlang=False,\n        ref=True,\n        strict=False,    # Allow any type for development\n        max_depth=1000   # Higher limit for development\n    )\nelse:\n    # Production configuration (security hardened)\n    fory = pyfory.Fory(\n        xlang=False,\n        ref=True,\n        strict=True,     # CRITICAL: Require registration\n        max_depth=100    # Reasonable limit\n    )\n    # Register only known safe types\n    for idx, model_class in enumerate([UserModel, ProductModel, OrderModel]):\n        fory.register(model_class, type_id=100 + idx)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-troubleshooting",children:"\ud83d\udc1b Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: ImportError with format features"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# A: Install Row format support\npip install pyfory[format]\n\n# Or install from source with format support\npip install -e ".[format]"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Slow serialization performance"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# A: Check if Cython acceleration is enabled\nimport pyfory\nprint(pyfory.ENABLE_FORY_CYTHON_SERIALIZATION)  # Should be True\n\n# If False, Cython extension may not be compiled correctly\n# Reinstall with: pip install --force-reinstall --no-cache-dir pyfory\n\n# For debugging, you can disable Cython mode before importing\nimport os\nos.environ['ENABLE_FORY_CYTHON_SERIALIZATION'] = '0'\nimport pyfory  # Now uses pure Python mode\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Cross-language compatibility issues"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# A: Use explicit type registration with consistent naming\nf = pyfory.Fory(xlang=True)\nf.register(MyClass, typename="com.package.MyClass")  # Use same name in all languages\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Circular reference errors or duplicate data"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# A: Enable reference tracking\nf = pyfory.Fory(ref=True)  # Required for circular references\n\n# Example with circular reference\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode2.next = node1  # Circular reference\n\ndata = f.dumps(node1)\nresult = f.loads(data)\nassert result.next.next is result  # Circular reference preserved\n"})}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Set environment variable BEFORE importing pyfory to disable Cython for debugging\nimport os\nos.environ['ENABLE_FORY_CYTHON_SERIALIZATION'] = '0'\nimport pyfory  # Now uses pure Python implementation\n\n# This is useful for:\n# 1. Debugging protocol issues\n# 2. Understanding serialization behavior\n# 3. Development without recompiling Cython\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Schema evolution not working"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# A: Enable compatible mode for schema evolution\nf = pyfory.Fory(xlang=True, compatible=True)\n\n# Version 1: Original class\n@dataclass\nclass User:\n    name: str\n    age: int\n\nf.register(User, typename="User")\ndata = f.dumps(User("Alice", 30))\n\n# Version 2: Add new field (backward compatible)\n@dataclass\nclass User:\n    name: str\n    age: int\n    email: str = "unknown@example.com"  # New field with default\n\n# Can still deserialize old data\nuser = f.loads(data)\nprint(user.email)  # "unknown@example.com"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Type registration errors in strict mode"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# A: Register all custom types before serialization\nf = pyfory.Fory(strict=True)\n\n# Must register before use\nf.register(MyClass, type_id=100)\nf.register(AnotherClass, type_id=101)\n\n# Or disable strict mode (NOT recommended for production)\nf = pyfory.Fory(strict=False)  # Use only in trusted environments\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-contributing",children:"\ud83e\udd1d Contributing"}),"\n",(0,s.jsx)(n.p,{children:"Apache Fory\u2122 is an open-source project under the Apache Software Foundation. We welcome all forms of contributions:"}),"\n",(0,s.jsx)(n.h3,{id:"how-to-contribute",children:"How to Contribute"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Report Issues"}),": Found a bug? ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/issues",children:"Open an issue"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Suggest Features"}),": Have an idea? Start a discussion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improve Docs"}),": Documentation improvements are always welcome"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Submit Code"}),": See our ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/blob/main/CONTRIBUTING.md",children:"Contributing Guide"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"development-setup",children:"Development Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git clone https://github.com/apache/fory.git\ncd fory/python\n\n# Install dependencies\npip install -e ".[dev,format]"\n\n# Run tests\npytest -v -s .\n\n# Run specific test\npytest -v -s pyfory/tests/test_serializer.py\n\n# Format code\nruff format .\nruff check --fix .\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-license",children:"\ud83d\udcc4 License"}),"\n",(0,s.jsxs)(n.p,{children:["Apache License 2.0. See ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/blob/main/LICENSE",children:"LICENSE"})," for details."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Apache Fory\u2122"})," - Blazing fast, secure, and versatile serialization for modern applications."]}),"\n",(0,s.jsx)(n.h2,{id:"-links",children:"\ud83d\udd17 Links"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": ",(0,s.jsx)(n.a,{href:"https://fory.apache.org/docs/latest/python_guide/",children:"https://fory.apache.org/docs/latest/python_guide/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitHub"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory",children:"https://github.com/apache/fory"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PyPI"}),": ",(0,s.jsx)(n.a,{href:"https://pypi.org/project/pyfory/",children:"https://pypi.org/project/pyfory/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Issues"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory/issues",children:"https://github.com/apache/fory/issues"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slack"}),": ",(0,s.jsx)(n.a,{href:"https://join.slack.com/t/fory-project/shared_invite/zt-36g0qouzm-kcQSvV_dtfbtBKHRwT5gsw",children:"https://join.slack.com/t/fory-project/shared_invite/zt-36g0qouzm-kcQSvV_dtfbtBKHRwT5gsw"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Benchmarks"}),": ",(0,s.jsx)(n.a,{href:"https://fory.apache.org/docs/latest/benchmarks/",children:"https://fory.apache.org/docs/latest/benchmarks/"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-community",children:"\ud83c\udf1f Community"}),"\n",(0,s.jsx)(n.p,{children:"We welcome contributions! Whether it's bug reports, feature requests, documentation improvements, or code contributions, we appreciate your help."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Star the project on ",(0,s.jsx)(n.a,{href:"https://github.com/apache/fory",children:"GitHub"})," \u2b50"]}),"\n",(0,s.jsxs)(n.li,{children:["Join our ",(0,s.jsx)(n.a,{href:"https://join.slack.com/t/fory-project/shared_invite/zt-36g0qouzm-kcQSvV_dtfbtBKHRwT5gsw",children:"Slack community"})," \ud83d\udcac"]}),"\n",(0,s.jsxs)(n.li,{children:["Follow us on ",(0,s.jsx)(n.a,{href:"https://x.com/ApacheFory",children:"X/Twitter"})," \ud83d\udc26"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>o});var s=r(67294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);